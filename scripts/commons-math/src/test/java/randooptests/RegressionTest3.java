package randooptests;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test001");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf(1.169563782429775d, 0.8414709848078965d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test002");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math3.complex.Complex complex4 = complex1.asin();
        org.apache.commons.math3.complex.Complex complex6 = complex4.pow(100.0d);
        org.apache.commons.math3.complex.Complex complex7 = complex4.conjugate();
        org.apache.commons.math3.complex.Complex complex8 = complex7.acos();
        org.apache.commons.math3.complex.Complex complex10 = complex8.pow(3.296908309475615d);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex10);
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test003");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math3.complex.Complex complex6 = complex4.tanh();
        boolean boolean8 = complex6.equals((java.lang.Object) true);
        double double9 = complex6.getImaginary();
        org.apache.commons.math3.complex.Complex complex10 = complex6.sinh();
        org.apache.commons.math3.complex.Complex complex12 = complex6.multiply(0.0d);
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex1, complex6);
        org.apache.commons.math3.complex.Complex complex15 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math3.complex.Complex complex17 = complex15.sqrt1z();
        org.apache.commons.math3.complex.Complex complex18 = complex6.subtract(complex15);
        org.apache.commons.math3.complex.Complex complex20 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math3.complex.Complex complex22 = complex20.tanh();
        boolean boolean24 = complex22.equals((java.lang.Object) true);
        double double25 = complex22.getImaginary();
        org.apache.commons.math3.complex.Complex complex26 = complex22.sinh();
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex30 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double31 = complex30.getReal();
        org.apache.commons.math3.complex.Complex complex33 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double34 = complex33.getReal();
        boolean boolean35 = org.apache.commons.math3.complex.Complex.equals(complex30, complex33);
        boolean boolean37 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex28, complex30, (double) 0.0f);
        java.lang.String str38 = complex28.toString();
        org.apache.commons.math3.complex.Complex complex40 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double41 = complex40.getReal();
        org.apache.commons.math3.complex.Complex complex43 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double44 = complex43.getReal();
        boolean boolean45 = org.apache.commons.math3.complex.Complex.equals(complex40, complex43);
        org.apache.commons.math3.complex.Complex complex47 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean49 = org.apache.commons.math3.complex.Complex.equals(complex40, complex47, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex50 = complex28.add(complex47);
        org.apache.commons.math3.complex.Complex complex51 = complex26.multiply(complex50);
        java.lang.Class<?> wildcardClass52 = complex50.getClass();
        org.apache.commons.math3.complex.Complex complex54 = complex50.divide((double) '#');
        boolean boolean55 = org.apache.commons.math3.complex.Complex.equals(complex6, complex54);
        org.apache.commons.math3.complex.Complex complex57 = complex6.add(3.501929622595518d);
        org.apache.commons.math3.complex.Complex complex59 = complex6.multiply((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-1.0d) + "'", double31 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "(-1.0, 0.0)" + "'", str38.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-1.0d) + "'", double41 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1.0d) + "'", double44 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex59);
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test004");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex(100.0d, (double) (short) 100);
        org.apache.commons.math3.complex.Complex complex4 = complex2.multiply((double) 100);
        org.apache.commons.math3.complex.Complex complex7 = org.apache.commons.math3.complex.Complex.valueOf(100.0d, (double) (short) 0);
        org.apache.commons.math3.complex.Complex complex9 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double10 = complex9.getReal();
        org.apache.commons.math3.complex.Complex complex12 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double13 = complex12.getReal();
        boolean boolean14 = org.apache.commons.math3.complex.Complex.equals(complex9, complex12);
        org.apache.commons.math3.complex.Complex complex15 = complex12.sqrt();
        org.apache.commons.math3.complex.Complex complex17 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math3.complex.Complex complex19 = complex17.tanh();
        boolean boolean21 = complex19.equals((java.lang.Object) true);
        double double22 = complex19.getImaginary();
        org.apache.commons.math3.complex.Complex complex23 = complex19.sinh();
        org.apache.commons.math3.complex.Complex complex24 = complex19.cosh();
        double double25 = complex19.getImaginary();
        org.apache.commons.math3.complex.Complex complex26 = complex12.add(complex19);
        org.apache.commons.math3.complex.Complex complex27 = complex7.add(complex19);
        org.apache.commons.math3.complex.Complex complex29 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math3.complex.Complex complex31 = complex29.tanh();
        boolean boolean33 = complex31.equals((java.lang.Object) true);
        double double34 = complex31.getImaginary();
        org.apache.commons.math3.complex.Complex complex35 = complex31.sinh();
        org.apache.commons.math3.complex.Complex complex36 = complex27.multiply(complex35);
        boolean boolean38 = org.apache.commons.math3.complex.Complex.equals(complex4, complex27, (int) '4');
        double double39 = complex27.abs();
        org.apache.commons.math3.complex.Complex complex42 = org.apache.commons.math3.complex.Complex.valueOf((double) 10.0f, (double) (-1));
        org.apache.commons.math3.complex.Complex complex43 = complex27.subtract(complex42);
        org.apache.commons.math3.complex.Complex complex44 = complex42.reciprocal();
        org.apache.commons.math3.complex.Complex complex45 = complex44.reciprocal();
        org.apache.commons.math3.complex.Complex complex46 = complex44.atan();
        org.apache.commons.math3.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math3.complex.Complex complex48 = complex47.acos();
        org.apache.commons.math3.complex.ComplexField complexField49 = complex47.getField();
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1.0d) + "'", double13 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexField49);
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test005");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex8 = complex3.cosh();
        double double9 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex10 = complex3.sqrt();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(complex10);
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test006");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = complex1.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex5 = complex1.log();
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) 10, (-2.0d));
        org.apache.commons.math3.complex.Complex complex9 = complex5.subtract(complex8);
        org.apache.commons.math3.complex.Complex complex10 = complex5.sqrt1z();
        org.apache.commons.math3.complex.Complex complex11 = complex5.sqrt();
        org.apache.commons.math3.complex.Complex complex13 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math3.complex.Complex complex15 = complex13.sqrt1z();
        org.apache.commons.math3.complex.Complex complex16 = complex15.reciprocal();
        org.apache.commons.math3.complex.Complex complex17 = complex11.multiply(complex16);
        org.apache.commons.math3.complex.Complex complex19 = new org.apache.commons.math3.complex.Complex((double) (short) 10);
        double double20 = complex19.getReal();
        org.apache.commons.math3.complex.Complex complex21 = complex19.sinh();
        org.apache.commons.math3.complex.Complex complex23 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double24 = complex23.getReal();
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double27 = complex26.getReal();
        boolean boolean28 = org.apache.commons.math3.complex.Complex.equals(complex23, complex26);
        org.apache.commons.math3.complex.Complex complex30 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean32 = org.apache.commons.math3.complex.Complex.equals(complex23, complex30, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex33 = complex30.sin();
        org.apache.commons.math3.complex.Complex complex34 = complex33.log();
        org.apache.commons.math3.complex.Complex complex35 = complex19.add(complex34);
        org.apache.commons.math3.complex.Complex complex36 = complex16.multiply(complex35);
        org.apache.commons.math3.complex.Complex complex37 = complex36.log();
        org.apache.commons.math3.complex.Complex complex38 = complex37.atan();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1.0d) + "'", double24 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1.0d) + "'", double27 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test007");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double9 = complex8.getReal();
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex8, complex11);
        org.apache.commons.math3.complex.Complex complex14 = complex11.sqrt();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        org.apache.commons.math3.complex.Complex complex19 = complex16.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex20 = complex14.pow(complex19);
        org.apache.commons.math3.complex.Complex complex21 = complex4.multiply(complex20);
        org.apache.commons.math3.complex.Complex complex22 = complex20.sqrt1z();
        org.apache.commons.math3.complex.Complex complex23 = complex20.log();
        org.apache.commons.math3.complex.Complex complex25 = complex20.divide((-1.9643867237284715E-15d));
        org.apache.commons.math3.complex.Complex complex26 = complex20.sin();
        org.apache.commons.math3.complex.Complex complex27 = complex26.cos();
        java.util.List<org.apache.commons.math3.complex.Complex> complexList29 = complex27.nthRoot((int) (short) 10);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexList29);
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test008");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex(3.141592653589793d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.tan();
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test009");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((-2.0d));
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt1z();
        org.apache.commons.math3.complex.Complex complex3 = complex2.tanh();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (short) 100, (double) (short) -1);
        org.apache.commons.math3.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math3.complex.Complex complex9 = complex7.multiply((int) (short) -1);
        org.apache.commons.math3.complex.Complex complex10 = complex9.acos();
        boolean boolean12 = org.apache.commons.math3.complex.Complex.equals(complex2, complex10, (-1.557407724654902d));
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((-0.7853981633974483d));
        org.apache.commons.math3.complex.Complex complex15 = complex2.divide(complex14);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(complex15);
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test010");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math3.complex.Complex complex4 = complex1.asin();
        double double5 = complex1.abs();
        org.apache.commons.math3.complex.Complex complex7 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math3.complex.Complex complex9 = complex7.tanh();
        org.apache.commons.math3.complex.Complex complex10 = complex9.sin();
        org.apache.commons.math3.complex.Complex complex12 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex13 = complex12.sqrt();
        boolean boolean15 = org.apache.commons.math3.complex.Complex.equals(complex9, complex12, (int) (byte) -1);
        org.apache.commons.math3.complex.ComplexField complexField16 = complex12.getField();
        org.apache.commons.math3.complex.Complex complex17 = complex1.divide(complex12);
        org.apache.commons.math3.complex.ComplexField complexField18 = complex12.getField();
        org.apache.commons.math3.complex.Complex complex20 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math3.complex.Complex complex22 = complex20.tanh();
        boolean boolean24 = complex22.equals((java.lang.Object) true);
        double double25 = complex22.getImaginary();
        org.apache.commons.math3.complex.Complex complex26 = complex22.sinh();
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex30 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double31 = complex30.getReal();
        org.apache.commons.math3.complex.Complex complex33 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double34 = complex33.getReal();
        boolean boolean35 = org.apache.commons.math3.complex.Complex.equals(complex30, complex33);
        boolean boolean37 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex28, complex30, (double) 0.0f);
        java.lang.String str38 = complex28.toString();
        org.apache.commons.math3.complex.Complex complex40 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double41 = complex40.getReal();
        org.apache.commons.math3.complex.Complex complex43 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double44 = complex43.getReal();
        boolean boolean45 = org.apache.commons.math3.complex.Complex.equals(complex40, complex43);
        org.apache.commons.math3.complex.Complex complex47 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean49 = org.apache.commons.math3.complex.Complex.equals(complex40, complex47, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex50 = complex28.add(complex47);
        org.apache.commons.math3.complex.Complex complex51 = complex26.multiply(complex50);
        org.apache.commons.math3.complex.Complex complex52 = complex51.log();
        boolean boolean53 = complex12.equals((java.lang.Object) complex51);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(complexField16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complexField18);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-1.0d) + "'", double31 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "(-1.0, 0.0)" + "'", str38.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-1.0d) + "'", double41 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1.0d) + "'", double44 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test011");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex9 = complex3.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        boolean boolean20 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex11, complex13, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex22 = complex13.multiply(1);
        org.apache.commons.math3.complex.Complex complex23 = complex13.conjugate();
        boolean boolean25 = org.apache.commons.math3.complex.Complex.equals(complex9, complex13, (int) (short) 100);
        org.apache.commons.math3.complex.Complex complex27 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex28 = complex27.sqrt();
        org.apache.commons.math3.complex.Complex complex29 = complex27.tanh();
        double double30 = complex29.abs();
        org.apache.commons.math3.complex.Complex complex31 = complex29.exp();
        org.apache.commons.math3.complex.Complex complex32 = complex31.negate();
        org.apache.commons.math3.complex.Complex complex33 = complex31.sin();
        org.apache.commons.math3.complex.Complex complex34 = complex9.subtract(complex33);
        org.apache.commons.math3.complex.Complex complex36 = complex33.divide(0.0d);
        org.apache.commons.math3.complex.ComplexField complexField37 = complex33.getField();
        org.apache.commons.math3.complex.Complex complex39 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double40 = complex39.getReal();
        double double41 = complex39.getReal();
        org.apache.commons.math3.complex.Complex complex42 = complex39.tan();
        org.apache.commons.math3.complex.Complex complex43 = complex39.asin();
        boolean boolean44 = complex33.equals((java.lang.Object) complex43);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complexField37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-1.0d) + "'", double40 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-1.0d) + "'", double41 == (-1.0d));
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test012");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex8 = complex3.cosh();
        double double9 = complex3.getImaginary();
        double double10 = complex3.abs();
        org.apache.commons.math3.complex.Complex complex12 = complex3.multiply((-1));
        org.apache.commons.math3.complex.Complex complex14 = complex3.add((double) 1.0f);
        org.apache.commons.math3.complex.Complex complex16 = complex14.multiply((int) (short) 100);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex16);
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test013");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        java.lang.String str11 = complex1.toString();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex23 = complex1.add(complex20);
        org.apache.commons.math3.complex.Complex complex24 = org.apache.commons.math3.complex.Complex.NaN;
        org.apache.commons.math3.complex.Complex complex25 = complex20.subtract(complex24);
        org.apache.commons.math3.complex.Complex complex27 = complex20.subtract((double) 100.0f);
        org.apache.commons.math3.complex.Complex complex29 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math3.complex.Complex complex31 = complex29.tanh();
        boolean boolean33 = complex31.equals((java.lang.Object) true);
        double double34 = complex31.getImaginary();
        org.apache.commons.math3.complex.Complex complex35 = complex31.sinh();
        org.apache.commons.math3.complex.Complex complex36 = complex27.pow(complex31);
        org.apache.commons.math3.complex.Complex complex37 = complex27.reciprocal();
        org.apache.commons.math3.complex.Complex complex38 = complex37.cosh();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "(-1.0, 0.0)" + "'", str11.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test014");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex11 = complex1.log();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, 10);
        org.apache.commons.math3.complex.Complex complex24 = complex20.pow((double) (byte) 1);
        boolean boolean25 = org.apache.commons.math3.complex.Complex.equals(complex1, complex24);
        org.apache.commons.math3.complex.Complex complex26 = complex1.cosh();
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double29 = complex28.getReal();
        org.apache.commons.math3.complex.Complex complex31 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double32 = complex31.getReal();
        boolean boolean33 = org.apache.commons.math3.complex.Complex.equals(complex28, complex31);
        org.apache.commons.math3.complex.Complex complex34 = complex31.sqrt();
        org.apache.commons.math3.complex.Complex complex36 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math3.complex.Complex complex38 = complex36.tanh();
        boolean boolean40 = complex38.equals((java.lang.Object) true);
        double double41 = complex38.getImaginary();
        org.apache.commons.math3.complex.Complex complex43 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double44 = complex43.getReal();
        org.apache.commons.math3.complex.Complex complex46 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double47 = complex46.getReal();
        boolean boolean48 = org.apache.commons.math3.complex.Complex.equals(complex43, complex46);
        org.apache.commons.math3.complex.Complex complex50 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean52 = org.apache.commons.math3.complex.Complex.equals(complex43, complex50, 10);
        org.apache.commons.math3.complex.Complex complex54 = complex50.pow((double) (byte) 1);
        boolean boolean56 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex38, complex50, (double) (-1));
        org.apache.commons.math3.complex.Complex complex57 = complex50.sin();
        org.apache.commons.math3.complex.Complex complex59 = complex57.subtract((double) (byte) 1);
        org.apache.commons.math3.complex.Complex complex60 = complex34.subtract(complex57);
        org.apache.commons.math3.complex.Complex complex61 = complex1.add(complex57);
        org.apache.commons.math3.complex.Complex complex62 = complex57.acos();
        org.apache.commons.math3.complex.Complex complex64 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex65 = complex64.sqrt();
        org.apache.commons.math3.complex.Complex complex66 = complex64.tanh();
        org.apache.commons.math3.complex.Complex complex67 = complex66.sin();
        org.apache.commons.math3.complex.Complex complex68 = complex57.divide(complex67);
        double double69 = complex57.abs();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1.0d) + "'", double29 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-1.0d) + "'", double32 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1.0d) + "'", double44 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-1.0d) + "'", double47 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.8414709848078965d + "'", double69 == 0.8414709848078965d);
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test015");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math3.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math3.complex.Complex complex6 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex7 = complex6.sqrt();
        boolean boolean9 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6, (int) (byte) -1);
        org.apache.commons.math3.complex.Complex complex10 = complex3.cosh();
        org.apache.commons.math3.complex.Complex complex11 = complex3.asin();
        java.lang.Class<?> wildcardClass12 = complex11.getClass();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test016");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex12 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double13 = complex12.getReal();
        org.apache.commons.math3.complex.Complex complex15 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math3.complex.Complex complex17 = complex15.tanh();
        boolean boolean19 = complex17.equals((java.lang.Object) true);
        double double20 = complex17.getImaginary();
        org.apache.commons.math3.complex.Complex complex21 = complex17.sinh();
        org.apache.commons.math3.complex.Complex complex23 = complex17.multiply(0.0d);
        boolean boolean24 = org.apache.commons.math3.complex.Complex.equals(complex12, complex17);
        org.apache.commons.math3.complex.Complex complex26 = complex12.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex28 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math3.complex.Complex complex30 = complex28.tanh();
        boolean boolean32 = complex30.equals((java.lang.Object) true);
        double double33 = complex30.getImaginary();
        org.apache.commons.math3.complex.Complex complex34 = complex26.add(complex30);
        boolean boolean36 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex3, complex34, (double) 10);
        org.apache.commons.math3.complex.Complex complex38 = complex34.pow(0.0d);
        org.apache.commons.math3.complex.Complex complex40 = complex34.add(Double.NaN);
        org.apache.commons.math3.complex.Complex complex41 = complex40.cos();
        org.apache.commons.math3.complex.Complex complex44 = new org.apache.commons.math3.complex.Complex((double) (byte) 10, (double) (short) 1);
        org.apache.commons.math3.complex.Complex complex45 = complex44.sqrt1z();
        org.apache.commons.math3.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math3.complex.Complex complex47 = complex40.subtract(complex46);
        org.apache.commons.math3.complex.Complex complex49 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double50 = complex49.getReal();
        org.apache.commons.math3.complex.Complex complex52 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double53 = complex52.getReal();
        boolean boolean54 = org.apache.commons.math3.complex.Complex.equals(complex49, complex52);
        org.apache.commons.math3.complex.Complex complex56 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean58 = org.apache.commons.math3.complex.Complex.equals(complex49, complex56, 10);
        org.apache.commons.math3.complex.Complex complex60 = complex56.add(0.0d);
        double double61 = complex60.getImaginary();
        org.apache.commons.math3.complex.Complex complex62 = complex60.sinh();
        org.apache.commons.math3.complex.Complex complex64 = complex62.multiply((double) 10L);
        java.lang.Class<?> wildcardClass65 = complex62.getClass();
        boolean boolean66 = org.apache.commons.math3.complex.Complex.equals(complex40, complex62);
        org.apache.commons.math3.complex.Complex complex67 = complex40.acos();
        org.apache.commons.math3.complex.Complex complex68 = complex67.atan();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1.0d) + "'", double13 == (-1.0d));
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-1.0d) + "'", double50 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-1.0d) + "'", double53 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test017");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf((double) 10.0f, (double) (-1));
        java.lang.String str3 = complex2.toString();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "(10.0, -1.0)" + "'", str3.equals("(10.0, -1.0)"));
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test018");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        double double4 = complex3.abs();
        org.apache.commons.math3.complex.Complex complex5 = complex3.exp();
        org.apache.commons.math3.complex.Complex complex6 = complex5.negate();
        org.apache.commons.math3.complex.Complex complex8 = complex6.pow((-0.0d));
        org.apache.commons.math3.complex.Complex complex9 = complex8.tan();
        org.apache.commons.math3.complex.Complex complex10 = complex9.acos();
        org.apache.commons.math3.complex.Complex complex12 = new org.apache.commons.math3.complex.Complex(0.7853981633974483d);
        org.apache.commons.math3.complex.Complex complex13 = complex12.sqrt1z();
        org.apache.commons.math3.complex.Complex complex15 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex17 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double18 = complex17.getReal();
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double21 = complex20.getReal();
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex17, complex20);
        boolean boolean24 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex15, complex17, (double) 0.0f);
        java.lang.String str25 = complex15.toString();
        org.apache.commons.math3.complex.Complex complex27 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double28 = complex27.getReal();
        org.apache.commons.math3.complex.Complex complex30 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double31 = complex30.getReal();
        boolean boolean32 = org.apache.commons.math3.complex.Complex.equals(complex27, complex30);
        org.apache.commons.math3.complex.Complex complex34 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean36 = org.apache.commons.math3.complex.Complex.equals(complex27, complex34, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex37 = complex15.add(complex34);
        org.apache.commons.math3.complex.Complex complex38 = org.apache.commons.math3.complex.Complex.NaN;
        org.apache.commons.math3.complex.Complex complex39 = complex34.subtract(complex38);
        boolean boolean40 = org.apache.commons.math3.complex.Complex.equals(complex13, complex34);
        org.apache.commons.math3.complex.Complex complex41 = complex34.asin();
        org.apache.commons.math3.complex.Complex complex42 = complex9.multiply(complex34);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.0d) + "'", double18 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1.0d) + "'", double21 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "(-1.0, 0.0)" + "'", str25.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-1.0d) + "'", double28 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-1.0d) + "'", double31 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test019");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex((double) (short) 100, (double) (short) -1);
        org.apache.commons.math3.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math3.complex.Complex complex5 = complex3.multiply((int) (short) -1);
        org.apache.commons.math3.complex.Complex complex7 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math3.complex.Complex complex9 = complex7.tanh();
        org.apache.commons.math3.complex.Complex complex10 = complex7.asin();
        org.apache.commons.math3.complex.Complex complex11 = complex10.tan();
        org.apache.commons.math3.complex.Complex complex13 = complex11.divide((double) 10);
        org.apache.commons.math3.complex.Complex complex16 = org.apache.commons.math3.complex.Complex.valueOf((double) 10.0f, (double) (-1));
        org.apache.commons.math3.complex.Complex complex18 = complex16.add((double) 'a');
        boolean boolean19 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        boolean boolean21 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex3, complex16, 3.141592653589793d);
        org.apache.commons.math3.complex.Complex complex22 = complex3.tanh();
        double double23 = complex3.getArgument();
        org.apache.commons.math3.complex.Complex complex24 = null;
        try {
            org.apache.commons.math3.complex.Complex complex25 = complex3.divide(complex24);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
        }
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test020");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        java.lang.String str11 = complex1.toString();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex23 = complex1.add(complex20);
        java.lang.String str24 = complex20.toString();
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex27 = complex20.divide(complex26);
        org.apache.commons.math3.complex.Complex complex28 = complex26.negate();
        org.apache.commons.math3.complex.Complex complex29 = complex26.sqrt1z();
        org.apache.commons.math3.complex.ComplexField complexField30 = complex26.getField();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "(-1.0, 0.0)" + "'", str11.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "(-1.0, 0.0)" + "'", str24.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complexField30);
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test021");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf((double) (short) 10, (double) 100);
        java.lang.Class<?> wildcardClass3 = complex2.getClass();
        double double4 = complex2.getImaginary();
        org.apache.commons.math3.complex.Complex complex5 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex6 = complex5.asin();
        org.apache.commons.math3.complex.Complex complex7 = complex5.tanh();
        boolean boolean8 = complex2.equals((java.lang.Object) complex7);
        double double9 = complex7.getReal();
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double15 = complex14.getReal();
        boolean boolean16 = org.apache.commons.math3.complex.Complex.equals(complex11, complex14);
        org.apache.commons.math3.complex.Complex complex18 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math3.complex.Complex complex20 = complex18.tanh();
        boolean boolean22 = complex20.equals((java.lang.Object) true);
        double double23 = complex20.getImaginary();
        org.apache.commons.math3.complex.Complex complex24 = complex20.sinh();
        org.apache.commons.math3.complex.Complex complex25 = complex20.cosh();
        double double26 = complex20.getImaginary();
        boolean boolean27 = complex14.equals((java.lang.Object) complex20);
        org.apache.commons.math3.complex.Complex complex28 = complex20.log();
        org.apache.commons.math3.complex.Complex complex29 = complex28.conjugate();
        org.apache.commons.math3.complex.Complex complex30 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex31 = complex30.asin();
        org.apache.commons.math3.complex.Complex complex32 = complex30.tanh();
        org.apache.commons.math3.complex.Complex complex33 = complex32.sin();
        org.apache.commons.math3.complex.Complex complex35 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double36 = complex35.getReal();
        double double37 = complex35.getReal();
        org.apache.commons.math3.complex.Complex complex38 = complex35.tan();
        org.apache.commons.math3.complex.Complex complex39 = complex35.exp();
        org.apache.commons.math3.complex.Complex complex41 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double42 = complex41.getReal();
        org.apache.commons.math3.complex.Complex complex44 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math3.complex.Complex complex46 = complex44.tanh();
        boolean boolean48 = complex46.equals((java.lang.Object) true);
        double double49 = complex46.getImaginary();
        org.apache.commons.math3.complex.Complex complex50 = complex46.sinh();
        org.apache.commons.math3.complex.Complex complex52 = complex46.multiply(0.0d);
        boolean boolean53 = org.apache.commons.math3.complex.Complex.equals(complex41, complex46);
        org.apache.commons.math3.complex.Complex complex55 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math3.complex.Complex complex57 = complex55.sqrt1z();
        org.apache.commons.math3.complex.Complex complex58 = complex46.subtract(complex55);
        org.apache.commons.math3.complex.Complex complex59 = complex39.divide(complex46);
        org.apache.commons.math3.complex.Complex complex60 = complex32.pow(complex39);
        boolean boolean62 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex29, complex32, (double) 0L);
        boolean boolean63 = complex29.isNaN();
        org.apache.commons.math3.complex.Complex complex65 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex67 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double68 = complex67.getReal();
        org.apache.commons.math3.complex.Complex complex70 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double71 = complex70.getReal();
        boolean boolean72 = org.apache.commons.math3.complex.Complex.equals(complex67, complex70);
        boolean boolean74 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex65, complex67, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex75 = complex65.conjugate();
        boolean boolean76 = complex29.equals((java.lang.Object) complex65);
        double double77 = complex29.getImaginary();
        org.apache.commons.math3.complex.Complex complex78 = complex7.subtract(complex29);
        org.apache.commons.math3.complex.Complex complex79 = complex78.atan();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.7615941559557649d + "'", double9 == 0.7615941559557649d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-1.0d) + "'", double36 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + (-1.0d) + "'", double37 == (-1.0d));
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + (-1.0d) + "'", double42 == (-1.0d));
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-1.0d) + "'", double68 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + (-1.0d) + "'", double71 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + (-0.0d) + "'", double77 == (-0.0d));
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test022");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex(3.1415926535897927d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test023");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex9 = complex3.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        boolean boolean20 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex11, complex13, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex21 = complex11.log();
        org.apache.commons.math3.complex.Complex complex23 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double24 = complex23.getReal();
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double27 = complex26.getReal();
        boolean boolean28 = org.apache.commons.math3.complex.Complex.equals(complex23, complex26);
        org.apache.commons.math3.complex.Complex complex30 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean32 = org.apache.commons.math3.complex.Complex.equals(complex23, complex30, 10);
        org.apache.commons.math3.complex.Complex complex34 = complex30.pow((double) (byte) 1);
        boolean boolean35 = org.apache.commons.math3.complex.Complex.equals(complex11, complex34);
        org.apache.commons.math3.complex.Complex complex36 = complex11.reciprocal();
        boolean boolean38 = org.apache.commons.math3.complex.Complex.equals(complex9, complex11, (double) (byte) 1);
        org.apache.commons.math3.complex.Complex complex39 = complex11.acos();
        org.apache.commons.math3.complex.Complex complex40 = complex11.cos();
        java.lang.Class<?> wildcardClass41 = complex11.getClass();
        org.apache.commons.math3.complex.Complex complex42 = complex11.sin();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1.0d) + "'", double24 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1.0d) + "'", double27 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(complex42);
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test024");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex(100.0d, (double) (short) 100);
        org.apache.commons.math3.complex.Complex complex4 = complex2.multiply((double) 100);
        org.apache.commons.math3.complex.Complex complex7 = org.apache.commons.math3.complex.Complex.valueOf(100.0d, (double) (short) 0);
        org.apache.commons.math3.complex.Complex complex9 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double10 = complex9.getReal();
        org.apache.commons.math3.complex.Complex complex12 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double13 = complex12.getReal();
        boolean boolean14 = org.apache.commons.math3.complex.Complex.equals(complex9, complex12);
        org.apache.commons.math3.complex.Complex complex15 = complex12.sqrt();
        org.apache.commons.math3.complex.Complex complex17 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math3.complex.Complex complex19 = complex17.tanh();
        boolean boolean21 = complex19.equals((java.lang.Object) true);
        double double22 = complex19.getImaginary();
        org.apache.commons.math3.complex.Complex complex23 = complex19.sinh();
        org.apache.commons.math3.complex.Complex complex24 = complex19.cosh();
        double double25 = complex19.getImaginary();
        org.apache.commons.math3.complex.Complex complex26 = complex12.add(complex19);
        org.apache.commons.math3.complex.Complex complex27 = complex7.add(complex19);
        org.apache.commons.math3.complex.Complex complex29 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math3.complex.Complex complex31 = complex29.tanh();
        boolean boolean33 = complex31.equals((java.lang.Object) true);
        double double34 = complex31.getImaginary();
        org.apache.commons.math3.complex.Complex complex35 = complex31.sinh();
        org.apache.commons.math3.complex.Complex complex36 = complex27.multiply(complex35);
        boolean boolean38 = org.apache.commons.math3.complex.Complex.equals(complex4, complex27, (int) '4');
        double double39 = complex27.abs();
        org.apache.commons.math3.complex.Complex complex42 = org.apache.commons.math3.complex.Complex.valueOf((double) 10.0f, (double) (-1));
        org.apache.commons.math3.complex.Complex complex43 = complex27.subtract(complex42);
        org.apache.commons.math3.complex.Complex complex45 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double46 = complex45.getReal();
        org.apache.commons.math3.complex.Complex complex48 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex49 = complex48.sqrt();
        org.apache.commons.math3.complex.Complex complex50 = complex48.tanh();
        boolean boolean52 = complex50.equals((java.lang.Object) true);
        double double53 = complex50.getImaginary();
        org.apache.commons.math3.complex.Complex complex54 = complex50.sinh();
        org.apache.commons.math3.complex.Complex complex56 = complex50.multiply(0.0d);
        boolean boolean57 = org.apache.commons.math3.complex.Complex.equals(complex45, complex50);
        org.apache.commons.math3.complex.Complex complex59 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex60 = complex59.sqrt();
        org.apache.commons.math3.complex.Complex complex61 = complex59.sqrt1z();
        org.apache.commons.math3.complex.Complex complex62 = complex50.subtract(complex59);
        org.apache.commons.math3.complex.Complex complex63 = complex62.reciprocal();
        org.apache.commons.math3.complex.Complex complex64 = complex63.acos();
        double double65 = complex64.getArgument();
        org.apache.commons.math3.complex.Complex complex67 = complex64.multiply((double) (byte) 1);
        org.apache.commons.math3.complex.Complex complex68 = complex64.acos();
        double double69 = complex64.getReal();
        org.apache.commons.math3.complex.Complex complex70 = complex42.subtract(complex64);
        org.apache.commons.math3.complex.Complex complex72 = complex42.subtract((-1.5227865933864404d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1.0d) + "'", double13 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1.0d) + "'", double46 == (-1.0d));
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertEquals((double) double65, Double.NaN, 0);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertEquals((double) double69, Double.NaN, 0);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex72);
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test025");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex7 = complex1.exp();
        org.apache.commons.math3.complex.Complex complex8 = complex1.sqrt1z();
        java.util.List<org.apache.commons.math3.complex.Complex> complexList10 = complex1.nthRoot(1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complexList10);
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test026");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex9 = complex3.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        double double13 = complex11.getReal();
        org.apache.commons.math3.complex.Complex complex14 = complex3.add(complex11);
        org.apache.commons.math3.complex.Complex complex15 = complex11.log();
        double double16 = complex11.getImaginary();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1.0d) + "'", double13 == (-1.0d));
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test027");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equals(complex1, complex8, 10);
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (short) 100, (double) (short) -1);
        boolean boolean14 = complex1.equals((java.lang.Object) complex13);
        org.apache.commons.math3.complex.Complex complex15 = complex1.log();
        org.apache.commons.math3.complex.Complex complex16 = complex15.conjugate();
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double21 = complex20.getReal();
        org.apache.commons.math3.complex.Complex complex23 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double24 = complex23.getReal();
        boolean boolean25 = org.apache.commons.math3.complex.Complex.equals(complex20, complex23);
        boolean boolean27 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex18, complex20, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex28 = complex18.log();
        org.apache.commons.math3.complex.Complex complex30 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double31 = complex30.getReal();
        org.apache.commons.math3.complex.Complex complex33 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double34 = complex33.getReal();
        boolean boolean35 = org.apache.commons.math3.complex.Complex.equals(complex30, complex33);
        org.apache.commons.math3.complex.Complex complex37 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean39 = org.apache.commons.math3.complex.Complex.equals(complex30, complex37, 10);
        org.apache.commons.math3.complex.Complex complex41 = complex37.pow((double) (byte) 1);
        boolean boolean42 = org.apache.commons.math3.complex.Complex.equals(complex18, complex41);
        org.apache.commons.math3.complex.Complex complex43 = complex18.reciprocal();
        org.apache.commons.math3.complex.Complex complex44 = complex18.cosh();
        org.apache.commons.math3.complex.Complex complex45 = complex18.acos();
        org.apache.commons.math3.complex.Complex complex46 = complex18.sinh();
        double double47 = complex18.getReal();
        org.apache.commons.math3.complex.Complex complex48 = complex18.reciprocal();
        org.apache.commons.math3.complex.Complex complex50 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex52 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double53 = complex52.getReal();
        org.apache.commons.math3.complex.Complex complex55 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double56 = complex55.getReal();
        boolean boolean57 = org.apache.commons.math3.complex.Complex.equals(complex52, complex55);
        boolean boolean59 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex50, complex52, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex60 = complex50.log();
        org.apache.commons.math3.complex.Complex complex62 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double63 = complex62.getReal();
        org.apache.commons.math3.complex.Complex complex65 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double66 = complex65.getReal();
        boolean boolean67 = org.apache.commons.math3.complex.Complex.equals(complex62, complex65);
        org.apache.commons.math3.complex.Complex complex69 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean71 = org.apache.commons.math3.complex.Complex.equals(complex62, complex69, 10);
        org.apache.commons.math3.complex.Complex complex73 = complex69.pow((double) (byte) 1);
        boolean boolean74 = org.apache.commons.math3.complex.Complex.equals(complex50, complex73);
        org.apache.commons.math3.complex.Complex complex75 = complex50.reciprocal();
        org.apache.commons.math3.complex.Complex complex76 = complex50.cosh();
        org.apache.commons.math3.complex.Complex complex78 = complex50.multiply(Double.NaN);
        org.apache.commons.math3.complex.Complex complex80 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex82 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double83 = complex82.getReal();
        org.apache.commons.math3.complex.Complex complex85 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double86 = complex85.getReal();
        boolean boolean87 = org.apache.commons.math3.complex.Complex.equals(complex82, complex85);
        boolean boolean89 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex80, complex82, (double) 0.0f);
        double double90 = complex82.getReal();
        org.apache.commons.math3.complex.Complex complex91 = complex82.exp();
        java.lang.Class<?> wildcardClass92 = complex82.getClass();
        org.apache.commons.math3.complex.Complex complex93 = complex50.subtract(complex82);
        org.apache.commons.math3.complex.Complex complex94 = complex18.divide(complex82);
        boolean boolean96 = org.apache.commons.math3.complex.Complex.equals(complex16, complex18, (int) (short) 10);
        org.apache.commons.math3.complex.Complex complex98 = complex16.multiply((-10.0d));
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1.0d) + "'", double21 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1.0d) + "'", double24 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-1.0d) + "'", double31 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-1.0d) + "'", double47 == (-1.0d));
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-1.0d) + "'", double53 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + (-1.0d) + "'", double56 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + (-1.0d) + "'", double63 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + (-1.0d) + "'", double66 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + (-1.0d) + "'", double83 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + (-1.0d) + "'", double86 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(wildcardClass92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(complex98);
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test028");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex(7.896296018268069E13d, 3.141592653589793d);
        double double3 = complex2.getReal();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 7.896296018268069E13d + "'", double3 == 7.896296018268069E13d);
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test029");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equals(complex1, complex8, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex11 = complex1.exp();
        org.apache.commons.math3.complex.Complex complex12 = complex1.tanh();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test030");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex9 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double15 = complex14.getReal();
        boolean boolean16 = org.apache.commons.math3.complex.Complex.equals(complex11, complex14);
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex9, complex11, (double) 0.0f);
        java.lang.String str19 = complex9.toString();
        org.apache.commons.math3.complex.Complex complex21 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double22 = complex21.getReal();
        org.apache.commons.math3.complex.Complex complex24 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double25 = complex24.getReal();
        boolean boolean26 = org.apache.commons.math3.complex.Complex.equals(complex21, complex24);
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean30 = org.apache.commons.math3.complex.Complex.equals(complex21, complex28, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex31 = complex9.add(complex28);
        org.apache.commons.math3.complex.Complex complex32 = complex7.multiply(complex31);
        org.apache.commons.math3.complex.Complex complex34 = complex32.divide((double) 1L);
        org.apache.commons.math3.complex.Complex complex36 = new org.apache.commons.math3.complex.Complex((double) '4');
        org.apache.commons.math3.complex.Complex complex37 = complex36.conjugate();
        org.apache.commons.math3.complex.Complex complex39 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math3.complex.Complex complex41 = complex39.tanh();
        org.apache.commons.math3.complex.Complex complex42 = complex41.sin();
        org.apache.commons.math3.complex.Complex complex44 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex45 = complex44.sqrt();
        boolean boolean47 = org.apache.commons.math3.complex.Complex.equals(complex41, complex44, (int) (byte) -1);
        org.apache.commons.math3.complex.Complex complex48 = complex41.conjugate();
        org.apache.commons.math3.complex.Complex complex49 = complex48.asin();
        org.apache.commons.math3.complex.Complex complex51 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex52 = complex51.conjugate();
        org.apache.commons.math3.complex.Complex complex53 = complex52.sin();
        org.apache.commons.math3.complex.Complex complex54 = complex49.add(complex52);
        org.apache.commons.math3.complex.Complex complex55 = complex54.sqrt();
        org.apache.commons.math3.complex.Complex complex56 = complex37.multiply(complex55);
        org.apache.commons.math3.complex.Complex complex57 = complex55.log();
        boolean boolean59 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex32, complex57, (double) 0L);
        org.apache.commons.math3.complex.ComplexField complexField60 = complex32.getField();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "(-1.0, 0.0)" + "'", str19.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(complexField60);
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test031");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = complex1.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex5 = complex1.log();
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) 10, (-2.0d));
        org.apache.commons.math3.complex.Complex complex9 = complex5.subtract(complex8);
        org.apache.commons.math3.complex.Complex complex10 = complex5.sqrt1z();
        org.apache.commons.math3.complex.Complex complex11 = complex5.sqrt();
        org.apache.commons.math3.complex.Complex complex12 = complex5.sinh();
        org.apache.commons.math3.complex.Complex complex14 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math3.complex.Complex complex16 = complex14.tanh();
        boolean boolean18 = complex16.equals((java.lang.Object) true);
        double double19 = complex16.getImaginary();
        org.apache.commons.math3.complex.Complex complex21 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double22 = complex21.getReal();
        org.apache.commons.math3.complex.Complex complex24 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double25 = complex24.getReal();
        boolean boolean26 = org.apache.commons.math3.complex.Complex.equals(complex21, complex24);
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean30 = org.apache.commons.math3.complex.Complex.equals(complex21, complex28, 10);
        org.apache.commons.math3.complex.Complex complex32 = complex28.pow((double) (byte) 1);
        boolean boolean34 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex16, complex28, (double) (-1));
        org.apache.commons.math3.complex.Complex complex35 = complex28.negate();
        java.lang.Class<?> wildcardClass36 = complex35.getClass();
        org.apache.commons.math3.complex.Complex complex37 = complex12.add(complex35);
        org.apache.commons.math3.complex.Complex complex38 = complex37.conjugate();
        org.apache.commons.math3.complex.Complex complex39 = complex37.reciprocal();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test032");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex(0.8778963166742729d, 0.7615941559557649d);
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test033");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex((double) ' ', 3.141592653589793d);
        org.apache.commons.math3.complex.Complex complex3 = complex2.asin();
        double double4 = complex2.getImaginary();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 3.141592653589793d + "'", double4 == 3.141592653589793d);
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test034");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        java.lang.String str11 = complex1.toString();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex23 = complex1.add(complex20);
        java.lang.String str24 = complex20.toString();
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex27 = complex20.divide(complex26);
        org.apache.commons.math3.complex.Complex complex28 = complex20.sin();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "(-1.0, 0.0)" + "'", str11.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "(-1.0, 0.0)" + "'", str24.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test035");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex9 = complex3.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex10 = complex3.reciprocal();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test036");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math3.complex.Complex complex5 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math3.complex.Complex complex7 = complex5.tanh();
        double double8 = complex7.abs();
        org.apache.commons.math3.complex.Complex complex9 = complex7.atan();
        boolean boolean11 = org.apache.commons.math3.complex.Complex.equals(complex3, complex9, (-2.0d));
        org.apache.commons.math3.complex.Complex complex13 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math3.complex.Complex complex15 = complex13.tanh();
        boolean boolean17 = complex15.equals((java.lang.Object) true);
        double double18 = complex15.getImaginary();
        org.apache.commons.math3.complex.Complex complex19 = complex15.sinh();
        org.apache.commons.math3.complex.Complex complex21 = complex15.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex23 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex25 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double26 = complex25.getReal();
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double29 = complex28.getReal();
        boolean boolean30 = org.apache.commons.math3.complex.Complex.equals(complex25, complex28);
        boolean boolean32 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex23, complex25, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex33 = complex23.log();
        org.apache.commons.math3.complex.Complex complex35 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double36 = complex35.getReal();
        org.apache.commons.math3.complex.Complex complex38 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double39 = complex38.getReal();
        boolean boolean40 = org.apache.commons.math3.complex.Complex.equals(complex35, complex38);
        org.apache.commons.math3.complex.Complex complex42 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean44 = org.apache.commons.math3.complex.Complex.equals(complex35, complex42, 10);
        org.apache.commons.math3.complex.Complex complex46 = complex42.pow((double) (byte) 1);
        boolean boolean47 = org.apache.commons.math3.complex.Complex.equals(complex23, complex46);
        org.apache.commons.math3.complex.Complex complex48 = complex23.reciprocal();
        boolean boolean50 = org.apache.commons.math3.complex.Complex.equals(complex21, complex23, (double) (byte) 1);
        org.apache.commons.math3.complex.Complex complex52 = complex23.multiply(0);
        org.apache.commons.math3.complex.Complex complex53 = complex23.reciprocal();
        org.apache.commons.math3.complex.Complex complex54 = complex53.exp();
        org.apache.commons.math3.complex.Complex complex55 = complex9.pow(complex53);
        org.apache.commons.math3.complex.Complex complex57 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex59 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double60 = complex59.getReal();
        org.apache.commons.math3.complex.Complex complex62 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double63 = complex62.getReal();
        boolean boolean64 = org.apache.commons.math3.complex.Complex.equals(complex59, complex62);
        boolean boolean66 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex57, complex59, (double) 0.0f);
        double double67 = complex59.getReal();
        org.apache.commons.math3.complex.Complex complex68 = complex59.exp();
        org.apache.commons.math3.complex.ComplexField complexField69 = complex68.getField();
        boolean boolean70 = complex68.isNaN();
        org.apache.commons.math3.complex.Complex complex71 = complex68.acos();
        java.lang.Class<?> wildcardClass72 = complex71.getClass();
        org.apache.commons.math3.complex.Complex complex73 = complex53.multiply(complex71);
        double double74 = complex71.abs();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-1.0d) + "'", double26 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1.0d) + "'", double29 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-1.0d) + "'", double36 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-1.0d) + "'", double39 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + (-1.0d) + "'", double60 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + (-1.0d) + "'", double63 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + (-1.0d) + "'", double67 == (-1.0d));
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complexField69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.1940688187363215d + "'", double74 == 1.1940688187363215d);
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test037");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        double double3 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = complex1.tan();
        boolean boolean5 = complex1.isInfinite();
        org.apache.commons.math3.complex.Complex complex6 = complex1.sinh();
        org.apache.commons.math3.complex.Complex complex7 = complex6.acos();
        org.apache.commons.math3.complex.Complex complex8 = complex7.negate();
        double double9 = complex8.getImaginary();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.5836293809324178d + "'", double9 == 0.5836293809324178d);
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test038");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf(1.557407724654902d, 10.0d);
        org.apache.commons.math3.complex.Complex complex4 = complex2.multiply((int) (byte) -1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex4);
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test039");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex11 = complex1.log();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, 10);
        org.apache.commons.math3.complex.Complex complex24 = complex20.pow((double) (byte) 1);
        boolean boolean25 = org.apache.commons.math3.complex.Complex.equals(complex1, complex24);
        org.apache.commons.math3.complex.Complex complex27 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double28 = complex27.getReal();
        double double29 = complex27.getReal();
        org.apache.commons.math3.complex.Complex complex30 = complex27.tan();
        org.apache.commons.math3.complex.Complex complex31 = complex27.exp();
        org.apache.commons.math3.complex.Complex complex33 = complex27.multiply((double) 10);
        boolean boolean34 = org.apache.commons.math3.complex.Complex.equals(complex1, complex33);
        org.apache.commons.math3.complex.Complex complex35 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex37 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double38 = complex37.getReal();
        org.apache.commons.math3.complex.Complex complex40 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex41 = complex40.sqrt();
        org.apache.commons.math3.complex.Complex complex42 = complex40.tanh();
        boolean boolean44 = complex42.equals((java.lang.Object) true);
        double double45 = complex42.getImaginary();
        org.apache.commons.math3.complex.Complex complex46 = complex42.sinh();
        org.apache.commons.math3.complex.Complex complex48 = complex42.multiply(0.0d);
        boolean boolean49 = org.apache.commons.math3.complex.Complex.equals(complex37, complex42);
        org.apache.commons.math3.complex.Complex complex51 = complex37.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex52 = complex35.subtract(complex51);
        org.apache.commons.math3.complex.Complex complex54 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double55 = complex54.getReal();
        double double56 = complex54.getReal();
        org.apache.commons.math3.complex.Complex complex57 = complex54.tan();
        org.apache.commons.math3.complex.Complex complex58 = complex51.pow(complex57);
        org.apache.commons.math3.complex.Complex complex59 = complex58.sinh();
        org.apache.commons.math3.complex.Complex complex60 = complex1.multiply(complex58);
        boolean boolean61 = complex1.isInfinite();
        org.apache.commons.math3.complex.Complex complex63 = complex1.pow(3.296908309475615d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-1.0d) + "'", double28 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1.0d) + "'", double29 == (-1.0d));
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-1.0d) + "'", double38 == (-1.0d));
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-1.0d) + "'", double55 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + (-1.0d) + "'", double56 == (-1.0d));
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(complex63);
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test040");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf(0.8703274249911193d, 0.8414709848078965d);
        double double3 = complex2.getImaginary();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.8414709848078965d + "'", double3 == 0.8414709848078965d);
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test041");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex((double) (short) 0, 3.141592653589793d);
        org.apache.commons.math3.complex.Complex complex3 = complex2.cos();
        org.apache.commons.math3.complex.Complex complex5 = complex3.multiply(142.13022197970423d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex5);
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test042");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex9 = complex3.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        boolean boolean20 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex11, complex13, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex22 = complex13.multiply(1);
        org.apache.commons.math3.complex.Complex complex23 = complex13.conjugate();
        boolean boolean25 = org.apache.commons.math3.complex.Complex.equals(complex9, complex13, (int) (short) 100);
        org.apache.commons.math3.complex.Complex complex27 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex28 = complex27.sqrt();
        org.apache.commons.math3.complex.Complex complex29 = complex27.tanh();
        double double30 = complex29.abs();
        org.apache.commons.math3.complex.Complex complex31 = complex29.exp();
        org.apache.commons.math3.complex.Complex complex32 = complex31.negate();
        org.apache.commons.math3.complex.Complex complex33 = complex31.sin();
        org.apache.commons.math3.complex.Complex complex34 = complex9.subtract(complex33);
        org.apache.commons.math3.complex.Complex complex36 = new org.apache.commons.math3.complex.Complex((double) ' ');
        org.apache.commons.math3.complex.Complex complex38 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double39 = complex38.getReal();
        org.apache.commons.math3.complex.Complex complex41 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math3.complex.Complex complex43 = complex41.tanh();
        boolean boolean45 = complex43.equals((java.lang.Object) true);
        double double46 = complex43.getImaginary();
        org.apache.commons.math3.complex.Complex complex47 = complex43.sinh();
        org.apache.commons.math3.complex.Complex complex49 = complex43.multiply(0.0d);
        boolean boolean50 = org.apache.commons.math3.complex.Complex.equals(complex38, complex43);
        org.apache.commons.math3.complex.Complex complex51 = complex36.divide(complex43);
        org.apache.commons.math3.complex.Complex complex52 = complex51.sinh();
        org.apache.commons.math3.complex.Complex complex53 = complex9.pow(complex51);
        org.apache.commons.math3.complex.Complex complex54 = complex51.reciprocal();
        java.lang.Class<?> wildcardClass55 = complex54.getClass();
        org.apache.commons.math3.complex.Complex complex57 = complex54.multiply((int) (short) 0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-1.0d) + "'", double39 == (-1.0d));
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(complex57);
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test043");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.43107595064559234d);
        org.junit.Assert.assertNotNull(complex1);
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test044");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.cos();
        double double3 = complex2.getImaginary();
        org.apache.commons.math3.complex.Complex complex4 = complex2.sin();
        org.apache.commons.math3.complex.Complex complex6 = complex4.pow((double) 0.0f);
        org.apache.commons.math3.complex.Complex complex7 = complex4.negate();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-0.0d) + "'", double3 == (-0.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test045");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.cos();
        org.apache.commons.math3.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math3.complex.Complex complex4 = complex2.reciprocal();
        org.apache.commons.math3.complex.Complex complex6 = complex4.add((double) (-1));
        org.apache.commons.math3.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math3.complex.Complex complex8 = complex7.tan();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test046");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math3.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math3.complex.Complex complex6 = complex4.subtract((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex7 = complex4.log();
        org.apache.commons.math3.complex.Complex complex8 = complex7.sqrt1z();
        double double9 = complex7.getArgument();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 3.141592653589793d + "'", double9 == 3.141592653589793d);
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test047");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equals(complex1, complex8, 10);
        org.apache.commons.math3.complex.Complex complex11 = complex8.sqrt1z();
        org.apache.commons.math3.complex.Complex complex12 = org.apache.commons.math3.complex.Complex.NaN;
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double15 = complex14.getReal();
        org.apache.commons.math3.complex.Complex complex17 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math3.complex.Complex complex19 = complex17.tanh();
        boolean boolean21 = complex19.equals((java.lang.Object) true);
        double double22 = complex19.getImaginary();
        org.apache.commons.math3.complex.Complex complex23 = complex19.sinh();
        org.apache.commons.math3.complex.Complex complex25 = complex19.multiply(0.0d);
        boolean boolean26 = org.apache.commons.math3.complex.Complex.equals(complex14, complex19);
        org.apache.commons.math3.complex.Complex complex28 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math3.complex.Complex complex30 = complex28.sqrt1z();
        org.apache.commons.math3.complex.Complex complex31 = complex19.subtract(complex28);
        org.apache.commons.math3.complex.Complex complex32 = complex31.acos();
        boolean boolean33 = org.apache.commons.math3.complex.Complex.equals(complex12, complex31);
        org.apache.commons.math3.complex.Complex complex34 = complex11.divide(complex31);
        org.apache.commons.math3.complex.Complex complex35 = complex31.reciprocal();
        org.apache.commons.math3.complex.Complex complex37 = complex35.subtract(1.3754263876807227d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex37);
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test048");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex11 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex17 = complex16.sqrt();
        org.apache.commons.math3.complex.Complex complex18 = complex16.tanh();
        boolean boolean20 = complex18.equals((java.lang.Object) true);
        double double21 = complex18.getImaginary();
        org.apache.commons.math3.complex.Complex complex22 = complex18.sinh();
        org.apache.commons.math3.complex.Complex complex24 = complex18.multiply(0.0d);
        boolean boolean25 = org.apache.commons.math3.complex.Complex.equals(complex13, complex18);
        org.apache.commons.math3.complex.Complex complex27 = complex13.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex28 = complex11.subtract(complex27);
        org.apache.commons.math3.complex.Complex complex30 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double31 = complex30.getReal();
        org.apache.commons.math3.complex.Complex complex33 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double34 = complex33.getReal();
        boolean boolean35 = org.apache.commons.math3.complex.Complex.equals(complex30, complex33);
        org.apache.commons.math3.complex.Complex complex37 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex38 = complex37.sqrt();
        org.apache.commons.math3.complex.Complex complex39 = complex37.tanh();
        boolean boolean41 = complex39.equals((java.lang.Object) true);
        double double42 = complex39.getImaginary();
        org.apache.commons.math3.complex.Complex complex43 = complex39.sinh();
        org.apache.commons.math3.complex.Complex complex44 = complex39.cosh();
        double double45 = complex39.getImaginary();
        boolean boolean46 = complex33.equals((java.lang.Object) complex39);
        org.apache.commons.math3.complex.Complex complex47 = complex28.add(complex33);
        org.apache.commons.math3.complex.Complex complex48 = complex3.divide(complex28);
        org.apache.commons.math3.complex.Complex complex49 = complex48.reciprocal();
        double double50 = complex48.getImaginary();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-1.0d) + "'", double31 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-5.090647314608025E14d) + "'", double50 == (-5.090647314608025E14d));
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test049");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf(100.0d, (double) (short) 0);
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        org.apache.commons.math3.complex.Complex complex7 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double8 = complex7.getReal();
        boolean boolean9 = org.apache.commons.math3.complex.Complex.equals(complex4, complex7);
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double15 = complex14.getReal();
        boolean boolean16 = org.apache.commons.math3.complex.Complex.equals(complex11, complex14);
        org.apache.commons.math3.complex.Complex complex17 = complex14.sqrt();
        org.apache.commons.math3.complex.Complex complex19 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double20 = complex19.getReal();
        org.apache.commons.math3.complex.Complex complex22 = complex19.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex23 = complex17.pow(complex22);
        org.apache.commons.math3.complex.Complex complex24 = complex7.multiply(complex23);
        org.apache.commons.math3.complex.Complex complex25 = complex23.sqrt1z();
        org.apache.commons.math3.complex.Complex complex26 = complex2.divide(complex23);
        org.apache.commons.math3.complex.Complex complex27 = complex26.log();
        org.apache.commons.math3.complex.Complex complex29 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math3.complex.Complex complex31 = complex29.tanh();
        boolean boolean33 = complex31.equals((java.lang.Object) true);
        double double34 = complex31.getImaginary();
        org.apache.commons.math3.complex.Complex complex35 = complex31.sinh();
        org.apache.commons.math3.complex.Complex complex36 = complex31.cosh();
        org.apache.commons.math3.complex.ComplexField complexField37 = complex36.getField();
        boolean boolean38 = complex36.isNaN();
        java.lang.String str39 = complex36.toString();
        org.apache.commons.math3.complex.Complex complex40 = complex27.divide(complex36);
        org.apache.commons.math3.complex.Complex complex41 = complex27.tanh();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1.0d) + "'", double20 == (-1.0d));
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complexField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "(1.0, 0.0)" + "'", str39.equals("(1.0, 0.0)"));
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test050");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf((double) ' ', (double) ' ');
        boolean boolean3 = complex2.isInfinite();
        org.apache.commons.math3.complex.Complex complex4 = complex2.atan();
        double double5 = complex2.getArgument();
        org.apache.commons.math3.complex.Complex complex7 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double8 = complex7.getReal();
        java.util.List<org.apache.commons.math3.complex.Complex> complexList10 = complex7.nthRoot(10);
        org.apache.commons.math3.complex.Complex complex11 = complex2.multiply(complex7);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.7853981633974483d + "'", double5 == 0.7853981633974483d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
        org.junit.Assert.assertNotNull(complexList10);
        org.junit.Assert.assertNotNull(complex11);
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test051");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math3.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math3.complex.Complex complex6 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex7 = complex6.sqrt();
        boolean boolean9 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6, (int) (byte) -1);
        org.apache.commons.math3.complex.Complex complex10 = complex3.conjugate();
        org.apache.commons.math3.complex.Complex complex11 = complex10.asin();
        org.apache.commons.math3.complex.Complex complex13 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex14 = complex13.conjugate();
        org.apache.commons.math3.complex.Complex complex15 = complex14.sin();
        org.apache.commons.math3.complex.Complex complex16 = complex11.add(complex14);
        double double17 = complex16.getReal();
        org.apache.commons.math3.complex.Complex complex18 = complex16.tanh();
        org.apache.commons.math3.complex.Complex complex20 = complex18.subtract(0.5836293809324178d);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex20);
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test052");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf(100.0d, (double) (short) 0);
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        org.apache.commons.math3.complex.Complex complex7 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double8 = complex7.getReal();
        boolean boolean9 = org.apache.commons.math3.complex.Complex.equals(complex4, complex7);
        org.apache.commons.math3.complex.Complex complex10 = complex7.sqrt();
        org.apache.commons.math3.complex.Complex complex12 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math3.complex.Complex complex14 = complex12.tanh();
        boolean boolean16 = complex14.equals((java.lang.Object) true);
        double double17 = complex14.getImaginary();
        org.apache.commons.math3.complex.Complex complex18 = complex14.sinh();
        org.apache.commons.math3.complex.Complex complex19 = complex14.cosh();
        double double20 = complex14.getImaginary();
        org.apache.commons.math3.complex.Complex complex21 = complex7.add(complex14);
        org.apache.commons.math3.complex.Complex complex22 = complex2.add(complex14);
        org.apache.commons.math3.complex.Complex complex24 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex25 = complex24.sqrt();
        org.apache.commons.math3.complex.Complex complex26 = complex24.tanh();
        boolean boolean28 = complex26.equals((java.lang.Object) true);
        double double29 = complex26.getImaginary();
        org.apache.commons.math3.complex.Complex complex30 = complex26.sinh();
        org.apache.commons.math3.complex.Complex complex31 = complex22.multiply(complex30);
        org.apache.commons.math3.complex.Complex complex33 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double34 = complex33.getReal();
        org.apache.commons.math3.complex.Complex complex36 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double37 = complex36.getReal();
        boolean boolean38 = org.apache.commons.math3.complex.Complex.equals(complex33, complex36);
        org.apache.commons.math3.complex.Complex complex40 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean42 = org.apache.commons.math3.complex.Complex.equals(complex33, complex40, 10);
        org.apache.commons.math3.complex.Complex complex44 = complex40.pow((double) (byte) 1);
        org.apache.commons.math3.complex.Complex complex45 = complex30.divide(complex40);
        org.apache.commons.math3.complex.Complex complex46 = complex40.tanh();
        org.apache.commons.math3.complex.Complex complex48 = complex46.pow(3.296908309475615d);
        org.apache.commons.math3.complex.Complex complex50 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double51 = complex50.getReal();
        org.apache.commons.math3.complex.Complex complex53 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double54 = complex53.getReal();
        boolean boolean55 = org.apache.commons.math3.complex.Complex.equals(complex50, complex53);
        org.apache.commons.math3.complex.Complex complex56 = complex53.sqrt();
        org.apache.commons.math3.complex.Complex complex58 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex59 = complex58.sqrt();
        org.apache.commons.math3.complex.Complex complex60 = complex58.tanh();
        boolean boolean62 = complex60.equals((java.lang.Object) true);
        double double63 = complex60.getImaginary();
        org.apache.commons.math3.complex.Complex complex65 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double66 = complex65.getReal();
        org.apache.commons.math3.complex.Complex complex68 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double69 = complex68.getReal();
        boolean boolean70 = org.apache.commons.math3.complex.Complex.equals(complex65, complex68);
        org.apache.commons.math3.complex.Complex complex72 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean74 = org.apache.commons.math3.complex.Complex.equals(complex65, complex72, 10);
        org.apache.commons.math3.complex.Complex complex76 = complex72.pow((double) (byte) 1);
        boolean boolean78 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex60, complex72, (double) (-1));
        org.apache.commons.math3.complex.Complex complex79 = complex72.sin();
        org.apache.commons.math3.complex.Complex complex81 = complex79.subtract((double) (byte) 1);
        org.apache.commons.math3.complex.Complex complex82 = complex56.subtract(complex79);
        boolean boolean84 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex48, complex82, 10.0d);
        org.apache.commons.math3.complex.Complex complex85 = complex48.conjugate();
        org.apache.commons.math3.complex.Complex complex86 = complex48.reciprocal();
        boolean boolean87 = complex86.isInfinite();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + (-1.0d) + "'", double37 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-1.0d) + "'", double51 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1.0d) + "'", double54 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + (-1.0d) + "'", double66 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + (-1.0d) + "'", double69 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test053");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf((double) 1.0f);
        org.apache.commons.math3.complex.Complex complex2 = complex1.conjugate();
        org.apache.commons.math3.complex.Complex complex3 = complex2.acos();
        org.apache.commons.math3.complex.Complex complex4 = complex3.exp();
        org.apache.commons.math3.complex.Complex complex5 = complex4.acos();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test054");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equals(complex1, complex8, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex11 = complex8.sin();
        org.apache.commons.math3.complex.Complex complex12 = complex11.log();
        org.apache.commons.math3.complex.Complex complex13 = complex12.exp();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test055");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex8 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex10 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex11 = complex10.sqrt();
        org.apache.commons.math3.complex.Complex complex12 = complex10.tanh();
        double double13 = complex12.abs();
        org.apache.commons.math3.complex.Complex complex14 = complex12.exp();
        boolean boolean15 = org.apache.commons.math3.complex.Complex.equals(complex8, complex14);
        org.apache.commons.math3.complex.Complex complex16 = complex14.log();
        org.apache.commons.math3.complex.Complex complex18 = complex14.multiply((int) (byte) 1);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex18);
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test056");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex((double) 0L, (double) 1);
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test057");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex11 = complex1.log();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, 10);
        org.apache.commons.math3.complex.Complex complex24 = complex20.pow((double) (byte) 1);
        boolean boolean25 = org.apache.commons.math3.complex.Complex.equals(complex1, complex24);
        org.apache.commons.math3.complex.Complex complex26 = complex1.cosh();
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double29 = complex28.getReal();
        org.apache.commons.math3.complex.Complex complex31 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double32 = complex31.getReal();
        boolean boolean33 = org.apache.commons.math3.complex.Complex.equals(complex28, complex31);
        org.apache.commons.math3.complex.Complex complex34 = complex31.sqrt();
        org.apache.commons.math3.complex.Complex complex36 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math3.complex.Complex complex38 = complex36.tanh();
        boolean boolean40 = complex38.equals((java.lang.Object) true);
        double double41 = complex38.getImaginary();
        org.apache.commons.math3.complex.Complex complex43 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double44 = complex43.getReal();
        org.apache.commons.math3.complex.Complex complex46 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double47 = complex46.getReal();
        boolean boolean48 = org.apache.commons.math3.complex.Complex.equals(complex43, complex46);
        org.apache.commons.math3.complex.Complex complex50 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean52 = org.apache.commons.math3.complex.Complex.equals(complex43, complex50, 10);
        org.apache.commons.math3.complex.Complex complex54 = complex50.pow((double) (byte) 1);
        boolean boolean56 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex38, complex50, (double) (-1));
        org.apache.commons.math3.complex.Complex complex57 = complex50.sin();
        org.apache.commons.math3.complex.Complex complex59 = complex57.subtract((double) (byte) 1);
        org.apache.commons.math3.complex.Complex complex60 = complex34.subtract(complex57);
        org.apache.commons.math3.complex.Complex complex61 = complex1.add(complex57);
        org.apache.commons.math3.complex.Complex complex62 = complex57.acos();
        org.apache.commons.math3.complex.Complex complex64 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex65 = complex64.sqrt();
        org.apache.commons.math3.complex.Complex complex66 = complex64.tanh();
        org.apache.commons.math3.complex.Complex complex67 = complex66.sin();
        org.apache.commons.math3.complex.Complex complex68 = complex57.divide(complex67);
        org.apache.commons.math3.complex.Complex complex69 = complex57.reciprocal();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1.0d) + "'", double29 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-1.0d) + "'", double32 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1.0d) + "'", double44 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-1.0d) + "'", double47 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test058");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex12 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double15 = complex14.getReal();
        org.apache.commons.math3.complex.Complex complex17 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double18 = complex17.getReal();
        boolean boolean19 = org.apache.commons.math3.complex.Complex.equals(complex14, complex17);
        boolean boolean21 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex12, complex14, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex22 = complex12.log();
        org.apache.commons.math3.complex.Complex complex24 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double25 = complex24.getReal();
        org.apache.commons.math3.complex.Complex complex27 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double28 = complex27.getReal();
        boolean boolean29 = org.apache.commons.math3.complex.Complex.equals(complex24, complex27);
        org.apache.commons.math3.complex.Complex complex31 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean33 = org.apache.commons.math3.complex.Complex.equals(complex24, complex31, 10);
        org.apache.commons.math3.complex.Complex complex35 = complex31.pow((double) (byte) 1);
        boolean boolean36 = org.apache.commons.math3.complex.Complex.equals(complex12, complex35);
        boolean boolean37 = complex3.equals((java.lang.Object) complex12);
        org.apache.commons.math3.complex.Complex complex38 = complex3.reciprocal();
        org.apache.commons.math3.complex.Complex complex39 = complex38.log();
        org.apache.commons.math3.complex.Complex complex40 = complex39.exp();
        org.apache.commons.math3.complex.Complex complex42 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math3.complex.Complex complex44 = complex42.tanh();
        boolean boolean46 = complex44.equals((java.lang.Object) true);
        double double47 = complex44.getImaginary();
        org.apache.commons.math3.complex.Complex complex48 = complex44.sinh();
        org.apache.commons.math3.complex.Complex complex50 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex52 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double53 = complex52.getReal();
        org.apache.commons.math3.complex.Complex complex55 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double56 = complex55.getReal();
        boolean boolean57 = org.apache.commons.math3.complex.Complex.equals(complex52, complex55);
        boolean boolean59 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex50, complex52, (double) 0.0f);
        java.lang.String str60 = complex50.toString();
        org.apache.commons.math3.complex.Complex complex62 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double63 = complex62.getReal();
        org.apache.commons.math3.complex.Complex complex65 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double66 = complex65.getReal();
        boolean boolean67 = org.apache.commons.math3.complex.Complex.equals(complex62, complex65);
        org.apache.commons.math3.complex.Complex complex69 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean71 = org.apache.commons.math3.complex.Complex.equals(complex62, complex69, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex72 = complex50.add(complex69);
        org.apache.commons.math3.complex.Complex complex73 = complex48.multiply(complex72);
        java.lang.Class<?> wildcardClass74 = complex72.getClass();
        org.apache.commons.math3.complex.Complex complex76 = complex72.divide((double) '#');
        boolean boolean78 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex40, complex76, (-1.0d));
        org.apache.commons.math3.complex.Complex complex80 = complex76.add(0.7853981633974483d);
        org.apache.commons.math3.complex.Complex complex81 = complex80.sqrt();
        boolean boolean82 = complex80.isNaN();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.0d) + "'", double18 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-1.0d) + "'", double28 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-1.0d) + "'", double53 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + (-1.0d) + "'", double56 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + str60 + "' != '" + "(-1.0, 0.0)" + "'", str60.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + (-1.0d) + "'", double63 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + (-1.0d) + "'", double66 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test059");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf((double) ' ', (double) ' ');
        boolean boolean3 = complex2.isInfinite();
        org.apache.commons.math3.complex.Complex complex4 = complex2.atan();
        double double5 = complex2.getArgument();
        org.apache.commons.math3.complex.Complex complex6 = complex2.negate();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.7853981633974483d + "'", double5 == 0.7853981633974483d);
        org.junit.Assert.assertNotNull(complex6);
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test060");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        java.lang.String str11 = complex1.toString();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex23 = complex1.add(complex20);
        java.lang.String str24 = complex20.toString();
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex27 = complex20.divide(complex26);
        org.apache.commons.math3.complex.Complex complex28 = complex20.tanh();
        org.apache.commons.math3.complex.Complex complex30 = complex28.multiply((double) '#');
        org.apache.commons.math3.complex.Complex complex31 = complex28.sinh();
        org.apache.commons.math3.complex.Complex complex33 = complex31.multiply(0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "(-1.0, 0.0)" + "'", str11.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "(-1.0, 0.0)" + "'", str24.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex33);
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test061");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex7 = complex4.sqrt();
        org.apache.commons.math3.complex.Complex complex9 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double10 = complex9.getReal();
        org.apache.commons.math3.complex.Complex complex12 = complex9.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex13 = complex7.pow(complex12);
        org.apache.commons.math3.complex.Complex complex14 = complex7.reciprocal();
        org.apache.commons.math3.complex.Complex complex15 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex16 = complex15.asin();
        org.apache.commons.math3.complex.Complex complex17 = complex15.tanh();
        org.apache.commons.math3.complex.Complex complex18 = complex17.sin();
        org.apache.commons.math3.complex.Complex complex19 = complex7.multiply(complex18);
        double double20 = complex18.abs();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.6900760708753189d + "'", double20 == 0.6900760708753189d);
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test062");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math3.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math3.complex.Complex complex6 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex7 = complex6.sqrt();
        boolean boolean9 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6, (int) (byte) -1);
        org.apache.commons.math3.complex.Complex complex10 = complex3.cosh();
        org.apache.commons.math3.complex.Complex complex12 = complex10.multiply(10);
        org.apache.commons.math3.complex.Complex complex13 = complex10.sin();
        org.apache.commons.math3.complex.Complex complex15 = complex10.subtract(100.0d);
        org.apache.commons.math3.complex.Complex complex16 = complex10.acos();
        org.apache.commons.math3.complex.Complex complex17 = complex10.reciprocal();
        org.apache.commons.math3.complex.Complex complex18 = complex17.sinh();
        org.apache.commons.math3.complex.Complex complex19 = null;
        try {
            org.apache.commons.math3.complex.Complex complex20 = complex17.divide(complex19);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
        }
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test063");
        org.apache.commons.math3.complex.Complex complex0 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double3 = complex2.getReal();
        org.apache.commons.math3.complex.Complex complex5 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math3.complex.Complex complex7 = complex5.tanh();
        boolean boolean9 = complex7.equals((java.lang.Object) true);
        double double10 = complex7.getImaginary();
        org.apache.commons.math3.complex.Complex complex11 = complex7.sinh();
        org.apache.commons.math3.complex.Complex complex13 = complex7.multiply(0.0d);
        boolean boolean14 = org.apache.commons.math3.complex.Complex.equals(complex2, complex7);
        org.apache.commons.math3.complex.Complex complex16 = complex2.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex17 = complex0.subtract(complex16);
        org.apache.commons.math3.complex.Complex complex18 = complex16.conjugate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test064");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sqrt();
        org.apache.commons.math3.complex.Complex complex8 = complex7.tan();
        org.apache.commons.math3.complex.Complex complex11 = org.apache.commons.math3.complex.Complex.valueOf((double) 10.0f, (double) (-1));
        org.apache.commons.math3.complex.Complex complex12 = complex11.reciprocal();
        org.apache.commons.math3.complex.Complex complex13 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex15 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double16 = complex15.getReal();
        org.apache.commons.math3.complex.Complex complex18 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math3.complex.Complex complex20 = complex18.tanh();
        boolean boolean22 = complex20.equals((java.lang.Object) true);
        double double23 = complex20.getImaginary();
        org.apache.commons.math3.complex.Complex complex24 = complex20.sinh();
        org.apache.commons.math3.complex.Complex complex26 = complex20.multiply(0.0d);
        boolean boolean27 = org.apache.commons.math3.complex.Complex.equals(complex15, complex20);
        org.apache.commons.math3.complex.Complex complex29 = complex15.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex30 = complex13.subtract(complex29);
        org.apache.commons.math3.complex.Complex complex32 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double33 = complex32.getReal();
        double double34 = complex32.getReal();
        org.apache.commons.math3.complex.Complex complex35 = complex32.tan();
        org.apache.commons.math3.complex.Complex complex36 = complex29.pow(complex35);
        org.apache.commons.math3.complex.ComplexField complexField37 = complex29.getField();
        double double38 = complex29.abs();
        boolean boolean39 = complex11.equals((java.lang.Object) complex29);
        org.apache.commons.math3.complex.Complex complex40 = complex29.sqrt();
        org.apache.commons.math3.complex.Complex complex42 = complex29.add(0.8778963166742729d);
        boolean boolean43 = complex42.isInfinite();
        boolean boolean44 = org.apache.commons.math3.complex.Complex.equals(complex8, complex42);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1.0d) + "'", double16 == (-1.0d));
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-1.0d) + "'", double33 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complexField37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test065");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf(1.9643867237284715E-15d, (double) (-1));
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test066");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex9 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double15 = complex14.getReal();
        boolean boolean16 = org.apache.commons.math3.complex.Complex.equals(complex11, complex14);
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex9, complex11, (double) 0.0f);
        java.lang.String str19 = complex9.toString();
        org.apache.commons.math3.complex.Complex complex21 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double22 = complex21.getReal();
        org.apache.commons.math3.complex.Complex complex24 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double25 = complex24.getReal();
        boolean boolean26 = org.apache.commons.math3.complex.Complex.equals(complex21, complex24);
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean30 = org.apache.commons.math3.complex.Complex.equals(complex21, complex28, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex31 = complex9.add(complex28);
        org.apache.commons.math3.complex.Complex complex32 = complex7.multiply(complex31);
        org.apache.commons.math3.complex.Complex complex34 = complex32.divide((double) 1L);
        org.apache.commons.math3.complex.Complex complex36 = new org.apache.commons.math3.complex.Complex((double) '4');
        org.apache.commons.math3.complex.Complex complex37 = complex36.conjugate();
        org.apache.commons.math3.complex.Complex complex39 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math3.complex.Complex complex41 = complex39.tanh();
        org.apache.commons.math3.complex.Complex complex42 = complex41.sin();
        org.apache.commons.math3.complex.Complex complex44 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex45 = complex44.sqrt();
        boolean boolean47 = org.apache.commons.math3.complex.Complex.equals(complex41, complex44, (int) (byte) -1);
        org.apache.commons.math3.complex.Complex complex48 = complex41.conjugate();
        org.apache.commons.math3.complex.Complex complex49 = complex48.asin();
        org.apache.commons.math3.complex.Complex complex51 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex52 = complex51.conjugate();
        org.apache.commons.math3.complex.Complex complex53 = complex52.sin();
        org.apache.commons.math3.complex.Complex complex54 = complex49.add(complex52);
        org.apache.commons.math3.complex.Complex complex55 = complex54.sqrt();
        org.apache.commons.math3.complex.Complex complex56 = complex37.multiply(complex55);
        org.apache.commons.math3.complex.Complex complex57 = complex55.log();
        boolean boolean59 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex32, complex57, (double) 0L);
        boolean boolean60 = complex32.isNaN();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "(-1.0, 0.0)" + "'", str19.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test067");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex(100.0d, (double) (short) 100);
        org.apache.commons.math3.complex.Complex complex4 = complex2.multiply((double) 100);
        org.apache.commons.math3.complex.Complex complex7 = org.apache.commons.math3.complex.Complex.valueOf(100.0d, (double) (short) 0);
        org.apache.commons.math3.complex.Complex complex9 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double10 = complex9.getReal();
        org.apache.commons.math3.complex.Complex complex12 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double13 = complex12.getReal();
        boolean boolean14 = org.apache.commons.math3.complex.Complex.equals(complex9, complex12);
        org.apache.commons.math3.complex.Complex complex15 = complex12.sqrt();
        org.apache.commons.math3.complex.Complex complex17 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math3.complex.Complex complex19 = complex17.tanh();
        boolean boolean21 = complex19.equals((java.lang.Object) true);
        double double22 = complex19.getImaginary();
        org.apache.commons.math3.complex.Complex complex23 = complex19.sinh();
        org.apache.commons.math3.complex.Complex complex24 = complex19.cosh();
        double double25 = complex19.getImaginary();
        org.apache.commons.math3.complex.Complex complex26 = complex12.add(complex19);
        org.apache.commons.math3.complex.Complex complex27 = complex7.add(complex19);
        org.apache.commons.math3.complex.Complex complex29 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math3.complex.Complex complex31 = complex29.tanh();
        boolean boolean33 = complex31.equals((java.lang.Object) true);
        double double34 = complex31.getImaginary();
        org.apache.commons.math3.complex.Complex complex35 = complex31.sinh();
        org.apache.commons.math3.complex.Complex complex36 = complex27.multiply(complex35);
        boolean boolean38 = org.apache.commons.math3.complex.Complex.equals(complex4, complex27, (int) '4');
        org.apache.commons.math3.complex.Complex complex39 = complex27.tan();
        org.apache.commons.math3.complex.Complex complex40 = complex27.conjugate();
        org.apache.commons.math3.complex.Complex complex42 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math3.complex.Complex complex44 = complex42.tanh();
        boolean boolean46 = complex44.equals((java.lang.Object) true);
        double double47 = complex44.getImaginary();
        org.apache.commons.math3.complex.Complex complex48 = complex44.sinh();
        org.apache.commons.math3.complex.Complex complex49 = complex44.sinh();
        org.apache.commons.math3.complex.Complex complex51 = complex44.multiply((-2.0d));
        org.apache.commons.math3.complex.Complex complex52 = complex44.atan();
        org.apache.commons.math3.complex.Complex complex55 = org.apache.commons.math3.complex.Complex.valueOf((double) 100.0f, 0.7853981633974483d);
        boolean boolean57 = org.apache.commons.math3.complex.Complex.equals(complex52, complex55, (int) '4');
        org.apache.commons.math3.complex.Complex complex59 = complex52.pow(1.772453850905516d);
        org.apache.commons.math3.complex.Complex complex62 = new org.apache.commons.math3.complex.Complex((double) (short) 100, (double) (short) -1);
        org.apache.commons.math3.complex.Complex complex63 = complex62.sqrt();
        org.apache.commons.math3.complex.Complex complex65 = complex63.multiply((int) (short) -1);
        java.lang.Class<?> wildcardClass66 = complex65.getClass();
        boolean boolean67 = complex52.equals((java.lang.Object) wildcardClass66);
        org.apache.commons.math3.complex.Complex complex68 = complex27.pow(complex52);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1.0d) + "'", double13 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(complex68);
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test068");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex11 = complex1.log();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, 10);
        org.apache.commons.math3.complex.Complex complex24 = complex20.pow((double) (byte) 1);
        boolean boolean25 = org.apache.commons.math3.complex.Complex.equals(complex1, complex24);
        org.apache.commons.math3.complex.Complex complex26 = complex1.reciprocal();
        org.apache.commons.math3.complex.Complex complex27 = complex1.cosh();
        org.apache.commons.math3.complex.Complex complex28 = complex1.acos();
        org.apache.commons.math3.complex.Complex complex29 = complex1.sinh();
        double double30 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex31 = complex1.reciprocal();
        org.apache.commons.math3.complex.Complex complex33 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex35 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double36 = complex35.getReal();
        org.apache.commons.math3.complex.Complex complex38 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double39 = complex38.getReal();
        boolean boolean40 = org.apache.commons.math3.complex.Complex.equals(complex35, complex38);
        boolean boolean42 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex33, complex35, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex43 = complex33.log();
        org.apache.commons.math3.complex.Complex complex45 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double46 = complex45.getReal();
        org.apache.commons.math3.complex.Complex complex48 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double49 = complex48.getReal();
        boolean boolean50 = org.apache.commons.math3.complex.Complex.equals(complex45, complex48);
        org.apache.commons.math3.complex.Complex complex52 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean54 = org.apache.commons.math3.complex.Complex.equals(complex45, complex52, 10);
        org.apache.commons.math3.complex.Complex complex56 = complex52.pow((double) (byte) 1);
        boolean boolean57 = org.apache.commons.math3.complex.Complex.equals(complex33, complex56);
        org.apache.commons.math3.complex.Complex complex58 = complex33.reciprocal();
        org.apache.commons.math3.complex.Complex complex59 = complex33.cosh();
        org.apache.commons.math3.complex.Complex complex61 = complex33.multiply(Double.NaN);
        org.apache.commons.math3.complex.Complex complex63 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex65 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double66 = complex65.getReal();
        org.apache.commons.math3.complex.Complex complex68 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double69 = complex68.getReal();
        boolean boolean70 = org.apache.commons.math3.complex.Complex.equals(complex65, complex68);
        boolean boolean72 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex63, complex65, (double) 0.0f);
        double double73 = complex65.getReal();
        org.apache.commons.math3.complex.Complex complex74 = complex65.exp();
        java.lang.Class<?> wildcardClass75 = complex65.getClass();
        org.apache.commons.math3.complex.Complex complex76 = complex33.subtract(complex65);
        org.apache.commons.math3.complex.Complex complex77 = complex1.divide(complex65);
        org.apache.commons.math3.complex.Complex complex78 = complex77.cosh();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1.0d) + "'", double30 == (-1.0d));
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-1.0d) + "'", double36 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-1.0d) + "'", double39 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1.0d) + "'", double46 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-1.0d) + "'", double49 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + (-1.0d) + "'", double66 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + (-1.0d) + "'", double69 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + (-1.0d) + "'", double73 == (-1.0d));
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test069");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf(3.296908309475615d, (double) 100L);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test070");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        java.lang.String str11 = complex1.toString();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex23 = complex1.add(complex20);
        java.lang.String str24 = complex20.toString();
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex27 = complex20.divide(complex26);
        org.apache.commons.math3.complex.Complex complex29 = complex26.divide((double) ' ');
        double double30 = complex29.abs();
        double double31 = complex29.getReal();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "(-1.0, 0.0)" + "'", str11.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "(-1.0, 0.0)" + "'", str24.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.03125d + "'", double30 == 0.03125d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-0.03125d) + "'", double31 == (-0.03125d));
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test071");
        org.apache.commons.math3.complex.Complex complex0 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double3 = complex2.getReal();
        org.apache.commons.math3.complex.Complex complex5 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math3.complex.Complex complex7 = complex5.tanh();
        boolean boolean9 = complex7.equals((java.lang.Object) true);
        double double10 = complex7.getImaginary();
        org.apache.commons.math3.complex.Complex complex11 = complex7.sinh();
        org.apache.commons.math3.complex.Complex complex13 = complex7.multiply(0.0d);
        boolean boolean14 = org.apache.commons.math3.complex.Complex.equals(complex2, complex7);
        org.apache.commons.math3.complex.Complex complex16 = complex2.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex17 = complex0.subtract(complex16);
        org.apache.commons.math3.complex.Complex complex19 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math3.complex.Complex complex21 = complex0.add(complex19);
        org.apache.commons.math3.complex.Complex complex22 = complex21.negate();
        org.apache.commons.math3.complex.Complex complex24 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double27 = complex26.getReal();
        org.apache.commons.math3.complex.Complex complex29 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double30 = complex29.getReal();
        boolean boolean31 = org.apache.commons.math3.complex.Complex.equals(complex26, complex29);
        boolean boolean33 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex24, complex26, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex34 = complex24.log();
        boolean boolean36 = org.apache.commons.math3.complex.Complex.equals(complex21, complex34, (int) (byte) 100);
        org.apache.commons.math3.complex.Complex complex38 = complex34.multiply(0);
        boolean boolean39 = complex38.isInfinite();
        org.apache.commons.math3.complex.Complex complex40 = complex38.reciprocal();
        double double41 = complex38.getImaginary();
        org.apache.commons.math3.complex.Complex complex43 = complex38.multiply((int) (short) 100);
        org.apache.commons.math3.complex.Complex complex45 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math3.complex.Complex complex47 = complex45.tanh();
        org.apache.commons.math3.complex.Complex complex48 = complex47.sin();
        org.apache.commons.math3.complex.Complex complex50 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex51 = complex50.sqrt();
        boolean boolean53 = org.apache.commons.math3.complex.Complex.equals(complex47, complex50, (int) (byte) -1);
        org.apache.commons.math3.complex.ComplexField complexField54 = complex50.getField();
        org.apache.commons.math3.complex.Complex complex55 = org.apache.commons.math3.complex.Complex.ONE;
        boolean boolean57 = org.apache.commons.math3.complex.Complex.equals(complex50, complex55, (int) (short) 100);
        org.apache.commons.math3.complex.Complex complex58 = complex43.add(complex50);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1.0d) + "'", double27 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1.0d) + "'", double30 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(complexField54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(complex58);
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test072");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math3.complex.Complex complex4 = complex1.asin();
        org.apache.commons.math3.complex.Complex complex5 = complex4.tan();
        org.apache.commons.math3.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math3.complex.Complex complex7 = complex6.reciprocal();
        org.apache.commons.math3.complex.Complex complex9 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double15 = complex14.getReal();
        boolean boolean16 = org.apache.commons.math3.complex.Complex.equals(complex11, complex14);
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex9, complex11, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex20 = complex11.multiply(1);
        boolean boolean21 = org.apache.commons.math3.complex.Complex.equals(complex7, complex11);
        try {
            java.util.List<org.apache.commons.math3.complex.Complex> complexList23 = complex7.nthRoot(0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotPositiveException; message: cannot compute nth root for null or negative n: 0");
        } catch (org.apache.commons.math3.exception.NotPositiveException e) {
        }
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test073");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex11 = complex1.log();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, 10);
        org.apache.commons.math3.complex.Complex complex24 = complex20.pow((double) (byte) 1);
        boolean boolean25 = org.apache.commons.math3.complex.Complex.equals(complex1, complex24);
        org.apache.commons.math3.complex.Complex complex27 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double28 = complex27.getReal();
        double double29 = complex27.getReal();
        org.apache.commons.math3.complex.Complex complex30 = complex27.tan();
        org.apache.commons.math3.complex.Complex complex31 = complex27.exp();
        org.apache.commons.math3.complex.Complex complex33 = complex27.multiply((double) 10);
        boolean boolean34 = org.apache.commons.math3.complex.Complex.equals(complex1, complex33);
        org.apache.commons.math3.complex.Complex complex35 = complex33.cosh();
        boolean boolean36 = complex35.isNaN();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-1.0d) + "'", double28 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1.0d) + "'", double29 == (-1.0d));
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test074");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math3.complex.Complex complex4 = complex1.asin();
        org.apache.commons.math3.complex.Complex complex5 = complex4.tan();
        org.apache.commons.math3.complex.Complex complex7 = complex5.divide((double) 10);
        org.apache.commons.math3.complex.Complex complex10 = org.apache.commons.math3.complex.Complex.valueOf((double) 10.0f, (double) (-1));
        org.apache.commons.math3.complex.Complex complex12 = complex10.add((double) 'a');
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex7, complex10);
        org.apache.commons.math3.complex.Complex complex14 = complex7.acos();
        org.apache.commons.math3.complex.Complex complex15 = complex7.acos();
        java.lang.Class<?> wildcardClass16 = complex15.getClass();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test075");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex8 = complex3.cosh();
        double double9 = complex3.getImaginary();
        double double10 = complex3.abs();
        org.apache.commons.math3.complex.Complex complex12 = complex3.multiply((-1));
        org.apache.commons.math3.complex.Complex complex13 = complex12.sinh();
        java.lang.Class<?> wildcardClass14 = complex12.getClass();
        org.apache.commons.math3.complex.Complex complex15 = null;
        try {
            org.apache.commons.math3.complex.Complex complex16 = complex12.pow(complex15);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
        }
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test076");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex9 = complex3.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        boolean boolean20 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex11, complex13, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex22 = complex13.multiply(1);
        org.apache.commons.math3.complex.Complex complex23 = complex13.conjugate();
        boolean boolean25 = org.apache.commons.math3.complex.Complex.equals(complex9, complex13, (int) (short) 100);
        org.apache.commons.math3.complex.Complex complex27 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex28 = complex27.sqrt();
        org.apache.commons.math3.complex.Complex complex29 = complex27.tanh();
        double double30 = complex29.abs();
        org.apache.commons.math3.complex.Complex complex31 = complex29.exp();
        org.apache.commons.math3.complex.Complex complex32 = complex31.negate();
        org.apache.commons.math3.complex.Complex complex33 = complex31.sin();
        org.apache.commons.math3.complex.Complex complex34 = complex9.subtract(complex33);
        org.apache.commons.math3.complex.Complex complex36 = new org.apache.commons.math3.complex.Complex((double) ' ');
        org.apache.commons.math3.complex.Complex complex38 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double39 = complex38.getReal();
        org.apache.commons.math3.complex.Complex complex41 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math3.complex.Complex complex43 = complex41.tanh();
        boolean boolean45 = complex43.equals((java.lang.Object) true);
        double double46 = complex43.getImaginary();
        org.apache.commons.math3.complex.Complex complex47 = complex43.sinh();
        org.apache.commons.math3.complex.Complex complex49 = complex43.multiply(0.0d);
        boolean boolean50 = org.apache.commons.math3.complex.Complex.equals(complex38, complex43);
        org.apache.commons.math3.complex.Complex complex51 = complex36.divide(complex43);
        org.apache.commons.math3.complex.Complex complex52 = complex51.sinh();
        org.apache.commons.math3.complex.Complex complex53 = complex9.pow(complex51);
        org.apache.commons.math3.complex.Complex complex54 = complex51.reciprocal();
        org.apache.commons.math3.complex.Complex complex55 = complex51.cos();
        org.apache.commons.math3.complex.Complex complex57 = complex55.multiply(1);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-1.0d) + "'", double39 == (-1.0d));
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex57);
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test077");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex11 = complex1.log();
        org.apache.commons.math3.complex.Complex complex12 = complex1.log();
        org.apache.commons.math3.complex.Complex complex13 = complex1.cos();
        org.apache.commons.math3.complex.Complex complex15 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math3.complex.Complex complex17 = complex15.tanh();
        boolean boolean19 = complex17.equals((java.lang.Object) true);
        double double20 = complex17.getImaginary();
        org.apache.commons.math3.complex.Complex complex21 = complex17.sinh();
        org.apache.commons.math3.complex.Complex complex22 = complex17.cosh();
        org.apache.commons.math3.complex.Complex complex24 = complex22.subtract((double) 0L);
        org.apache.commons.math3.complex.Complex complex26 = complex24.divide(0.03125d);
        org.apache.commons.math3.complex.Complex complex27 = complex26.sinh();
        org.apache.commons.math3.complex.Complex complex28 = complex1.divide(complex26);
        org.apache.commons.math3.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math3.complex.Complex complex31 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math3.complex.Complex complex33 = complex31.tanh();
        boolean boolean35 = complex33.equals((java.lang.Object) true);
        double double36 = complex33.getImaginary();
        org.apache.commons.math3.complex.Complex complex37 = complex33.sinh();
        org.apache.commons.math3.complex.Complex complex39 = complex33.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex41 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double42 = complex41.getReal();
        org.apache.commons.math3.complex.Complex complex44 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double45 = complex44.getReal();
        boolean boolean46 = org.apache.commons.math3.complex.Complex.equals(complex41, complex44);
        org.apache.commons.math3.complex.Complex complex48 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean50 = org.apache.commons.math3.complex.Complex.equals(complex41, complex48, 10);
        org.apache.commons.math3.complex.Complex complex52 = complex48.pow((double) (byte) 1);
        boolean boolean54 = org.apache.commons.math3.complex.Complex.equals(complex33, complex52, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex55 = complex33.exp();
        boolean boolean57 = org.apache.commons.math3.complex.Complex.equals(complex29, complex33, (int) (byte) 100);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + (-1.0d) + "'", double42 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1.0d) + "'", double45 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test078");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (short) 10);
        org.apache.commons.math3.complex.Complex complex3 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex4 = complex3.sqrt();
        org.apache.commons.math3.complex.Complex complex5 = complex3.tanh();
        boolean boolean7 = complex5.equals((java.lang.Object) true);
        double double8 = complex5.getImaginary();
        org.apache.commons.math3.complex.Complex complex9 = complex5.sinh();
        org.apache.commons.math3.complex.Complex complex11 = complex5.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex15 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double16 = complex15.getReal();
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double19 = complex18.getReal();
        boolean boolean20 = org.apache.commons.math3.complex.Complex.equals(complex15, complex18);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex13, complex15, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex23 = complex13.log();
        org.apache.commons.math3.complex.Complex complex25 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double26 = complex25.getReal();
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double29 = complex28.getReal();
        boolean boolean30 = org.apache.commons.math3.complex.Complex.equals(complex25, complex28);
        org.apache.commons.math3.complex.Complex complex32 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean34 = org.apache.commons.math3.complex.Complex.equals(complex25, complex32, 10);
        org.apache.commons.math3.complex.Complex complex36 = complex32.pow((double) (byte) 1);
        boolean boolean37 = org.apache.commons.math3.complex.Complex.equals(complex13, complex36);
        org.apache.commons.math3.complex.Complex complex38 = complex13.reciprocal();
        boolean boolean40 = org.apache.commons.math3.complex.Complex.equals(complex11, complex13, (double) (byte) 1);
        org.apache.commons.math3.complex.Complex complex41 = complex1.divide(complex11);
        org.apache.commons.math3.complex.Complex complex42 = complex11.sqrt();
        java.lang.String str43 = complex42.toString();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1.0d) + "'", double16 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.0d) + "'", double19 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-1.0d) + "'", double26 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1.0d) + "'", double29 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "(0.0, 0.0)" + "'", str43.equals("(0.0, 0.0)"));
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test079");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex8 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex10 = complex3.multiply((-2.0d));
        org.apache.commons.math3.complex.Complex complex11 = complex3.tan();
        double double12 = complex11.getImaginary();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test080");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        double double4 = complex1.getImaginary();
        org.apache.commons.math3.complex.Complex complex5 = complex1.tanh();
        org.apache.commons.math3.complex.Complex complex7 = complex5.add(7.896296018268069E13d);
        org.apache.commons.math3.complex.Complex complex8 = complex7.sqrt();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test081");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex(0.36787944117144233d);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex5 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double6 = complex5.getReal();
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double9 = complex8.getReal();
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equals(complex5, complex8);
        boolean boolean12 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex3, complex5, (double) 0.0f);
        java.lang.String str13 = complex3.toString();
        org.apache.commons.math3.complex.Complex complex15 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double16 = complex15.getReal();
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double19 = complex18.getReal();
        boolean boolean20 = org.apache.commons.math3.complex.Complex.equals(complex15, complex18);
        org.apache.commons.math3.complex.Complex complex22 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean24 = org.apache.commons.math3.complex.Complex.equals(complex15, complex22, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex25 = complex3.add(complex22);
        org.apache.commons.math3.complex.Complex complex26 = org.apache.commons.math3.complex.Complex.NaN;
        org.apache.commons.math3.complex.Complex complex27 = complex22.subtract(complex26);
        org.apache.commons.math3.complex.Complex complex29 = complex22.multiply((int) (byte) -1);
        org.apache.commons.math3.complex.Complex complex30 = complex22.tan();
        double double31 = complex30.abs();
        double double32 = complex30.abs();
        org.apache.commons.math3.complex.Complex complex33 = complex1.pow(complex30);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.0d) + "'", double6 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "(-1.0, 0.0)" + "'", str13.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1.0d) + "'", double16 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.0d) + "'", double19 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.557407724654902d + "'", double31 == 1.557407724654902d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.557407724654902d + "'", double32 == 1.557407724654902d);
        org.junit.Assert.assertNotNull(complex33);
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test082");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf(0.0d, 3.296908309475615d);
        org.apache.commons.math3.complex.Complex complex3 = complex2.atan();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test083");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        double double3 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = complex1.tan();
        boolean boolean5 = complex1.isInfinite();
        org.apache.commons.math3.complex.Complex complex6 = complex1.acos();
        boolean boolean7 = complex1.isInfinite();
        org.apache.commons.math3.complex.Complex complex10 = new org.apache.commons.math3.complex.Complex(Double.POSITIVE_INFINITY, (-0.8414709848078965d));
        org.apache.commons.math3.complex.Complex complex11 = complex1.multiply(complex10);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex11);
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test084");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math3.complex.Complex complex4 = complex3.acos();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double9 = complex8.getReal();
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex8, complex11);
        boolean boolean15 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex6, complex8, (double) 0.0f);
        java.lang.String str16 = complex6.toString();
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double19 = complex18.getReal();
        org.apache.commons.math3.complex.Complex complex21 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double22 = complex21.getReal();
        boolean boolean23 = org.apache.commons.math3.complex.Complex.equals(complex18, complex21);
        org.apache.commons.math3.complex.Complex complex25 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean27 = org.apache.commons.math3.complex.Complex.equals(complex18, complex25, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex28 = complex6.add(complex25);
        org.apache.commons.math3.complex.Complex complex29 = org.apache.commons.math3.complex.Complex.NaN;
        org.apache.commons.math3.complex.Complex complex30 = complex25.subtract(complex29);
        double double31 = complex29.getArgument();
        boolean boolean33 = org.apache.commons.math3.complex.Complex.equals(complex4, complex29, (int) (short) 100);
        org.apache.commons.math3.complex.Complex complex34 = complex4.atan();
        org.apache.commons.math3.complex.Complex complex35 = complex4.cosh();
        double double36 = complex35.getImaginary();
        org.apache.commons.math3.complex.Complex complex37 = complex35.log();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "(-1.0, 0.0)" + "'", str16.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.0d) + "'", double19 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertEquals((double) double31, Double.NaN, 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-0.0d) + "'", double36 == (-0.0d));
        org.junit.Assert.assertNotNull(complex37);
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test085");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex12 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double15 = complex14.getReal();
        org.apache.commons.math3.complex.Complex complex17 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double18 = complex17.getReal();
        boolean boolean19 = org.apache.commons.math3.complex.Complex.equals(complex14, complex17);
        boolean boolean21 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex12, complex14, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex22 = complex12.log();
        org.apache.commons.math3.complex.Complex complex24 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double25 = complex24.getReal();
        org.apache.commons.math3.complex.Complex complex27 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double28 = complex27.getReal();
        boolean boolean29 = org.apache.commons.math3.complex.Complex.equals(complex24, complex27);
        org.apache.commons.math3.complex.Complex complex31 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean33 = org.apache.commons.math3.complex.Complex.equals(complex24, complex31, 10);
        org.apache.commons.math3.complex.Complex complex35 = complex31.pow((double) (byte) 1);
        boolean boolean36 = org.apache.commons.math3.complex.Complex.equals(complex12, complex35);
        boolean boolean37 = complex3.equals((java.lang.Object) complex12);
        org.apache.commons.math3.complex.Complex complex38 = complex3.reciprocal();
        org.apache.commons.math3.complex.Complex complex39 = complex3.cosh();
        org.apache.commons.math3.complex.Complex complex41 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math3.complex.Complex complex43 = complex41.tanh();
        boolean boolean45 = complex43.equals((java.lang.Object) true);
        double double46 = complex43.getImaginary();
        org.apache.commons.math3.complex.Complex complex48 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double49 = complex48.getReal();
        org.apache.commons.math3.complex.Complex complex51 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double52 = complex51.getReal();
        boolean boolean53 = org.apache.commons.math3.complex.Complex.equals(complex48, complex51);
        org.apache.commons.math3.complex.Complex complex55 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean57 = org.apache.commons.math3.complex.Complex.equals(complex48, complex55, 10);
        org.apache.commons.math3.complex.Complex complex59 = complex55.pow((double) (byte) 1);
        boolean boolean61 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex43, complex55, (double) (-1));
        org.apache.commons.math3.complex.Complex complex63 = complex55.multiply((double) (byte) 0);
        org.apache.commons.math3.complex.Complex complex65 = complex55.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex66 = complex55.cos();
        org.apache.commons.math3.complex.Complex complex67 = complex39.multiply(complex66);
        org.apache.commons.math3.complex.Complex complex69 = complex66.divide(0.7615941559557649d);
        org.apache.commons.math3.complex.Complex complex70 = complex66.negate();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.0d) + "'", double18 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-1.0d) + "'", double28 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-1.0d) + "'", double49 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-1.0d) + "'", double52 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test086");
        org.apache.commons.math3.complex.Complex complex0 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double3 = complex2.getReal();
        org.apache.commons.math3.complex.Complex complex5 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math3.complex.Complex complex7 = complex5.tanh();
        boolean boolean9 = complex7.equals((java.lang.Object) true);
        double double10 = complex7.getImaginary();
        org.apache.commons.math3.complex.Complex complex11 = complex7.sinh();
        org.apache.commons.math3.complex.Complex complex13 = complex7.multiply(0.0d);
        boolean boolean14 = org.apache.commons.math3.complex.Complex.equals(complex2, complex7);
        org.apache.commons.math3.complex.Complex complex16 = complex2.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex17 = complex0.subtract(complex16);
        org.apache.commons.math3.complex.Complex complex19 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math3.complex.Complex complex21 = complex0.add(complex19);
        org.apache.commons.math3.complex.Complex complex22 = complex21.negate();
        org.apache.commons.math3.complex.Complex complex24 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex25 = complex24.sqrt();
        org.apache.commons.math3.complex.Complex complex26 = complex24.tanh();
        boolean boolean28 = complex26.equals((java.lang.Object) true);
        double double29 = complex26.getImaginary();
        org.apache.commons.math3.complex.Complex complex30 = complex26.sinh();
        org.apache.commons.math3.complex.Complex complex32 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex34 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double35 = complex34.getReal();
        org.apache.commons.math3.complex.Complex complex37 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double38 = complex37.getReal();
        boolean boolean39 = org.apache.commons.math3.complex.Complex.equals(complex34, complex37);
        boolean boolean41 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex32, complex34, (double) 0.0f);
        java.lang.String str42 = complex32.toString();
        org.apache.commons.math3.complex.Complex complex44 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double45 = complex44.getReal();
        org.apache.commons.math3.complex.Complex complex47 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double48 = complex47.getReal();
        boolean boolean49 = org.apache.commons.math3.complex.Complex.equals(complex44, complex47);
        org.apache.commons.math3.complex.Complex complex51 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean53 = org.apache.commons.math3.complex.Complex.equals(complex44, complex51, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex54 = complex32.add(complex51);
        org.apache.commons.math3.complex.Complex complex55 = complex30.multiply(complex54);
        org.apache.commons.math3.complex.Complex complex56 = complex55.log();
        org.apache.commons.math3.complex.Complex complex57 = complex22.subtract(complex56);
        org.apache.commons.math3.complex.Complex complex58 = complex56.tanh();
        org.apache.commons.math3.complex.Complex complex60 = complex58.subtract(0.352135490546587d);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-1.0d) + "'", double35 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-1.0d) + "'", double38 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "(-1.0, 0.0)" + "'", str42.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1.0d) + "'", double45 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-1.0d) + "'", double48 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex60);
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test087");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = complex1.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        org.apache.commons.math3.complex.Complex complex8 = complex4.divide(complex6);
        double double9 = complex4.getReal();
        org.apache.commons.math3.complex.Complex complex10 = complex4.cosh();
        org.apache.commons.math3.complex.Complex complex12 = complex4.divide((double) (byte) 1);
        boolean boolean13 = complex12.isInfinite();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-10.0d) + "'", double9 == (-10.0d));
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test088");
        org.apache.commons.math3.complex.Complex complex0 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double3 = complex2.getReal();
        org.apache.commons.math3.complex.Complex complex5 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math3.complex.Complex complex7 = complex5.tanh();
        boolean boolean9 = complex7.equals((java.lang.Object) true);
        double double10 = complex7.getImaginary();
        org.apache.commons.math3.complex.Complex complex11 = complex7.sinh();
        org.apache.commons.math3.complex.Complex complex13 = complex7.multiply(0.0d);
        boolean boolean14 = org.apache.commons.math3.complex.Complex.equals(complex2, complex7);
        org.apache.commons.math3.complex.Complex complex16 = complex2.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex17 = complex0.subtract(complex16);
        org.apache.commons.math3.complex.Complex complex19 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double20 = complex19.getReal();
        double double21 = complex19.getReal();
        org.apache.commons.math3.complex.Complex complex22 = complex19.tan();
        org.apache.commons.math3.complex.Complex complex23 = complex16.pow(complex22);
        org.apache.commons.math3.complex.Complex complex24 = complex22.sin();
        org.apache.commons.math3.complex.Complex complex25 = complex22.conjugate();
        org.apache.commons.math3.complex.Complex complex27 = complex25.pow((double) 100);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1.0d) + "'", double20 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1.0d) + "'", double21 == (-1.0d));
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex27);
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test089");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex12 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double15 = complex14.getReal();
        org.apache.commons.math3.complex.Complex complex17 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double18 = complex17.getReal();
        boolean boolean19 = org.apache.commons.math3.complex.Complex.equals(complex14, complex17);
        boolean boolean21 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex12, complex14, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex22 = complex12.log();
        org.apache.commons.math3.complex.Complex complex24 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double25 = complex24.getReal();
        org.apache.commons.math3.complex.Complex complex27 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double28 = complex27.getReal();
        boolean boolean29 = org.apache.commons.math3.complex.Complex.equals(complex24, complex27);
        org.apache.commons.math3.complex.Complex complex31 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean33 = org.apache.commons.math3.complex.Complex.equals(complex24, complex31, 10);
        org.apache.commons.math3.complex.Complex complex35 = complex31.pow((double) (byte) 1);
        boolean boolean36 = org.apache.commons.math3.complex.Complex.equals(complex12, complex35);
        boolean boolean37 = complex3.equals((java.lang.Object) complex12);
        org.apache.commons.math3.complex.Complex complex38 = complex3.reciprocal();
        org.apache.commons.math3.complex.Complex complex39 = complex3.atan();
        org.apache.commons.math3.complex.Complex complex40 = complex39.acos();
        org.apache.commons.math3.complex.Complex complex41 = complex39.asin();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.0d) + "'", double18 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-1.0d) + "'", double28 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test090");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf((double) (byte) 100, (double) 0L);
        org.apache.commons.math3.complex.Complex complex4 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math3.complex.Complex complex6 = complex4.tanh();
        boolean boolean8 = complex6.equals((java.lang.Object) true);
        double double9 = complex6.getImaginary();
        org.apache.commons.math3.complex.Complex complex10 = complex6.sinh();
        org.apache.commons.math3.complex.Complex complex11 = complex6.cosh();
        double double12 = complex6.getImaginary();
        double double13 = complex6.abs();
        org.apache.commons.math3.complex.Complex complex14 = complex2.add(complex6);
        org.apache.commons.math3.complex.Complex complex16 = complex2.multiply(10.000124996093955d);
        org.apache.commons.math3.complex.Complex complex17 = complex16.sin();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test091");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex11 = complex1.log();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, 10);
        org.apache.commons.math3.complex.Complex complex24 = complex20.pow((double) (byte) 1);
        boolean boolean25 = org.apache.commons.math3.complex.Complex.equals(complex1, complex24);
        org.apache.commons.math3.complex.Complex complex27 = complex24.multiply((int) '4');
        org.apache.commons.math3.complex.Complex complex28 = complex24.cosh();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test092");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = complex1.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex5 = complex1.log();
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) 10, (-2.0d));
        org.apache.commons.math3.complex.Complex complex9 = complex5.subtract(complex8);
        org.apache.commons.math3.complex.Complex complex10 = complex5.sin();
        boolean boolean11 = complex5.isNaN();
        org.apache.commons.math3.complex.Complex complex12 = complex5.cos();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(complex12);
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test093");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equals(complex1, complex8, 10);
        java.lang.String str11 = complex1.toString();
        org.apache.commons.math3.complex.Complex complex12 = complex1.atan();
        java.lang.String str13 = complex1.toString();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "(-1.0, 0.0)" + "'", str11.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "(-1.0, 0.0)" + "'", str13.equals("(-1.0, 0.0)"));
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test094");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex(100.0d, (double) (short) 100);
        org.apache.commons.math3.complex.Complex complex4 = complex2.multiply((double) 100);
        org.apache.commons.math3.complex.Complex complex7 = org.apache.commons.math3.complex.Complex.valueOf(100.0d, (double) (short) 0);
        org.apache.commons.math3.complex.Complex complex9 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double10 = complex9.getReal();
        org.apache.commons.math3.complex.Complex complex12 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double13 = complex12.getReal();
        boolean boolean14 = org.apache.commons.math3.complex.Complex.equals(complex9, complex12);
        org.apache.commons.math3.complex.Complex complex15 = complex12.sqrt();
        org.apache.commons.math3.complex.Complex complex17 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math3.complex.Complex complex19 = complex17.tanh();
        boolean boolean21 = complex19.equals((java.lang.Object) true);
        double double22 = complex19.getImaginary();
        org.apache.commons.math3.complex.Complex complex23 = complex19.sinh();
        org.apache.commons.math3.complex.Complex complex24 = complex19.cosh();
        double double25 = complex19.getImaginary();
        org.apache.commons.math3.complex.Complex complex26 = complex12.add(complex19);
        org.apache.commons.math3.complex.Complex complex27 = complex7.add(complex19);
        org.apache.commons.math3.complex.Complex complex29 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math3.complex.Complex complex31 = complex29.tanh();
        boolean boolean33 = complex31.equals((java.lang.Object) true);
        double double34 = complex31.getImaginary();
        org.apache.commons.math3.complex.Complex complex35 = complex31.sinh();
        org.apache.commons.math3.complex.Complex complex36 = complex27.multiply(complex35);
        boolean boolean38 = org.apache.commons.math3.complex.Complex.equals(complex4, complex27, (int) '4');
        double double39 = complex27.abs();
        org.apache.commons.math3.complex.Complex complex42 = org.apache.commons.math3.complex.Complex.valueOf((double) 10.0f, (double) (-1));
        org.apache.commons.math3.complex.Complex complex43 = complex27.subtract(complex42);
        org.apache.commons.math3.complex.Complex complex45 = complex42.divide((double) 0);
        java.lang.String str46 = complex42.toString();
        org.apache.commons.math3.complex.Complex complex47 = complex42.asin();
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1.0d) + "'", double13 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + str46 + "' != '" + "(10.0, -1.0)" + "'", str46.equals("(10.0, -1.0)"));
        org.junit.Assert.assertNotNull(complex47);
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test095");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex((double) (byte) 10, (-2.0d));
        org.apache.commons.math3.complex.Complex complex3 = complex2.exp();
        org.junit.Assert.assertNotNull(complex3);
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test096");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex12 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double13 = complex12.getReal();
        org.apache.commons.math3.complex.Complex complex15 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math3.complex.Complex complex17 = complex15.tanh();
        boolean boolean19 = complex17.equals((java.lang.Object) true);
        double double20 = complex17.getImaginary();
        org.apache.commons.math3.complex.Complex complex21 = complex17.sinh();
        org.apache.commons.math3.complex.Complex complex23 = complex17.multiply(0.0d);
        boolean boolean24 = org.apache.commons.math3.complex.Complex.equals(complex12, complex17);
        org.apache.commons.math3.complex.Complex complex26 = complex12.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex28 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math3.complex.Complex complex30 = complex28.tanh();
        boolean boolean32 = complex30.equals((java.lang.Object) true);
        double double33 = complex30.getImaginary();
        org.apache.commons.math3.complex.Complex complex34 = complex26.add(complex30);
        boolean boolean36 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex3, complex34, (double) 10);
        org.apache.commons.math3.complex.Complex complex38 = complex34.pow(0.0d);
        org.apache.commons.math3.complex.Complex complex40 = complex34.add(Double.NaN);
        org.apache.commons.math3.complex.Complex complex41 = complex40.cos();
        org.apache.commons.math3.complex.Complex complex42 = complex40.reciprocal();
        org.apache.commons.math3.complex.Complex complex45 = new org.apache.commons.math3.complex.Complex((double) 100L, (double) (-1L));
        org.apache.commons.math3.complex.Complex complex46 = complex45.conjugate();
        org.apache.commons.math3.complex.Complex complex49 = new org.apache.commons.math3.complex.Complex((double) 1, (double) (short) 10);
        org.apache.commons.math3.complex.Complex complex51 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex53 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double54 = complex53.getReal();
        org.apache.commons.math3.complex.Complex complex56 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double57 = complex56.getReal();
        boolean boolean58 = org.apache.commons.math3.complex.Complex.equals(complex53, complex56);
        boolean boolean60 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex51, complex53, (double) 0.0f);
        java.lang.String str61 = complex51.toString();
        org.apache.commons.math3.complex.Complex complex63 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double64 = complex63.getReal();
        org.apache.commons.math3.complex.Complex complex66 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double67 = complex66.getReal();
        boolean boolean68 = org.apache.commons.math3.complex.Complex.equals(complex63, complex66);
        org.apache.commons.math3.complex.Complex complex70 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean72 = org.apache.commons.math3.complex.Complex.equals(complex63, complex70, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex73 = complex51.add(complex70);
        java.lang.String str74 = complex70.toString();
        java.lang.Class<?> wildcardClass75 = complex70.getClass();
        boolean boolean77 = org.apache.commons.math3.complex.Complex.equals(complex49, complex70, 32.0d);
        org.apache.commons.math3.complex.Complex complex78 = complex45.multiply(complex70);
        boolean boolean79 = complex40.equals((java.lang.Object) complex45);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1.0d) + "'", double13 == (-1.0d));
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1.0d) + "'", double54 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-1.0d) + "'", double57 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + str61 + "' != '" + "(-1.0, 0.0)" + "'", str61.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + (-1.0d) + "'", double64 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + (-1.0d) + "'", double67 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertTrue("'" + str74 + "' != '" + "(-1.0, 0.0)" + "'", str74.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test097");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = complex1.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        org.apache.commons.math3.complex.Complex complex8 = complex4.divide(complex6);
        org.apache.commons.math3.complex.Complex complex10 = complex8.multiply(10.0d);
        org.apache.commons.math3.complex.ComplexField complexField11 = complex10.getField();
        org.apache.commons.math3.complex.Complex complex13 = complex10.add((double) (-1.0f));
        org.apache.commons.math3.complex.Complex complex14 = complex10.conjugate();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexField11);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test098");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) 1.0f);
        org.apache.commons.math3.complex.Complex complex3 = complex1.divide(0.0d);
        org.apache.commons.math3.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        org.apache.commons.math3.complex.Complex complex9 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math3.complex.Complex complex11 = complex9.tanh();
        boolean boolean13 = complex11.equals((java.lang.Object) true);
        double double14 = complex11.getImaginary();
        org.apache.commons.math3.complex.Complex complex15 = complex11.sinh();
        org.apache.commons.math3.complex.Complex complex17 = complex11.multiply(0.0d);
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex6, complex11);
        org.apache.commons.math3.complex.Complex complex20 = complex6.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex21 = complex20.log();
        org.apache.commons.math3.complex.Complex complex23 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex24 = complex23.cos();
        org.apache.commons.math3.complex.Complex complex25 = complex20.multiply(complex23);
        double double26 = complex25.abs();
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex30 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double31 = complex30.getReal();
        org.apache.commons.math3.complex.Complex complex33 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double34 = complex33.getReal();
        boolean boolean35 = org.apache.commons.math3.complex.Complex.equals(complex30, complex33);
        boolean boolean37 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex28, complex30, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex39 = complex30.multiply(1);
        org.apache.commons.math3.complex.Complex complex40 = complex30.conjugate();
        org.apache.commons.math3.complex.Complex complex41 = complex25.pow(complex40);
        org.apache.commons.math3.complex.Complex complex42 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex44 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double45 = complex44.getReal();
        org.apache.commons.math3.complex.Complex complex47 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math3.complex.Complex complex49 = complex47.tanh();
        boolean boolean51 = complex49.equals((java.lang.Object) true);
        double double52 = complex49.getImaginary();
        org.apache.commons.math3.complex.Complex complex53 = complex49.sinh();
        org.apache.commons.math3.complex.Complex complex55 = complex49.multiply(0.0d);
        boolean boolean56 = org.apache.commons.math3.complex.Complex.equals(complex44, complex49);
        org.apache.commons.math3.complex.Complex complex58 = complex44.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex59 = complex42.subtract(complex58);
        org.apache.commons.math3.complex.Complex complex60 = complex59.exp();
        double double61 = complex60.abs();
        org.apache.commons.math3.complex.Complex complex62 = complex25.add(complex60);
        org.apache.commons.math3.complex.Complex complex63 = complex4.add(complex25);
        org.apache.commons.math3.complex.Complex complex64 = complex4.cosh();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-1.0d) + "'", double31 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1.0d) + "'", double45 == (-1.0d));
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.0d + "'", double61 == 1.0d);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test099");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex(0.8778963166742729d, 100.0d);
        org.apache.commons.math3.complex.Complex complex3 = complex2.negate();
        double double4 = complex2.getReal();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.8778963166742729d + "'", double4 == 0.8778963166742729d);
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test100");
        org.apache.commons.math3.complex.Complex complex0 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double3 = complex2.getReal();
        org.apache.commons.math3.complex.Complex complex5 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math3.complex.Complex complex7 = complex5.tanh();
        boolean boolean9 = complex7.equals((java.lang.Object) true);
        double double10 = complex7.getImaginary();
        org.apache.commons.math3.complex.Complex complex11 = complex7.sinh();
        org.apache.commons.math3.complex.Complex complex13 = complex7.multiply(0.0d);
        boolean boolean14 = org.apache.commons.math3.complex.Complex.equals(complex2, complex7);
        org.apache.commons.math3.complex.Complex complex16 = complex2.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex17 = complex0.subtract(complex16);
        org.apache.commons.math3.complex.Complex complex19 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math3.complex.Complex complex21 = complex0.add(complex19);
        org.apache.commons.math3.complex.Complex complex22 = complex21.negate();
        org.apache.commons.math3.complex.Complex complex24 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double27 = complex26.getReal();
        org.apache.commons.math3.complex.Complex complex29 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double30 = complex29.getReal();
        boolean boolean31 = org.apache.commons.math3.complex.Complex.equals(complex26, complex29);
        boolean boolean33 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex24, complex26, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex34 = complex24.log();
        boolean boolean36 = org.apache.commons.math3.complex.Complex.equals(complex21, complex34, (int) (byte) 100);
        org.apache.commons.math3.complex.Complex complex38 = complex34.multiply(0);
        boolean boolean39 = complex38.isInfinite();
        org.apache.commons.math3.complex.Complex complex40 = complex38.reciprocal();
        org.apache.commons.math3.complex.Complex complex42 = org.apache.commons.math3.complex.Complex.valueOf(1.557407724654902d);
        org.apache.commons.math3.complex.ComplexField complexField43 = complex42.getField();
        org.apache.commons.math3.complex.Complex complex44 = complex40.subtract(complex42);
        org.apache.commons.math3.complex.Complex complex46 = complex44.divide((double) (short) -1);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1.0d) + "'", double27 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1.0d) + "'", double30 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complexField43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex46);
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test101");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex(100.0d, (double) (short) 100);
        org.apache.commons.math3.complex.Complex complex4 = complex2.multiply((double) 100);
        org.apache.commons.math3.complex.Complex complex7 = org.apache.commons.math3.complex.Complex.valueOf(100.0d, (double) (short) 0);
        org.apache.commons.math3.complex.Complex complex9 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double10 = complex9.getReal();
        org.apache.commons.math3.complex.Complex complex12 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double13 = complex12.getReal();
        boolean boolean14 = org.apache.commons.math3.complex.Complex.equals(complex9, complex12);
        org.apache.commons.math3.complex.Complex complex15 = complex12.sqrt();
        org.apache.commons.math3.complex.Complex complex17 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math3.complex.Complex complex19 = complex17.tanh();
        boolean boolean21 = complex19.equals((java.lang.Object) true);
        double double22 = complex19.getImaginary();
        org.apache.commons.math3.complex.Complex complex23 = complex19.sinh();
        org.apache.commons.math3.complex.Complex complex24 = complex19.cosh();
        double double25 = complex19.getImaginary();
        org.apache.commons.math3.complex.Complex complex26 = complex12.add(complex19);
        org.apache.commons.math3.complex.Complex complex27 = complex7.add(complex19);
        org.apache.commons.math3.complex.Complex complex29 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math3.complex.Complex complex31 = complex29.tanh();
        boolean boolean33 = complex31.equals((java.lang.Object) true);
        double double34 = complex31.getImaginary();
        org.apache.commons.math3.complex.Complex complex35 = complex31.sinh();
        org.apache.commons.math3.complex.Complex complex36 = complex27.multiply(complex35);
        boolean boolean38 = org.apache.commons.math3.complex.Complex.equals(complex4, complex27, (int) '4');
        org.apache.commons.math3.complex.Complex complex39 = complex27.tan();
        org.apache.commons.math3.complex.Complex complex40 = complex27.cos();
        boolean boolean41 = complex27.isInfinite();
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1.0d) + "'", double13 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test102");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex(0.5857653509193675d);
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test103");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex((double) (short) 100, (double) (short) -1);
        org.apache.commons.math3.complex.Complex complex3 = complex2.sqrt();
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = complex3.add((double) (-1L));
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex10 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double11 = complex10.getReal();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        boolean boolean15 = org.apache.commons.math3.complex.Complex.equals(complex10, complex13);
        boolean boolean17 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex8, complex10, (double) 0.0f);
        double double18 = complex10.getReal();
        org.apache.commons.math3.complex.Complex complex19 = complex10.exp();
        org.apache.commons.math3.complex.Complex complex21 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double22 = complex21.getReal();
        org.apache.commons.math3.complex.Complex complex24 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex25 = complex24.sqrt();
        org.apache.commons.math3.complex.Complex complex26 = complex24.tanh();
        boolean boolean28 = complex26.equals((java.lang.Object) true);
        double double29 = complex26.getImaginary();
        org.apache.commons.math3.complex.Complex complex30 = complex26.sinh();
        org.apache.commons.math3.complex.Complex complex32 = complex26.multiply(0.0d);
        boolean boolean33 = org.apache.commons.math3.complex.Complex.equals(complex21, complex26);
        org.apache.commons.math3.complex.Complex complex35 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex36 = complex35.sqrt();
        org.apache.commons.math3.complex.Complex complex37 = complex35.sqrt1z();
        org.apache.commons.math3.complex.Complex complex38 = complex26.subtract(complex35);
        org.apache.commons.math3.complex.Complex complex39 = complex38.acos();
        org.apache.commons.math3.complex.Complex complex40 = complex19.divide(complex38);
        org.apache.commons.math3.complex.Complex complex41 = complex6.subtract(complex40);
        org.apache.commons.math3.complex.Complex complex42 = complex6.log();
        org.apache.commons.math3.complex.Complex complex44 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double45 = complex44.getReal();
        double double46 = complex44.getReal();
        org.apache.commons.math3.complex.Complex complex47 = complex44.tan();
        boolean boolean48 = complex44.isInfinite();
        org.apache.commons.math3.complex.Complex complex49 = complex44.cos();
        org.apache.commons.math3.complex.Complex complex50 = complex42.pow(complex49);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.000124996093955d + "'", double4 == 10.000124996093955d);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-1.0d) + "'", double11 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.0d) + "'", double18 == (-1.0d));
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1.0d) + "'", double45 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1.0d) + "'", double46 == (-1.0d));
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test104");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double9 = complex8.getReal();
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex8, complex11);
        org.apache.commons.math3.complex.Complex complex14 = complex11.sqrt();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        org.apache.commons.math3.complex.Complex complex19 = complex16.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex20 = complex14.pow(complex19);
        org.apache.commons.math3.complex.Complex complex21 = complex4.multiply(complex20);
        org.apache.commons.math3.complex.Complex complex22 = complex20.sqrt1z();
        org.apache.commons.math3.complex.Complex complex24 = complex20.multiply((double) 0L);
        org.apache.commons.math3.complex.Complex complex26 = complex24.multiply((int) (byte) -1);
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double29 = complex28.getReal();
        double double30 = complex28.getReal();
        org.apache.commons.math3.complex.Complex complex31 = complex28.tan();
        org.apache.commons.math3.complex.Complex complex32 = complex28.exp();
        org.apache.commons.math3.complex.Complex complex33 = complex32.negate();
        boolean boolean34 = org.apache.commons.math3.complex.Complex.equals(complex26, complex32);
        org.apache.commons.math3.complex.ComplexField complexField35 = complex32.getField();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1.0d) + "'", double29 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1.0d) + "'", double30 == (-1.0d));
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(complexField35);
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test105");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex((double) 1.0f, (-1.2246467991473532E-16d));
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test106");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        java.lang.String str11 = complex1.toString();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex23 = complex1.add(complex20);
        org.apache.commons.math3.complex.Complex complex24 = org.apache.commons.math3.complex.Complex.NaN;
        org.apache.commons.math3.complex.Complex complex25 = complex20.subtract(complex24);
        org.apache.commons.math3.complex.Complex complex27 = complex20.multiply((int) (byte) -1);
        org.apache.commons.math3.complex.Complex complex28 = complex20.tan();
        org.apache.commons.math3.complex.Complex complex30 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex31 = complex30.sqrt();
        org.apache.commons.math3.complex.Complex complex32 = complex30.tanh();
        boolean boolean34 = complex32.equals((java.lang.Object) true);
        double double35 = complex32.getImaginary();
        org.apache.commons.math3.complex.Complex complex36 = complex32.sinh();
        org.apache.commons.math3.complex.Complex complex37 = complex32.sinh();
        double double38 = complex37.getReal();
        org.apache.commons.math3.complex.Complex complex39 = complex20.divide(complex37);
        org.apache.commons.math3.complex.Complex complex41 = complex37.pow(3.296908309475615d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "(-1.0, 0.0)" + "'", str11.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex41);
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test107");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex8 = complex3.cosh();
        org.apache.commons.math3.complex.ComplexField complexField9 = complex8.getField();
        double double10 = complex8.getImaginary();
        org.apache.commons.math3.complex.Complex complex11 = complex8.asin();
        org.apache.commons.math3.complex.Complex complex12 = complex11.sin();
        org.apache.commons.math3.complex.Complex complex13 = complex12.cos();
        org.apache.commons.math3.complex.Complex complex14 = complex13.asin();
        org.apache.commons.math3.complex.Complex complex15 = complex13.sin();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complexField9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test108");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf(0.0d, 10.000249990625546d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test109");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        java.lang.String str11 = complex1.toString();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex23 = complex1.add(complex20);
        org.apache.commons.math3.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math3.complex.Complex complex25 = complex24.asin();
        org.apache.commons.math3.complex.Complex complex26 = complex25.tan();
        org.apache.commons.math3.complex.Complex complex27 = complex25.acos();
        org.apache.commons.math3.complex.Complex complex28 = complex25.reciprocal();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "(-1.0, 0.0)" + "'", str11.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test110");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        double double3 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = complex1.tan();
        org.apache.commons.math3.complex.Complex complex5 = complex1.sinh();
        org.apache.commons.math3.complex.Complex complex8 = org.apache.commons.math3.complex.Complex.valueOf(100.0d, (double) (short) 0);
        org.apache.commons.math3.complex.Complex complex10 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double11 = complex10.getReal();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        boolean boolean15 = org.apache.commons.math3.complex.Complex.equals(complex10, complex13);
        org.apache.commons.math3.complex.Complex complex16 = complex13.sqrt();
        org.apache.commons.math3.complex.Complex complex18 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math3.complex.Complex complex20 = complex18.tanh();
        boolean boolean22 = complex20.equals((java.lang.Object) true);
        double double23 = complex20.getImaginary();
        org.apache.commons.math3.complex.Complex complex24 = complex20.sinh();
        org.apache.commons.math3.complex.Complex complex25 = complex20.cosh();
        double double26 = complex20.getImaginary();
        org.apache.commons.math3.complex.Complex complex27 = complex13.add(complex20);
        org.apache.commons.math3.complex.Complex complex28 = complex8.add(complex20);
        org.apache.commons.math3.complex.Complex complex30 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex31 = complex30.sqrt();
        org.apache.commons.math3.complex.Complex complex32 = complex30.tanh();
        boolean boolean34 = complex32.equals((java.lang.Object) true);
        double double35 = complex32.getImaginary();
        org.apache.commons.math3.complex.Complex complex36 = complex32.sinh();
        org.apache.commons.math3.complex.Complex complex37 = complex28.multiply(complex36);
        org.apache.commons.math3.complex.Complex complex39 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double40 = complex39.getReal();
        org.apache.commons.math3.complex.Complex complex42 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double43 = complex42.getReal();
        boolean boolean44 = org.apache.commons.math3.complex.Complex.equals(complex39, complex42);
        org.apache.commons.math3.complex.Complex complex46 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean48 = org.apache.commons.math3.complex.Complex.equals(complex39, complex46, 10);
        org.apache.commons.math3.complex.Complex complex50 = complex46.pow((double) (byte) 1);
        org.apache.commons.math3.complex.Complex complex51 = complex36.divide(complex46);
        org.apache.commons.math3.complex.Complex complex52 = complex46.tanh();
        org.apache.commons.math3.complex.Complex complex54 = complex52.pow(3.296908309475615d);
        boolean boolean56 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex5, complex54, (-1.557407724654902d));
        org.apache.commons.math3.complex.Complex complex58 = complex5.add(6.123233995736766E-17d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-1.0d) + "'", double11 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-1.0d) + "'", double40 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-1.0d) + "'", double43 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(complex58);
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test111");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex11 = complex1.log();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, 10);
        org.apache.commons.math3.complex.Complex complex24 = complex20.pow((double) (byte) 1);
        boolean boolean25 = org.apache.commons.math3.complex.Complex.equals(complex1, complex24);
        org.apache.commons.math3.complex.Complex complex26 = complex1.reciprocal();
        org.apache.commons.math3.complex.Complex complex27 = complex1.cosh();
        org.apache.commons.math3.complex.Complex complex28 = complex1.acos();
        org.apache.commons.math3.complex.Complex complex29 = complex1.sinh();
        double double30 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex31 = complex1.reciprocal();
        org.apache.commons.math3.complex.Complex complex33 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex35 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double36 = complex35.getReal();
        org.apache.commons.math3.complex.Complex complex38 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double39 = complex38.getReal();
        boolean boolean40 = org.apache.commons.math3.complex.Complex.equals(complex35, complex38);
        boolean boolean42 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex33, complex35, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex43 = complex33.log();
        org.apache.commons.math3.complex.Complex complex45 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double46 = complex45.getReal();
        org.apache.commons.math3.complex.Complex complex48 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double49 = complex48.getReal();
        boolean boolean50 = org.apache.commons.math3.complex.Complex.equals(complex45, complex48);
        org.apache.commons.math3.complex.Complex complex52 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean54 = org.apache.commons.math3.complex.Complex.equals(complex45, complex52, 10);
        org.apache.commons.math3.complex.Complex complex56 = complex52.pow((double) (byte) 1);
        boolean boolean57 = org.apache.commons.math3.complex.Complex.equals(complex33, complex56);
        org.apache.commons.math3.complex.Complex complex58 = complex33.reciprocal();
        org.apache.commons.math3.complex.Complex complex59 = complex33.cosh();
        org.apache.commons.math3.complex.Complex complex61 = complex33.multiply(Double.NaN);
        org.apache.commons.math3.complex.Complex complex63 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex65 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double66 = complex65.getReal();
        org.apache.commons.math3.complex.Complex complex68 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double69 = complex68.getReal();
        boolean boolean70 = org.apache.commons.math3.complex.Complex.equals(complex65, complex68);
        boolean boolean72 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex63, complex65, (double) 0.0f);
        double double73 = complex65.getReal();
        org.apache.commons.math3.complex.Complex complex74 = complex65.exp();
        java.lang.Class<?> wildcardClass75 = complex65.getClass();
        org.apache.commons.math3.complex.Complex complex76 = complex33.subtract(complex65);
        org.apache.commons.math3.complex.Complex complex77 = complex1.divide(complex65);
        org.apache.commons.math3.complex.Complex complex79 = complex77.add(0.009900666587988573d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1.0d) + "'", double30 == (-1.0d));
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-1.0d) + "'", double36 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-1.0d) + "'", double39 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1.0d) + "'", double46 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-1.0d) + "'", double49 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + (-1.0d) + "'", double66 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + (-1.0d) + "'", double69 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + (-1.0d) + "'", double73 == (-1.0d));
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex79);
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test112");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        org.apache.commons.math3.complex.Complex complex7 = new org.apache.commons.math3.complex.Complex((double) (short) 0);
        org.apache.commons.math3.complex.Complex complex8 = complex3.divide(complex7);
        org.apache.commons.math3.complex.Complex complex10 = complex3.add((double) 10.0f);
        org.apache.commons.math3.complex.Complex complex11 = complex10.negate();
        org.apache.commons.math3.complex.Complex complex12 = complex10.negate();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test113");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math3.complex.Complex complex4 = complex1.asin();
        org.apache.commons.math3.complex.Complex complex5 = complex4.tan();
        org.apache.commons.math3.complex.Complex complex6 = complex5.asin();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test114");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        java.lang.String str11 = complex1.toString();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex23 = complex1.add(complex20);
        org.apache.commons.math3.complex.Complex complex24 = org.apache.commons.math3.complex.Complex.NaN;
        org.apache.commons.math3.complex.Complex complex25 = complex20.subtract(complex24);
        org.apache.commons.math3.complex.Complex complex27 = complex20.subtract((double) 100.0f);
        org.apache.commons.math3.complex.Complex complex29 = complex27.multiply((int) (byte) -1);
        org.apache.commons.math3.complex.Complex complex32 = new org.apache.commons.math3.complex.Complex(0.0d, (double) ' ');
        org.apache.commons.math3.complex.Complex complex33 = complex32.asin();
        boolean boolean34 = complex29.equals((java.lang.Object) complex33);
        org.apache.commons.math3.complex.Complex complex36 = complex29.pow(0.0d);
        org.apache.commons.math3.complex.Complex complex37 = complex29.sqrt();
        org.apache.commons.math3.complex.Complex complex39 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        java.util.List<org.apache.commons.math3.complex.Complex> complexList41 = complex39.nthRoot((int) (byte) 1);
        org.apache.commons.math3.complex.Complex complex43 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double44 = complex43.getReal();
        org.apache.commons.math3.complex.Complex complex46 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double47 = complex46.getReal();
        boolean boolean48 = org.apache.commons.math3.complex.Complex.equals(complex43, complex46);
        org.apache.commons.math3.complex.Complex complex50 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean52 = org.apache.commons.math3.complex.Complex.equals(complex43, complex50, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex54 = new org.apache.commons.math3.complex.Complex((double) (short) 10);
        double double55 = complex54.getReal();
        boolean boolean56 = complex43.equals((java.lang.Object) complex54);
        org.apache.commons.math3.complex.Complex complex57 = complex54.sin();
        org.apache.commons.math3.complex.Complex complex58 = complex54.exp();
        org.apache.commons.math3.complex.Complex complex59 = complex39.divide(complex54);
        org.apache.commons.math3.complex.Complex complex61 = complex39.divide((double) 1);
        org.apache.commons.math3.complex.Complex complex62 = complex61.sinh();
        boolean boolean63 = org.apache.commons.math3.complex.Complex.equals(complex37, complex62);
        org.apache.commons.math3.complex.Complex complex65 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex66 = complex65.sqrt();
        org.apache.commons.math3.complex.Complex complex67 = complex65.tanh();
        double double68 = complex65.getImaginary();
        org.apache.commons.math3.complex.Complex complex69 = complex65.tanh();
        org.apache.commons.math3.complex.Complex complex71 = complex69.add(7.896296018268069E13d);
        org.apache.commons.math3.complex.Complex complex72 = complex71.tanh();
        org.apache.commons.math3.complex.Complex complex74 = complex71.multiply((int) (byte) 0);
        org.apache.commons.math3.complex.Complex complex75 = complex37.divide(complex71);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "(-1.0, 0.0)" + "'", str11.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complexList41);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1.0d) + "'", double44 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-1.0d) + "'", double47 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 10.0d + "'", double55 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test115");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math3.complex.Complex complex4 = complex1.asin();
        org.apache.commons.math3.complex.Complex complex5 = complex4.tan();
        org.apache.commons.math3.complex.Complex complex7 = complex5.divide((double) 10);
        org.apache.commons.math3.complex.Complex complex8 = complex5.cos();
        org.apache.commons.math3.complex.Complex complex10 = complex8.divide(5.52623769772516d);
        org.apache.commons.math3.complex.Complex complex11 = complex8.sqrt();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test116");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.cos();
        org.apache.commons.math3.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math3.complex.Complex complex4 = complex2.reciprocal();
        org.apache.commons.math3.complex.Complex complex5 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex7 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double8 = complex7.getReal();
        org.apache.commons.math3.complex.Complex complex10 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex11 = complex10.sqrt();
        org.apache.commons.math3.complex.Complex complex12 = complex10.tanh();
        boolean boolean14 = complex12.equals((java.lang.Object) true);
        double double15 = complex12.getImaginary();
        org.apache.commons.math3.complex.Complex complex16 = complex12.sinh();
        org.apache.commons.math3.complex.Complex complex18 = complex12.multiply(0.0d);
        boolean boolean19 = org.apache.commons.math3.complex.Complex.equals(complex7, complex12);
        org.apache.commons.math3.complex.Complex complex21 = complex7.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex22 = complex5.subtract(complex21);
        org.apache.commons.math3.complex.Complex complex24 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double25 = complex24.getReal();
        org.apache.commons.math3.complex.Complex complex27 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double28 = complex27.getReal();
        boolean boolean29 = org.apache.commons.math3.complex.Complex.equals(complex24, complex27);
        org.apache.commons.math3.complex.Complex complex31 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math3.complex.Complex complex33 = complex31.tanh();
        boolean boolean35 = complex33.equals((java.lang.Object) true);
        double double36 = complex33.getImaginary();
        org.apache.commons.math3.complex.Complex complex37 = complex33.sinh();
        org.apache.commons.math3.complex.Complex complex38 = complex33.cosh();
        double double39 = complex33.getImaginary();
        boolean boolean40 = complex27.equals((java.lang.Object) complex33);
        org.apache.commons.math3.complex.Complex complex41 = complex22.add(complex27);
        double double42 = complex41.getImaginary();
        org.apache.commons.math3.complex.Complex complex44 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math3.complex.Complex complex46 = complex44.tanh();
        boolean boolean48 = complex46.equals((java.lang.Object) true);
        double double49 = complex46.getImaginary();
        org.apache.commons.math3.complex.Complex complex50 = complex46.sinh();
        org.apache.commons.math3.complex.Complex complex52 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex54 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double55 = complex54.getReal();
        org.apache.commons.math3.complex.Complex complex57 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double58 = complex57.getReal();
        boolean boolean59 = org.apache.commons.math3.complex.Complex.equals(complex54, complex57);
        boolean boolean61 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex52, complex54, (double) 0.0f);
        java.lang.String str62 = complex52.toString();
        org.apache.commons.math3.complex.Complex complex64 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double65 = complex64.getReal();
        org.apache.commons.math3.complex.Complex complex67 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double68 = complex67.getReal();
        boolean boolean69 = org.apache.commons.math3.complex.Complex.equals(complex64, complex67);
        org.apache.commons.math3.complex.Complex complex71 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean73 = org.apache.commons.math3.complex.Complex.equals(complex64, complex71, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex74 = complex52.add(complex71);
        org.apache.commons.math3.complex.Complex complex75 = complex50.multiply(complex74);
        org.apache.commons.math3.complex.Complex complex77 = complex75.divide((double) 1L);
        org.apache.commons.math3.complex.Complex complex78 = complex41.pow(complex77);
        org.apache.commons.math3.complex.Complex complex79 = complex2.add(complex78);
        org.apache.commons.math3.complex.Complex complex80 = complex2.sqrt();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-1.0d) + "'", double28 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + (-1.9643867237284715E-15d) + "'", double42 == (-1.9643867237284715E-15d));
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-1.0d) + "'", double55 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + (-1.0d) + "'", double58 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + str62 + "' != '" + "(-1.0, 0.0)" + "'", str62.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + (-1.0d) + "'", double65 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-1.0d) + "'", double68 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test117");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex4 = complex1.subtract((double) (short) 100);
        org.apache.commons.math3.complex.Complex complex5 = complex4.sqrt1z();
        org.apache.commons.math3.complex.ComplexField complexField6 = complex4.getField();
        java.lang.Class<?> wildcardClass7 = complex4.getClass();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexField6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test118");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) 0, (double) 10);
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double9 = complex8.getReal();
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex8, complex11);
        boolean boolean15 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex6, complex8, (double) 0.0f);
        double double16 = complex8.getReal();
        org.apache.commons.math3.complex.Complex complex17 = complex8.exp();
        double double18 = complex8.getImaginary();
        org.apache.commons.math3.complex.Complex complex21 = org.apache.commons.math3.complex.Complex.valueOf(100.0d, (double) (short) 0);
        org.apache.commons.math3.complex.Complex complex23 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double24 = complex23.getReal();
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double27 = complex26.getReal();
        boolean boolean28 = org.apache.commons.math3.complex.Complex.equals(complex23, complex26);
        org.apache.commons.math3.complex.Complex complex29 = complex26.sqrt();
        org.apache.commons.math3.complex.Complex complex31 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math3.complex.Complex complex33 = complex31.tanh();
        boolean boolean35 = complex33.equals((java.lang.Object) true);
        double double36 = complex33.getImaginary();
        org.apache.commons.math3.complex.Complex complex37 = complex33.sinh();
        org.apache.commons.math3.complex.Complex complex38 = complex33.cosh();
        double double39 = complex33.getImaginary();
        org.apache.commons.math3.complex.Complex complex40 = complex26.add(complex33);
        org.apache.commons.math3.complex.Complex complex41 = complex21.add(complex33);
        org.apache.commons.math3.complex.Complex complex43 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math3.complex.Complex complex45 = complex43.tanh();
        boolean boolean47 = complex45.equals((java.lang.Object) true);
        double double48 = complex45.getImaginary();
        org.apache.commons.math3.complex.Complex complex49 = complex45.sinh();
        org.apache.commons.math3.complex.Complex complex50 = complex41.multiply(complex49);
        boolean boolean51 = org.apache.commons.math3.complex.Complex.equals(complex8, complex50);
        org.apache.commons.math3.complex.Complex complex52 = complex4.subtract(complex8);
        org.apache.commons.math3.complex.Complex complex53 = complex1.multiply(complex52);
        org.apache.commons.math3.complex.Complex complex55 = complex53.add(0.5872139151569291d);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1.0d) + "'", double16 == (-1.0d));
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1.0d) + "'", double24 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1.0d) + "'", double27 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex55);
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test119");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf((double) 0);
        org.apache.commons.math3.complex.Complex complex2 = complex1.reciprocal();
        double double3 = complex1.getImaginary();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test120");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math3.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math3.complex.Complex complex6 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex7 = complex6.sqrt();
        boolean boolean9 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6, (int) (byte) -1);
        org.apache.commons.math3.complex.Complex complex10 = complex3.cosh();
        org.apache.commons.math3.complex.Complex complex12 = complex3.multiply((int) (short) 1);
        org.apache.commons.math3.complex.Complex complex13 = complex12.cos();
        org.apache.commons.math3.complex.Complex complex15 = complex12.pow(0.8414709848078965d);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex15);
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test121");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = complex1.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex5 = complex1.log();
        org.apache.commons.math3.complex.ComplexField complexField6 = complex5.getField();
        java.lang.String str7 = complex5.toString();
        boolean boolean8 = complex5.isInfinite();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexField6);
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(0.0, 3.141592653589793)" + "'", str7.equals("(0.0, 3.141592653589793)"));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test122");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equals(complex1, complex8, 10);
        org.apache.commons.math3.complex.Complex complex11 = complex8.sin();
        org.apache.commons.math3.complex.Complex complex12 = complex8.sinh();
        org.apache.commons.math3.complex.Complex complex14 = complex8.add(1.0d);
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double19 = complex18.getReal();
        org.apache.commons.math3.complex.Complex complex21 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double22 = complex21.getReal();
        boolean boolean23 = org.apache.commons.math3.complex.Complex.equals(complex18, complex21);
        boolean boolean25 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex16, complex18, (double) 0.0f);
        java.lang.String str26 = complex16.toString();
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double29 = complex28.getReal();
        org.apache.commons.math3.complex.Complex complex31 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double32 = complex31.getReal();
        boolean boolean33 = org.apache.commons.math3.complex.Complex.equals(complex28, complex31);
        org.apache.commons.math3.complex.Complex complex35 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean37 = org.apache.commons.math3.complex.Complex.equals(complex28, complex35, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex38 = complex16.add(complex35);
        java.lang.String str39 = complex35.toString();
        org.apache.commons.math3.complex.Complex complex41 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex42 = complex35.divide(complex41);
        org.apache.commons.math3.complex.ComplexField complexField43 = complex41.getField();
        org.apache.commons.math3.complex.Complex complex44 = complex14.pow(complex41);
        org.apache.commons.math3.complex.Complex complex45 = complex14.atan();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.0d) + "'", double19 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "(-1.0, 0.0)" + "'", str26.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1.0d) + "'", double29 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-1.0d) + "'", double32 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "(-1.0, 0.0)" + "'", str39.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complexField43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test123");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex11 = complex1.log();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, 10);
        org.apache.commons.math3.complex.Complex complex24 = complex20.pow((double) (byte) 1);
        boolean boolean25 = org.apache.commons.math3.complex.Complex.equals(complex1, complex24);
        org.apache.commons.math3.complex.Complex complex27 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double28 = complex27.getReal();
        double double29 = complex27.getReal();
        org.apache.commons.math3.complex.Complex complex30 = complex27.tan();
        org.apache.commons.math3.complex.Complex complex31 = complex27.exp();
        org.apache.commons.math3.complex.Complex complex33 = complex27.multiply((double) 10);
        boolean boolean34 = org.apache.commons.math3.complex.Complex.equals(complex1, complex33);
        org.apache.commons.math3.complex.Complex complex35 = complex33.cosh();
        org.apache.commons.math3.complex.Complex complex36 = null;
        try {
            org.apache.commons.math3.complex.Complex complex37 = complex35.multiply(complex36);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
        }
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test124");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex(0.0d, (double) (short) -1);
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test125");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex(0.0d, 0.0d);
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test126");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math3.complex.Complex complex6 = complex4.tanh();
        boolean boolean8 = complex6.equals((java.lang.Object) true);
        double double9 = complex6.getImaginary();
        org.apache.commons.math3.complex.Complex complex10 = complex6.sinh();
        org.apache.commons.math3.complex.Complex complex12 = complex6.multiply(0.0d);
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex1, complex6);
        org.apache.commons.math3.complex.Complex complex15 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math3.complex.Complex complex17 = complex15.tanh();
        boolean boolean19 = complex17.equals((java.lang.Object) true);
        double double20 = complex17.getImaginary();
        org.apache.commons.math3.complex.Complex complex22 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double23 = complex22.getReal();
        org.apache.commons.math3.complex.Complex complex25 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double26 = complex25.getReal();
        boolean boolean27 = org.apache.commons.math3.complex.Complex.equals(complex22, complex25);
        org.apache.commons.math3.complex.Complex complex29 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean31 = org.apache.commons.math3.complex.Complex.equals(complex22, complex29, 10);
        org.apache.commons.math3.complex.Complex complex33 = complex29.pow((double) (byte) 1);
        boolean boolean35 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex17, complex29, (double) (-1));
        org.apache.commons.math3.complex.Complex complex36 = complex6.subtract(complex29);
        org.apache.commons.math3.complex.Complex complex38 = complex29.add((-3.141592653589793d));
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-1.0d) + "'", double23 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-1.0d) + "'", double26 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex38);
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test127");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math3.complex.Complex complex5 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex7 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double8 = complex7.getReal();
        org.apache.commons.math3.complex.Complex complex10 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double11 = complex10.getReal();
        boolean boolean12 = org.apache.commons.math3.complex.Complex.equals(complex7, complex10);
        boolean boolean14 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex5, complex7, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex15 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex16 = complex15.asin();
        org.apache.commons.math3.complex.Complex complex17 = complex15.tanh();
        org.apache.commons.math3.complex.Complex complex18 = complex17.sin();
        boolean boolean19 = complex7.equals((java.lang.Object) complex17);
        org.apache.commons.math3.complex.Complex complex20 = complex1.divide(complex17);
        org.apache.commons.math3.complex.Complex complex21 = complex20.asin();
        org.apache.commons.math3.complex.Complex complex23 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex25 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double26 = complex25.getReal();
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double29 = complex28.getReal();
        boolean boolean30 = org.apache.commons.math3.complex.Complex.equals(complex25, complex28);
        boolean boolean32 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex23, complex25, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex33 = complex23.log();
        org.apache.commons.math3.complex.Complex complex34 = complex23.atan();
        boolean boolean35 = complex20.equals((java.lang.Object) complex23);
        org.apache.commons.math3.complex.Complex complex36 = complex20.sinh();
        org.apache.commons.math3.complex.Complex complex37 = complex36.tan();
        org.apache.commons.math3.complex.Complex complex38 = complex36.acos();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-1.0d) + "'", double11 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-1.0d) + "'", double26 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1.0d) + "'", double29 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test128");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math3.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math3.complex.Complex complex6 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex7 = complex6.sqrt();
        boolean boolean9 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6, (int) (byte) -1);
        org.apache.commons.math3.complex.Complex complex10 = complex3.conjugate();
        org.apache.commons.math3.complex.Complex complex11 = complex10.asin();
        org.apache.commons.math3.complex.Complex complex13 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex14 = complex13.conjugate();
        org.apache.commons.math3.complex.Complex complex15 = complex14.sin();
        org.apache.commons.math3.complex.Complex complex16 = complex11.add(complex14);
        org.apache.commons.math3.complex.Complex complex17 = complex16.sqrt();
        org.apache.commons.math3.complex.Complex complex18 = complex16.sin();
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double21 = complex20.getReal();
        org.apache.commons.math3.complex.Complex complex23 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double24 = complex23.getReal();
        boolean boolean25 = org.apache.commons.math3.complex.Complex.equals(complex20, complex23);
        org.apache.commons.math3.complex.Complex complex27 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean29 = org.apache.commons.math3.complex.Complex.equals(complex20, complex27, 10);
        org.apache.commons.math3.complex.Complex complex30 = complex27.sqrt1z();
        org.apache.commons.math3.complex.Complex complex31 = org.apache.commons.math3.complex.Complex.NaN;
        org.apache.commons.math3.complex.Complex complex33 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double34 = complex33.getReal();
        org.apache.commons.math3.complex.Complex complex36 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math3.complex.Complex complex38 = complex36.tanh();
        boolean boolean40 = complex38.equals((java.lang.Object) true);
        double double41 = complex38.getImaginary();
        org.apache.commons.math3.complex.Complex complex42 = complex38.sinh();
        org.apache.commons.math3.complex.Complex complex44 = complex38.multiply(0.0d);
        boolean boolean45 = org.apache.commons.math3.complex.Complex.equals(complex33, complex38);
        org.apache.commons.math3.complex.Complex complex47 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math3.complex.Complex complex49 = complex47.sqrt1z();
        org.apache.commons.math3.complex.Complex complex50 = complex38.subtract(complex47);
        org.apache.commons.math3.complex.Complex complex51 = complex50.acos();
        boolean boolean52 = org.apache.commons.math3.complex.Complex.equals(complex31, complex50);
        org.apache.commons.math3.complex.Complex complex53 = complex30.divide(complex50);
        org.apache.commons.math3.complex.Complex complex54 = complex53.sqrt1z();
        org.apache.commons.math3.complex.Complex complex55 = complex53.acos();
        org.apache.commons.math3.complex.Complex complex56 = complex53.acos();
        org.apache.commons.math3.complex.Complex complex57 = complex56.cosh();
        org.apache.commons.math3.complex.Complex complex58 = complex56.acos();
        org.apache.commons.math3.complex.Complex complex59 = complex16.pow(complex58);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1.0d) + "'", double21 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1.0d) + "'", double24 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test129");
        org.apache.commons.math3.complex.Complex complex0 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double3 = complex2.getReal();
        org.apache.commons.math3.complex.Complex complex5 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math3.complex.Complex complex7 = complex5.tanh();
        boolean boolean9 = complex7.equals((java.lang.Object) true);
        double double10 = complex7.getImaginary();
        org.apache.commons.math3.complex.Complex complex11 = complex7.sinh();
        org.apache.commons.math3.complex.Complex complex13 = complex7.multiply(0.0d);
        boolean boolean14 = org.apache.commons.math3.complex.Complex.equals(complex2, complex7);
        org.apache.commons.math3.complex.Complex complex16 = complex2.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex17 = complex0.subtract(complex16);
        org.apache.commons.math3.complex.Complex complex19 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math3.complex.Complex complex21 = complex0.add(complex19);
        org.apache.commons.math3.complex.Complex complex22 = complex21.negate();
        org.apache.commons.math3.complex.Complex complex24 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double27 = complex26.getReal();
        org.apache.commons.math3.complex.Complex complex29 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double30 = complex29.getReal();
        boolean boolean31 = org.apache.commons.math3.complex.Complex.equals(complex26, complex29);
        boolean boolean33 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex24, complex26, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex34 = complex24.log();
        boolean boolean36 = org.apache.commons.math3.complex.Complex.equals(complex21, complex34, (int) (byte) 100);
        org.apache.commons.math3.complex.Complex complex38 = complex34.multiply(0);
        boolean boolean39 = complex38.isInfinite();
        org.apache.commons.math3.complex.Complex complex40 = complex38.reciprocal();
        org.apache.commons.math3.complex.Complex complex42 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex44 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double45 = complex44.getReal();
        org.apache.commons.math3.complex.Complex complex47 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double48 = complex47.getReal();
        boolean boolean49 = org.apache.commons.math3.complex.Complex.equals(complex44, complex47);
        boolean boolean51 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex42, complex44, (double) 0.0f);
        java.lang.String str52 = complex42.toString();
        org.apache.commons.math3.complex.Complex complex53 = complex42.cosh();
        org.apache.commons.math3.complex.Complex complex54 = complex40.add(complex42);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1.0d) + "'", double27 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1.0d) + "'", double30 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1.0d) + "'", double45 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-1.0d) + "'", double48 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + str52 + "' != '" + "(-1.0, 0.0)" + "'", str52.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test130");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equals(complex1, complex8, 10);
        org.apache.commons.math3.complex.Complex complex11 = complex8.sin();
        org.apache.commons.math3.complex.Complex complex12 = complex8.atan();
        org.apache.commons.math3.complex.Complex complex13 = complex8.log();
        org.apache.commons.math3.complex.Complex complex14 = complex13.negate();
        org.apache.commons.math3.complex.Complex complex15 = complex14.sinh();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test131");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equals(complex1, complex8, 10);
        org.apache.commons.math3.complex.Complex complex12 = complex1.multiply(10);
        org.apache.commons.math3.complex.Complex complex13 = complex1.reciprocal();
        org.apache.commons.math3.complex.Complex complex15 = complex1.divide((double) (-1.0f));
        org.apache.commons.math3.complex.Complex complex17 = complex1.add(1.718281828459045d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex17);
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test132");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        double double3 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = complex1.tan();
        org.apache.commons.math3.complex.Complex complex5 = complex1.exp();
        org.apache.commons.math3.complex.Complex complex6 = complex5.negate();
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex10 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double11 = complex10.getReal();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        boolean boolean15 = org.apache.commons.math3.complex.Complex.equals(complex10, complex13);
        boolean boolean17 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex8, complex10, (double) 0.0f);
        java.lang.String str18 = complex8.toString();
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double21 = complex20.getReal();
        org.apache.commons.math3.complex.Complex complex23 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double24 = complex23.getReal();
        boolean boolean25 = org.apache.commons.math3.complex.Complex.equals(complex20, complex23);
        org.apache.commons.math3.complex.Complex complex27 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean29 = org.apache.commons.math3.complex.Complex.equals(complex20, complex27, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex30 = complex8.add(complex27);
        boolean boolean31 = complex5.equals((java.lang.Object) complex27);
        org.apache.commons.math3.complex.Complex complex33 = complex5.divide(10.000124996093955d);
        org.apache.commons.math3.complex.Complex complex34 = complex5.exp();
        org.apache.commons.math3.complex.Complex complex35 = null;
        try {
            org.apache.commons.math3.complex.Complex complex36 = complex5.multiply(complex35);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
        }
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test133");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math3.complex.Complex complex6 = complex4.tanh();
        boolean boolean8 = complex6.equals((java.lang.Object) true);
        double double9 = complex6.getImaginary();
        org.apache.commons.math3.complex.Complex complex10 = complex6.sinh();
        org.apache.commons.math3.complex.Complex complex12 = complex6.multiply(0.0d);
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex1, complex6);
        org.apache.commons.math3.complex.Complex complex15 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math3.complex.Complex complex17 = complex15.sqrt1z();
        org.apache.commons.math3.complex.Complex complex18 = complex6.subtract(complex15);
        org.apache.commons.math3.complex.Complex complex19 = complex18.reciprocal();
        org.apache.commons.math3.complex.Complex complex20 = complex19.acos();
        double double21 = complex20.getArgument();
        org.apache.commons.math3.complex.Complex complex23 = complex20.multiply((double) (byte) 1);
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (short) 100, (double) (short) -1);
        org.apache.commons.math3.complex.Complex complex27 = complex26.tan();
        org.apache.commons.math3.complex.Complex complex29 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double30 = complex29.getReal();
        org.apache.commons.math3.complex.Complex complex32 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double33 = complex32.getReal();
        boolean boolean34 = org.apache.commons.math3.complex.Complex.equals(complex29, complex32);
        org.apache.commons.math3.complex.Complex complex36 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean38 = org.apache.commons.math3.complex.Complex.equals(complex29, complex36, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex40 = new org.apache.commons.math3.complex.Complex((double) (short) 10);
        double double41 = complex40.getReal();
        boolean boolean42 = complex29.equals((java.lang.Object) complex40);
        org.apache.commons.math3.complex.Complex complex43 = complex29.log();
        org.apache.commons.math3.complex.Complex complex44 = complex27.multiply(complex43);
        org.apache.commons.math3.complex.Complex complex45 = complex20.pow(complex44);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertEquals((double) double21, Double.NaN, 0);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1.0d) + "'", double30 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-1.0d) + "'", double33 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 10.0d + "'", double41 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test134");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex9 = complex3.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double15 = complex14.getReal();
        boolean boolean16 = org.apache.commons.math3.complex.Complex.equals(complex11, complex14);
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean20 = org.apache.commons.math3.complex.Complex.equals(complex11, complex18, 10);
        org.apache.commons.math3.complex.Complex complex22 = complex18.pow((double) (byte) 1);
        boolean boolean24 = org.apache.commons.math3.complex.Complex.equals(complex3, complex22, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex26 = complex3.divide(3.136592820246461d);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(complex26);
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test135");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.conjugate();
        double double3 = complex1.getImaginary();
        java.util.List<org.apache.commons.math3.complex.Complex> complexList5 = complex1.nthRoot(1);
        double double6 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex9 = org.apache.commons.math3.complex.Complex.valueOf((double) (short) 10, (double) 100);
        java.lang.Class<?> wildcardClass10 = complex9.getClass();
        double double11 = complex9.getImaginary();
        org.apache.commons.math3.complex.Complex complex13 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math3.complex.Complex complex15 = complex13.tanh();
        double double16 = complex15.abs();
        org.apache.commons.math3.complex.Complex complex17 = complex15.exp();
        org.apache.commons.math3.complex.Complex complex18 = complex17.negate();
        org.apache.commons.math3.complex.Complex complex20 = complex18.pow((-0.0d));
        org.apache.commons.math3.complex.Complex complex21 = complex20.tan();
        org.apache.commons.math3.complex.Complex complex22 = complex9.multiply(complex20);
        org.apache.commons.math3.complex.Complex complex23 = complex20.asin();
        boolean boolean24 = org.apache.commons.math3.complex.Complex.equals(complex1, complex23);
        boolean boolean25 = complex23.isInfinite();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(complexList5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test136");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equals(complex1, complex8, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex12 = new org.apache.commons.math3.complex.Complex((double) (short) 10);
        double double13 = complex12.getReal();
        boolean boolean14 = complex1.equals((java.lang.Object) complex12);
        org.apache.commons.math3.complex.Complex complex15 = complex12.sin();
        org.apache.commons.math3.complex.Complex complex16 = complex12.exp();
        org.apache.commons.math3.complex.Complex complex17 = complex16.cosh();
        org.apache.commons.math3.complex.Complex complex18 = complex17.tan();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test137");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        double double3 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = complex1.tan();
        org.apache.commons.math3.complex.Complex complex5 = complex1.sinh();
        double double6 = complex1.abs();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test138");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex11 = complex1.log();
        org.apache.commons.math3.complex.Complex complex12 = complex11.asin();
        org.apache.commons.math3.complex.Complex complex13 = complex11.sin();
        org.apache.commons.math3.complex.Complex complex14 = complex13.sqrt();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test139");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = complex1.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex5 = complex1.log();
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) 10, (-2.0d));
        org.apache.commons.math3.complex.Complex complex9 = complex5.subtract(complex8);
        org.apache.commons.math3.complex.Complex complex10 = complex5.sqrt1z();
        org.apache.commons.math3.complex.Complex complex11 = complex5.sqrt();
        org.apache.commons.math3.complex.Complex complex13 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math3.complex.Complex complex15 = complex13.sqrt1z();
        org.apache.commons.math3.complex.Complex complex16 = complex15.reciprocal();
        org.apache.commons.math3.complex.Complex complex17 = complex11.multiply(complex16);
        org.apache.commons.math3.complex.Complex complex18 = complex16.acos();
        org.apache.commons.math3.complex.Complex complex19 = complex16.cos();
        org.apache.commons.math3.complex.Complex complex21 = complex16.add((-0.03125d));
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex21);
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test140");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex9 = complex3.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        boolean boolean20 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex11, complex13, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex22 = complex13.multiply(1);
        org.apache.commons.math3.complex.Complex complex23 = complex13.conjugate();
        boolean boolean25 = org.apache.commons.math3.complex.Complex.equals(complex9, complex13, (int) (short) 100);
        org.apache.commons.math3.complex.Complex complex27 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex28 = complex27.sqrt();
        org.apache.commons.math3.complex.Complex complex29 = complex27.tanh();
        double double30 = complex29.abs();
        org.apache.commons.math3.complex.Complex complex31 = complex29.exp();
        org.apache.commons.math3.complex.Complex complex32 = complex31.negate();
        org.apache.commons.math3.complex.Complex complex33 = complex31.sin();
        org.apache.commons.math3.complex.Complex complex34 = complex9.subtract(complex33);
        org.apache.commons.math3.complex.Complex complex36 = complex33.divide(0.0d);
        boolean boolean37 = complex36.isNaN();
        org.apache.commons.math3.complex.Complex complex39 = complex36.multiply((double) 10);
        org.apache.commons.math3.complex.Complex complex40 = complex39.conjugate();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test141");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex(100.0d, (double) (short) 100);
        double double3 = complex2.getReal();
        org.apache.commons.math3.complex.Complex complex6 = org.apache.commons.math3.complex.Complex.valueOf(1.9643867237284715E-15d, (double) (byte) 1);
        org.apache.commons.math3.complex.Complex complex7 = complex2.pow(complex6);
        org.apache.commons.math3.complex.Complex complex8 = complex2.sinh();
        org.apache.commons.math3.complex.Complex complex9 = complex2.cos();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 100.0d + "'", double3 == 100.0d);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test142");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.cos();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        org.apache.commons.math3.complex.Complex complex9 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double10 = complex9.getReal();
        boolean boolean11 = org.apache.commons.math3.complex.Complex.equals(complex6, complex9);
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex4, complex6, (double) 0.0f);
        java.lang.String str14 = complex4.toString();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        org.apache.commons.math3.complex.Complex complex19 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double20 = complex19.getReal();
        boolean boolean21 = org.apache.commons.math3.complex.Complex.equals(complex16, complex19);
        org.apache.commons.math3.complex.Complex complex23 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean25 = org.apache.commons.math3.complex.Complex.equals(complex16, complex23, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex26 = complex4.add(complex23);
        java.lang.String str27 = complex23.toString();
        org.apache.commons.math3.complex.Complex complex29 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex30 = complex23.divide(complex29);
        org.apache.commons.math3.complex.ComplexField complexField31 = complex29.getField();
        boolean boolean33 = org.apache.commons.math3.complex.Complex.equals(complex1, complex29, (-1));
        boolean boolean34 = complex29.isInfinite();
        org.apache.commons.math3.complex.Complex complex35 = complex29.sqrt1z();
        org.apache.commons.math3.complex.Complex complex36 = complex35.sqrt();
        org.apache.commons.math3.complex.Complex complex37 = complex36.atan();
        org.apache.commons.math3.complex.Complex complex38 = complex36.tan();
        org.apache.commons.math3.complex.Complex complex39 = complex38.cos();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "(-1.0, 0.0)" + "'", str14.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1.0d) + "'", double20 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "(-1.0, 0.0)" + "'", str27.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexField31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test143");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex9 = complex3.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double15 = complex14.getReal();
        boolean boolean16 = org.apache.commons.math3.complex.Complex.equals(complex11, complex14);
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean20 = org.apache.commons.math3.complex.Complex.equals(complex11, complex18, 10);
        org.apache.commons.math3.complex.Complex complex22 = complex18.pow((double) (byte) 1);
        boolean boolean24 = org.apache.commons.math3.complex.Complex.equals(complex3, complex22, (int) (short) -1);
        org.apache.commons.math3.complex.ComplexField complexField25 = complex3.getField();
        org.apache.commons.math3.complex.Complex complex26 = complex3.exp();
        org.apache.commons.math3.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math3.complex.Complex complex28 = complex27.tan();
        org.apache.commons.math3.complex.Complex complex30 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex31 = complex30.sqrt();
        org.apache.commons.math3.complex.Complex complex32 = complex30.tanh();
        org.apache.commons.math3.complex.Complex complex33 = complex32.sin();
        org.apache.commons.math3.complex.Complex complex35 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex36 = complex35.sqrt();
        boolean boolean38 = org.apache.commons.math3.complex.Complex.equals(complex32, complex35, (int) (byte) -1);
        org.apache.commons.math3.complex.Complex complex39 = complex32.conjugate();
        double double40 = complex32.abs();
        org.apache.commons.math3.complex.Complex complex41 = complex27.pow(complex32);
        org.apache.commons.math3.complex.Complex complex43 = complex41.pow(1.772453850905516d);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(complexField25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex43);
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test144");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        java.lang.String str11 = complex1.toString();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex23 = complex1.add(complex20);
        org.apache.commons.math3.complex.Complex complex24 = org.apache.commons.math3.complex.Complex.NaN;
        org.apache.commons.math3.complex.Complex complex25 = complex20.subtract(complex24);
        org.apache.commons.math3.complex.Complex complex27 = complex20.subtract((double) 100.0f);
        org.apache.commons.math3.complex.Complex complex29 = complex27.multiply((int) (byte) -1);
        org.apache.commons.math3.complex.Complex complex30 = complex27.asin();
        org.apache.commons.math3.complex.Complex complex31 = complex30.cos();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "(-1.0, 0.0)" + "'", str11.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test145");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex8 = complex3.cosh();
        double double9 = complex3.getImaginary();
        double double10 = complex3.abs();
        org.apache.commons.math3.complex.Complex complex12 = complex3.multiply((-1));
        org.apache.commons.math3.complex.Complex complex13 = complex12.sinh();
        org.apache.commons.math3.complex.Complex complex14 = complex13.cosh();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test146");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) 0L);
        org.apache.commons.math3.complex.Complex complex2 = complex1.exp();
        org.apache.commons.math3.complex.Complex complex3 = complex2.negate();
        org.apache.commons.math3.complex.Complex complex5 = complex3.multiply((-1.5707963267948966d));
        java.lang.Class<?> wildcardClass6 = complex3.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test147");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf((double) 0, 3.136592820246461d);
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        org.apache.commons.math3.complex.Complex complex7 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double8 = complex7.getReal();
        boolean boolean9 = org.apache.commons.math3.complex.Complex.equals(complex4, complex7);
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex4, complex11, 10);
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (short) 100, (double) (short) -1);
        boolean boolean17 = complex4.equals((java.lang.Object) complex16);
        org.apache.commons.math3.complex.Complex complex18 = complex16.tan();
        org.apache.commons.math3.complex.Complex complex19 = complex2.divide(complex16);
        org.apache.commons.math3.complex.ComplexField complexField20 = complex19.getField();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complexField20);
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test148");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math3.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math3.complex.Complex complex6 = complex4.subtract((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex7 = complex4.log();
        org.apache.commons.math3.complex.Complex complex9 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math3.complex.Complex complex11 = complex9.tanh();
        boolean boolean13 = complex11.equals((java.lang.Object) true);
        double double14 = complex11.getImaginary();
        org.apache.commons.math3.complex.Complex complex15 = complex11.sinh();
        org.apache.commons.math3.complex.Complex complex17 = complex11.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex19 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex21 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double22 = complex21.getReal();
        org.apache.commons.math3.complex.Complex complex24 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double25 = complex24.getReal();
        boolean boolean26 = org.apache.commons.math3.complex.Complex.equals(complex21, complex24);
        boolean boolean28 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex19, complex21, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex29 = complex19.log();
        org.apache.commons.math3.complex.Complex complex31 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double32 = complex31.getReal();
        org.apache.commons.math3.complex.Complex complex34 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double35 = complex34.getReal();
        boolean boolean36 = org.apache.commons.math3.complex.Complex.equals(complex31, complex34);
        org.apache.commons.math3.complex.Complex complex38 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean40 = org.apache.commons.math3.complex.Complex.equals(complex31, complex38, 10);
        org.apache.commons.math3.complex.Complex complex42 = complex38.pow((double) (byte) 1);
        boolean boolean43 = org.apache.commons.math3.complex.Complex.equals(complex19, complex42);
        org.apache.commons.math3.complex.Complex complex44 = complex19.reciprocal();
        boolean boolean46 = org.apache.commons.math3.complex.Complex.equals(complex17, complex19, (double) (byte) 1);
        org.apache.commons.math3.complex.Complex complex47 = complex17.conjugate();
        org.apache.commons.math3.complex.ComplexField complexField48 = complex17.getField();
        org.apache.commons.math3.complex.Complex complex49 = complex17.asin();
        double double50 = complex49.getImaginary();
        org.apache.commons.math3.complex.Complex complex51 = complex7.add(complex49);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-1.0d) + "'", double32 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-1.0d) + "'", double35 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complexField48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-0.0d) + "'", double50 == (-0.0d));
        org.junit.Assert.assertNotNull(complex51);
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test149");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        java.lang.String str11 = complex1.toString();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex23 = complex1.add(complex20);
        org.apache.commons.math3.complex.Complex complex24 = org.apache.commons.math3.complex.Complex.NaN;
        org.apache.commons.math3.complex.Complex complex25 = complex20.subtract(complex24);
        double double26 = complex24.getArgument();
        org.apache.commons.math3.complex.Complex complex27 = complex24.sin();
        org.apache.commons.math3.complex.Complex complex28 = complex27.sqrt();
        org.apache.commons.math3.complex.Complex complex30 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double31 = complex30.getReal();
        org.apache.commons.math3.complex.Complex complex33 = complex30.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex35 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double36 = complex35.getReal();
        org.apache.commons.math3.complex.Complex complex37 = complex33.divide(complex35);
        boolean boolean39 = org.apache.commons.math3.complex.Complex.equals(complex27, complex37, (int) (byte) -1);
        org.apache.commons.math3.complex.Complex complex40 = complex37.tanh();
        org.apache.commons.math3.complex.Complex complex42 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math3.complex.Complex complex44 = complex42.tanh();
        org.apache.commons.math3.complex.Complex complex45 = complex42.asin();
        org.apache.commons.math3.complex.Complex complex46 = complex42.cos();
        org.apache.commons.math3.complex.Complex complex47 = complex42.tanh();
        org.apache.commons.math3.complex.Complex complex48 = complex42.log();
        boolean boolean50 = org.apache.commons.math3.complex.Complex.equals(complex40, complex42, 0.0d);
        double double51 = complex40.getImaginary();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "(-1.0, 0.0)" + "'", str11.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals((double) double26, Double.NaN, 0);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-1.0d) + "'", double31 == (-1.0d));
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-1.0d) + "'", double36 == (-1.0d));
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-0.0d) + "'", double51 == (-0.0d));
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test150");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex(100.0d, (double) (short) 100);
        org.apache.commons.math3.complex.Complex complex4 = complex2.multiply((double) 100);
        org.apache.commons.math3.complex.Complex complex7 = org.apache.commons.math3.complex.Complex.valueOf(100.0d, (double) (short) 0);
        org.apache.commons.math3.complex.Complex complex9 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double10 = complex9.getReal();
        org.apache.commons.math3.complex.Complex complex12 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double13 = complex12.getReal();
        boolean boolean14 = org.apache.commons.math3.complex.Complex.equals(complex9, complex12);
        org.apache.commons.math3.complex.Complex complex15 = complex12.sqrt();
        org.apache.commons.math3.complex.Complex complex17 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math3.complex.Complex complex19 = complex17.tanh();
        boolean boolean21 = complex19.equals((java.lang.Object) true);
        double double22 = complex19.getImaginary();
        org.apache.commons.math3.complex.Complex complex23 = complex19.sinh();
        org.apache.commons.math3.complex.Complex complex24 = complex19.cosh();
        double double25 = complex19.getImaginary();
        org.apache.commons.math3.complex.Complex complex26 = complex12.add(complex19);
        org.apache.commons.math3.complex.Complex complex27 = complex7.add(complex19);
        org.apache.commons.math3.complex.Complex complex29 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math3.complex.Complex complex31 = complex29.tanh();
        boolean boolean33 = complex31.equals((java.lang.Object) true);
        double double34 = complex31.getImaginary();
        org.apache.commons.math3.complex.Complex complex35 = complex31.sinh();
        org.apache.commons.math3.complex.Complex complex36 = complex27.multiply(complex35);
        boolean boolean38 = org.apache.commons.math3.complex.Complex.equals(complex4, complex27, (int) '4');
        double double39 = complex27.abs();
        org.apache.commons.math3.complex.Complex complex42 = org.apache.commons.math3.complex.Complex.valueOf((double) 10.0f, (double) (-1));
        org.apache.commons.math3.complex.Complex complex43 = complex27.subtract(complex42);
        org.apache.commons.math3.complex.Complex complex45 = complex42.divide((double) 0);
        org.apache.commons.math3.complex.ComplexField complexField46 = complex45.getField();
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1.0d) + "'", double13 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complexField46);
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test151");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math3.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math3.complex.Complex complex6 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex7 = complex6.sqrt();
        boolean boolean9 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6, (int) (byte) -1);
        org.apache.commons.math3.complex.Complex complex10 = complex3.conjugate();
        org.apache.commons.math3.complex.Complex complex11 = complex10.asin();
        org.apache.commons.math3.complex.Complex complex13 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex14 = complex13.conjugate();
        org.apache.commons.math3.complex.Complex complex15 = complex14.sin();
        org.apache.commons.math3.complex.Complex complex16 = complex11.add(complex14);
        org.apache.commons.math3.complex.Complex complex17 = complex14.tan();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test152");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex9 = complex3.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex10 = complex9.sqrt();
        double double11 = complex10.abs();
        org.apache.commons.math3.complex.Complex complex12 = complex10.asin();
        java.lang.Class<?> wildcardClass13 = complex10.getClass();
        org.apache.commons.math3.complex.Complex complex15 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double16 = complex15.getReal();
        double double17 = complex15.getReal();
        org.apache.commons.math3.complex.Complex complex18 = complex15.tan();
        boolean boolean19 = complex15.isInfinite();
        org.apache.commons.math3.complex.Complex complex20 = complex15.acos();
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex10, complex20, (-5.436563656918094d));
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1.0d) + "'", double16 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test153");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double9 = complex8.getReal();
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex8, complex11);
        org.apache.commons.math3.complex.Complex complex14 = complex11.sqrt();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        org.apache.commons.math3.complex.Complex complex19 = complex16.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex20 = complex14.pow(complex19);
        org.apache.commons.math3.complex.Complex complex21 = complex4.multiply(complex20);
        org.apache.commons.math3.complex.Complex complex22 = complex20.sqrt1z();
        org.apache.commons.math3.complex.Complex complex23 = complex20.log();
        org.apache.commons.math3.complex.Complex complex25 = complex20.divide((-1.9643867237284715E-15d));
        org.apache.commons.math3.complex.Complex complex27 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex29 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double30 = complex29.getReal();
        org.apache.commons.math3.complex.Complex complex32 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double33 = complex32.getReal();
        boolean boolean34 = org.apache.commons.math3.complex.Complex.equals(complex29, complex32);
        boolean boolean36 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex27, complex29, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex37 = complex27.log();
        org.apache.commons.math3.complex.Complex complex39 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double40 = complex39.getReal();
        org.apache.commons.math3.complex.Complex complex42 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double43 = complex42.getReal();
        boolean boolean44 = org.apache.commons.math3.complex.Complex.equals(complex39, complex42);
        org.apache.commons.math3.complex.Complex complex46 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean48 = org.apache.commons.math3.complex.Complex.equals(complex39, complex46, 10);
        org.apache.commons.math3.complex.Complex complex50 = complex46.pow((double) (byte) 1);
        boolean boolean51 = org.apache.commons.math3.complex.Complex.equals(complex27, complex50);
        org.apache.commons.math3.complex.Complex complex52 = complex27.reciprocal();
        org.apache.commons.math3.complex.Complex complex53 = complex27.cosh();
        org.apache.commons.math3.complex.Complex complex54 = complex53.acos();
        boolean boolean55 = complex54.isInfinite();
        boolean boolean57 = org.apache.commons.math3.complex.Complex.equals(complex20, complex54, (int) (byte) -1);
        org.apache.commons.math3.complex.Complex complex58 = complex54.exp();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1.0d) + "'", double30 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-1.0d) + "'", double33 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-1.0d) + "'", double40 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-1.0d) + "'", double43 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(complex58);
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test154");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf(100.0d, (double) (short) 0);
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        org.apache.commons.math3.complex.Complex complex7 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double8 = complex7.getReal();
        boolean boolean9 = org.apache.commons.math3.complex.Complex.equals(complex4, complex7);
        org.apache.commons.math3.complex.Complex complex10 = complex7.sqrt();
        org.apache.commons.math3.complex.Complex complex12 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math3.complex.Complex complex14 = complex12.tanh();
        boolean boolean16 = complex14.equals((java.lang.Object) true);
        double double17 = complex14.getImaginary();
        org.apache.commons.math3.complex.Complex complex18 = complex14.sinh();
        org.apache.commons.math3.complex.Complex complex19 = complex14.cosh();
        double double20 = complex14.getImaginary();
        org.apache.commons.math3.complex.Complex complex21 = complex7.add(complex14);
        org.apache.commons.math3.complex.Complex complex22 = complex2.add(complex14);
        org.apache.commons.math3.complex.Complex complex24 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex25 = complex24.sqrt();
        org.apache.commons.math3.complex.Complex complex26 = complex24.tanh();
        boolean boolean28 = complex26.equals((java.lang.Object) true);
        double double29 = complex26.getImaginary();
        org.apache.commons.math3.complex.Complex complex30 = complex26.sinh();
        org.apache.commons.math3.complex.Complex complex31 = complex22.multiply(complex30);
        org.apache.commons.math3.complex.Complex complex33 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double34 = complex33.getReal();
        org.apache.commons.math3.complex.Complex complex36 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double37 = complex36.getReal();
        boolean boolean38 = org.apache.commons.math3.complex.Complex.equals(complex33, complex36);
        org.apache.commons.math3.complex.Complex complex40 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean42 = org.apache.commons.math3.complex.Complex.equals(complex33, complex40, 10);
        org.apache.commons.math3.complex.Complex complex44 = complex40.pow((double) (byte) 1);
        org.apache.commons.math3.complex.Complex complex45 = complex30.divide(complex40);
        org.apache.commons.math3.complex.ComplexField complexField46 = complex45.getField();
        java.util.List<org.apache.commons.math3.complex.Complex> complexList48 = complex45.nthRoot((int) (short) 100);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + (-1.0d) + "'", double37 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complexField46);
        org.junit.Assert.assertNotNull(complexList48);
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test155");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equals(complex1, complex8, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex12 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double15 = complex14.getReal();
        org.apache.commons.math3.complex.Complex complex17 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double18 = complex17.getReal();
        boolean boolean19 = org.apache.commons.math3.complex.Complex.equals(complex14, complex17);
        boolean boolean21 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex12, complex14, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex23 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex25 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double26 = complex25.getReal();
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double29 = complex28.getReal();
        boolean boolean30 = org.apache.commons.math3.complex.Complex.equals(complex25, complex28);
        boolean boolean32 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex23, complex25, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex33 = complex23.log();
        org.apache.commons.math3.complex.Complex complex35 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double36 = complex35.getReal();
        org.apache.commons.math3.complex.Complex complex38 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double39 = complex38.getReal();
        boolean boolean40 = org.apache.commons.math3.complex.Complex.equals(complex35, complex38);
        org.apache.commons.math3.complex.Complex complex42 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean44 = org.apache.commons.math3.complex.Complex.equals(complex35, complex42, 10);
        org.apache.commons.math3.complex.Complex complex46 = complex42.pow((double) (byte) 1);
        boolean boolean47 = org.apache.commons.math3.complex.Complex.equals(complex23, complex46);
        boolean boolean48 = complex14.equals((java.lang.Object) complex23);
        boolean boolean50 = org.apache.commons.math3.complex.Complex.equals(complex1, complex23, (int) (byte) 100);
        org.apache.commons.math3.complex.Complex complex51 = complex1.cos();
        org.apache.commons.math3.complex.Complex complex53 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex55 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double56 = complex55.getReal();
        org.apache.commons.math3.complex.Complex complex58 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double59 = complex58.getReal();
        boolean boolean60 = org.apache.commons.math3.complex.Complex.equals(complex55, complex58);
        boolean boolean62 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex53, complex55, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex64 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double65 = complex64.getReal();
        org.apache.commons.math3.complex.Complex complex67 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex68 = complex67.sqrt();
        org.apache.commons.math3.complex.Complex complex69 = complex67.tanh();
        boolean boolean71 = complex69.equals((java.lang.Object) true);
        double double72 = complex69.getImaginary();
        org.apache.commons.math3.complex.Complex complex73 = complex69.sinh();
        org.apache.commons.math3.complex.Complex complex75 = complex69.multiply(0.0d);
        boolean boolean76 = org.apache.commons.math3.complex.Complex.equals(complex64, complex69);
        org.apache.commons.math3.complex.Complex complex78 = complex64.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex80 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex81 = complex80.sqrt();
        org.apache.commons.math3.complex.Complex complex82 = complex80.tanh();
        boolean boolean84 = complex82.equals((java.lang.Object) true);
        double double85 = complex82.getImaginary();
        org.apache.commons.math3.complex.Complex complex86 = complex78.add(complex82);
        boolean boolean88 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex55, complex86, (double) 10);
        org.apache.commons.math3.complex.Complex complex89 = complex86.exp();
        double double90 = complex89.abs();
        boolean boolean91 = org.apache.commons.math3.complex.Complex.equals(complex1, complex89);
        org.apache.commons.math3.complex.Complex complex92 = complex1.sin();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.0d) + "'", double18 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-1.0d) + "'", double26 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1.0d) + "'", double29 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-1.0d) + "'", double36 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-1.0d) + "'", double39 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + (-1.0d) + "'", double56 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + (-1.0d) + "'", double59 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + (-1.0d) + "'", double65 == (-1.0d));
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 2.718281828459045d + "'", double90 == 2.718281828459045d);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(complex92);
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test156");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) ' ');
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math3.complex.Complex complex8 = complex6.tanh();
        boolean boolean10 = complex8.equals((java.lang.Object) true);
        double double11 = complex8.getImaginary();
        org.apache.commons.math3.complex.Complex complex12 = complex8.sinh();
        org.apache.commons.math3.complex.Complex complex14 = complex8.multiply(0.0d);
        boolean boolean15 = org.apache.commons.math3.complex.Complex.equals(complex3, complex8);
        org.apache.commons.math3.complex.Complex complex16 = complex1.divide(complex8);
        org.apache.commons.math3.complex.Complex complex17 = complex8.cos();
        org.apache.commons.math3.complex.Complex complex18 = complex8.conjugate();
        org.apache.commons.math3.complex.Complex complex19 = complex8.cosh();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test157");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math3.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math3.complex.ComplexField complexField5 = complex3.getField();
        java.lang.String str6 = complex3.toString();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complexField5);
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(0.0, 0.0)" + "'", str6.equals("(0.0, 0.0)"));
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test158");
        org.apache.commons.math3.complex.Complex complex0 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double3 = complex2.getReal();
        org.apache.commons.math3.complex.Complex complex5 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math3.complex.Complex complex7 = complex5.tanh();
        boolean boolean9 = complex7.equals((java.lang.Object) true);
        double double10 = complex7.getImaginary();
        org.apache.commons.math3.complex.Complex complex11 = complex7.sinh();
        org.apache.commons.math3.complex.Complex complex13 = complex7.multiply(0.0d);
        boolean boolean14 = org.apache.commons.math3.complex.Complex.equals(complex2, complex7);
        org.apache.commons.math3.complex.Complex complex16 = complex2.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex17 = complex0.subtract(complex16);
        org.apache.commons.math3.complex.Complex complex19 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double20 = complex19.getReal();
        double double21 = complex19.getReal();
        org.apache.commons.math3.complex.Complex complex22 = complex19.tan();
        org.apache.commons.math3.complex.Complex complex23 = complex16.pow(complex22);
        org.apache.commons.math3.complex.Complex complex25 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex27 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double28 = complex27.getReal();
        org.apache.commons.math3.complex.Complex complex30 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double31 = complex30.getReal();
        boolean boolean32 = org.apache.commons.math3.complex.Complex.equals(complex27, complex30);
        boolean boolean34 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex25, complex27, (double) 0.0f);
        java.lang.String str35 = complex25.toString();
        org.apache.commons.math3.complex.Complex complex37 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double38 = complex37.getReal();
        org.apache.commons.math3.complex.Complex complex40 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double41 = complex40.getReal();
        boolean boolean42 = org.apache.commons.math3.complex.Complex.equals(complex37, complex40);
        org.apache.commons.math3.complex.Complex complex44 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean46 = org.apache.commons.math3.complex.Complex.equals(complex37, complex44, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex47 = complex25.add(complex44);
        java.lang.String str48 = complex44.toString();
        boolean boolean50 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex23, complex44, (double) (-1L));
        org.apache.commons.math3.complex.Complex complex51 = complex23.sqrt();
        org.apache.commons.math3.complex.Complex complex53 = complex23.multiply((-1));
        org.apache.commons.math3.complex.Complex complex55 = complex23.add(2.718281828459045d);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1.0d) + "'", double20 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1.0d) + "'", double21 == (-1.0d));
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-1.0d) + "'", double28 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-1.0d) + "'", double31 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "(-1.0, 0.0)" + "'", str35.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-1.0d) + "'", double38 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-1.0d) + "'", double41 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "(-1.0, 0.0)" + "'", str48.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex55);
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test159");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equals(complex1, complex8, 10);
        org.apache.commons.math3.complex.Complex complex12 = complex1.multiply(10);
        org.apache.commons.math3.complex.Complex complex13 = complex1.cosh();
        org.apache.commons.math3.complex.Complex complex15 = complex13.add((double) (-1));
        org.apache.commons.math3.complex.Complex complex16 = complex15.exp();
        org.apache.commons.math3.complex.Complex complex17 = complex16.acos();
        org.apache.commons.math3.complex.Complex complex18 = complex16.cosh();
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex22 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double23 = complex22.getReal();
        org.apache.commons.math3.complex.Complex complex25 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double26 = complex25.getReal();
        boolean boolean27 = org.apache.commons.math3.complex.Complex.equals(complex22, complex25);
        boolean boolean29 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex20, complex22, (double) 0.0f);
        java.lang.String str30 = complex20.toString();
        org.apache.commons.math3.complex.Complex complex32 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double33 = complex32.getReal();
        org.apache.commons.math3.complex.Complex complex35 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double36 = complex35.getReal();
        boolean boolean37 = org.apache.commons.math3.complex.Complex.equals(complex32, complex35);
        org.apache.commons.math3.complex.Complex complex39 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean41 = org.apache.commons.math3.complex.Complex.equals(complex32, complex39, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex42 = complex20.add(complex39);
        java.lang.String str43 = complex39.toString();
        org.apache.commons.math3.complex.Complex complex45 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex46 = complex39.divide(complex45);
        org.apache.commons.math3.complex.Complex complex47 = complex39.tanh();
        org.apache.commons.math3.complex.Complex complex49 = complex47.multiply((double) '#');
        org.apache.commons.math3.complex.Complex complex50 = complex47.sinh();
        org.apache.commons.math3.complex.Complex complex51 = complex18.pow(complex50);
        double double52 = complex51.getReal();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-1.0d) + "'", double23 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-1.0d) + "'", double26 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "(-1.0, 0.0)" + "'", str30.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-1.0d) + "'", double33 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-1.0d) + "'", double36 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "(-1.0, 0.0)" + "'", str43.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.4117576726464195d + "'", double52 == 0.4117576726464195d);
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test160");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex11 = complex1.exp();
        org.apache.commons.math3.complex.Complex complex13 = complex1.add((double) (byte) 0);
        org.apache.commons.math3.complex.Complex complex15 = complex1.add(99.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex15);
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test161");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math3.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math3.complex.Complex complex6 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex7 = complex6.sqrt();
        boolean boolean9 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6, (int) (byte) -1);
        org.apache.commons.math3.complex.Complex complex10 = complex3.cosh();
        org.apache.commons.math3.complex.Complex complex12 = complex10.multiply(10);
        org.apache.commons.math3.complex.Complex complex13 = complex10.sin();
        org.apache.commons.math3.complex.Complex complex15 = complex10.subtract(100.0d);
        org.apache.commons.math3.complex.Complex complex16 = complex10.acos();
        org.apache.commons.math3.complex.Complex complex17 = complex10.reciprocal();
        org.apache.commons.math3.complex.Complex complex18 = complex17.sin();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test162");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math3.complex.Complex complex6 = complex4.tanh();
        boolean boolean8 = complex6.equals((java.lang.Object) true);
        double double9 = complex6.getImaginary();
        org.apache.commons.math3.complex.Complex complex10 = complex6.sinh();
        org.apache.commons.math3.complex.Complex complex12 = complex6.multiply(0.0d);
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex1, complex6);
        org.apache.commons.math3.complex.Complex complex15 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math3.complex.Complex complex17 = complex15.sqrt1z();
        org.apache.commons.math3.complex.Complex complex18 = complex6.subtract(complex15);
        org.apache.commons.math3.complex.Complex complex19 = complex18.acos();
        org.apache.commons.math3.complex.Complex complex21 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex23 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double24 = complex23.getReal();
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double27 = complex26.getReal();
        boolean boolean28 = org.apache.commons.math3.complex.Complex.equals(complex23, complex26);
        boolean boolean30 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex21, complex23, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex32 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double33 = complex32.getReal();
        org.apache.commons.math3.complex.Complex complex35 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex36 = complex35.sqrt();
        org.apache.commons.math3.complex.Complex complex37 = complex35.tanh();
        boolean boolean39 = complex37.equals((java.lang.Object) true);
        double double40 = complex37.getImaginary();
        org.apache.commons.math3.complex.Complex complex41 = complex37.sinh();
        org.apache.commons.math3.complex.Complex complex43 = complex37.multiply(0.0d);
        boolean boolean44 = org.apache.commons.math3.complex.Complex.equals(complex32, complex37);
        org.apache.commons.math3.complex.Complex complex46 = complex32.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex48 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex49 = complex48.sqrt();
        org.apache.commons.math3.complex.Complex complex50 = complex48.tanh();
        boolean boolean52 = complex50.equals((java.lang.Object) true);
        double double53 = complex50.getImaginary();
        org.apache.commons.math3.complex.Complex complex54 = complex46.add(complex50);
        boolean boolean56 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex23, complex54, (double) 10);
        boolean boolean58 = org.apache.commons.math3.complex.Complex.equals(complex18, complex23, (double) 10.0f);
        boolean boolean59 = complex18.isNaN();
        org.apache.commons.math3.complex.Complex complex60 = complex18.sinh();
        java.util.List<org.apache.commons.math3.complex.Complex> complexList62 = complex60.nthRoot((int) (byte) 10);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1.0d) + "'", double24 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1.0d) + "'", double27 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-1.0d) + "'", double33 == (-1.0d));
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complexList62);
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test163");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex9 = complex3.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        boolean boolean20 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex11, complex13, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex21 = complex11.log();
        org.apache.commons.math3.complex.Complex complex23 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double24 = complex23.getReal();
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double27 = complex26.getReal();
        boolean boolean28 = org.apache.commons.math3.complex.Complex.equals(complex23, complex26);
        org.apache.commons.math3.complex.Complex complex30 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean32 = org.apache.commons.math3.complex.Complex.equals(complex23, complex30, 10);
        org.apache.commons.math3.complex.Complex complex34 = complex30.pow((double) (byte) 1);
        boolean boolean35 = org.apache.commons.math3.complex.Complex.equals(complex11, complex34);
        org.apache.commons.math3.complex.Complex complex36 = complex11.reciprocal();
        boolean boolean38 = org.apache.commons.math3.complex.Complex.equals(complex9, complex11, (double) (byte) 1);
        org.apache.commons.math3.complex.Complex complex40 = complex11.multiply(0);
        org.apache.commons.math3.complex.Complex complex42 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double43 = complex42.getReal();
        org.apache.commons.math3.complex.Complex complex45 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double46 = complex45.getReal();
        boolean boolean47 = org.apache.commons.math3.complex.Complex.equals(complex42, complex45);
        org.apache.commons.math3.complex.Complex complex50 = new org.apache.commons.math3.complex.Complex(100.0d, (double) (short) 100);
        org.apache.commons.math3.complex.Complex complex52 = complex50.multiply((double) 100);
        org.apache.commons.math3.complex.Complex complex53 = complex52.tanh();
        org.apache.commons.math3.complex.Complex complex54 = complex42.add(complex52);
        boolean boolean56 = org.apache.commons.math3.complex.Complex.equals(complex40, complex52, 1);
        org.apache.commons.math3.complex.Complex complex58 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex60 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double61 = complex60.getReal();
        org.apache.commons.math3.complex.Complex complex63 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double64 = complex63.getReal();
        boolean boolean65 = org.apache.commons.math3.complex.Complex.equals(complex60, complex63);
        boolean boolean67 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex58, complex60, (double) 0.0f);
        double double68 = complex60.getReal();
        org.apache.commons.math3.complex.Complex complex69 = complex60.exp();
        org.apache.commons.math3.complex.Complex complex70 = complex60.asin();
        org.apache.commons.math3.complex.Complex complex71 = complex40.add(complex60);
        org.apache.commons.math3.complex.Complex complex72 = complex60.cos();
        org.apache.commons.math3.complex.Complex complex73 = complex72.sin();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1.0d) + "'", double24 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1.0d) + "'", double27 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-1.0d) + "'", double43 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1.0d) + "'", double46 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-1.0d) + "'", double61 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + (-1.0d) + "'", double64 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-1.0d) + "'", double68 == (-1.0d));
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test164");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex(1.2645189576252271d);
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test165");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex(Double.POSITIVE_INFINITY, (-0.8414709848078965d));
        org.apache.commons.math3.complex.Complex complex3 = complex2.atan();
        org.junit.Assert.assertNotNull(complex3);
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test166");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf(32.03852994381972d, (double) '#');
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test167");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex4 = complex1.subtract((double) (short) 100);
        org.apache.commons.math3.complex.Complex complex6 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math3.complex.Complex complex8 = complex6.tanh();
        org.apache.commons.math3.complex.Complex complex9 = complex6.asin();
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equals(complex4, complex6);
        org.apache.commons.math3.complex.Complex complex11 = complex6.tan();
        org.apache.commons.math3.complex.Complex complex13 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math3.complex.Complex complex15 = complex13.tanh();
        org.apache.commons.math3.complex.Complex complex16 = complex13.asin();
        org.apache.commons.math3.complex.Complex complex17 = complex13.cos();
        org.apache.commons.math3.complex.Complex complex19 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math3.complex.Complex complex21 = complex19.tanh();
        boolean boolean23 = complex21.equals((java.lang.Object) true);
        double double24 = complex21.getImaginary();
        org.apache.commons.math3.complex.Complex complex25 = complex21.sinh();
        org.apache.commons.math3.complex.Complex complex27 = complex21.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex29 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex31 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double32 = complex31.getReal();
        org.apache.commons.math3.complex.Complex complex34 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double35 = complex34.getReal();
        boolean boolean36 = org.apache.commons.math3.complex.Complex.equals(complex31, complex34);
        boolean boolean38 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex29, complex31, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex39 = complex29.log();
        org.apache.commons.math3.complex.Complex complex41 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double42 = complex41.getReal();
        org.apache.commons.math3.complex.Complex complex44 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double45 = complex44.getReal();
        boolean boolean46 = org.apache.commons.math3.complex.Complex.equals(complex41, complex44);
        org.apache.commons.math3.complex.Complex complex48 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean50 = org.apache.commons.math3.complex.Complex.equals(complex41, complex48, 10);
        org.apache.commons.math3.complex.Complex complex52 = complex48.pow((double) (byte) 1);
        boolean boolean53 = org.apache.commons.math3.complex.Complex.equals(complex29, complex52);
        org.apache.commons.math3.complex.Complex complex54 = complex29.reciprocal();
        boolean boolean56 = org.apache.commons.math3.complex.Complex.equals(complex27, complex29, (double) (byte) 1);
        org.apache.commons.math3.complex.Complex complex57 = complex27.conjugate();
        org.apache.commons.math3.complex.ComplexField complexField58 = complex27.getField();
        org.apache.commons.math3.complex.Complex complex59 = complex27.asin();
        double double60 = complex59.getArgument();
        org.apache.commons.math3.complex.Complex complex61 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex63 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math3.complex.Complex complex65 = complex63.tanh();
        org.apache.commons.math3.complex.Complex complex66 = complex65.acos();
        org.apache.commons.math3.complex.ComplexField complexField67 = complex66.getField();
        boolean boolean69 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex61, complex66, (double) 10L);
        org.apache.commons.math3.complex.Complex complex70 = complex59.divide(complex66);
        boolean boolean72 = org.apache.commons.math3.complex.Complex.equals(complex13, complex66, 100.00499987500623d);
        org.apache.commons.math3.complex.Complex complex73 = complex11.subtract(complex13);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-1.0d) + "'", double32 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-1.0d) + "'", double35 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + (-1.0d) + "'", double42 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1.0d) + "'", double45 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complexField58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + (-0.0d) + "'", double60 == (-0.0d));
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complexField67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(complex73);
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test168");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(97.51410154434075d);
        org.junit.Assert.assertNotNull(complex1);
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test169");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex((double) (-1.0f), 1.5707963267948966d);
        double double3 = complex2.abs();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.8620958891185866d + "'", double3 == 1.8620958891185866d);
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test170");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math3.complex.Complex complex6 = complex4.tanh();
        boolean boolean8 = complex6.equals((java.lang.Object) true);
        double double9 = complex6.getImaginary();
        org.apache.commons.math3.complex.Complex complex10 = complex6.sinh();
        org.apache.commons.math3.complex.Complex complex12 = complex6.multiply(0.0d);
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex1, complex6);
        org.apache.commons.math3.complex.Complex complex14 = complex1.sqrt1z();
        java.util.List<org.apache.commons.math3.complex.Complex> complexList16 = complex14.nthRoot((int) '4');
        org.apache.commons.math3.complex.Complex complex17 = complex14.asin();
        org.apache.commons.math3.complex.Complex complex19 = complex14.subtract(0.5872139151569291d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complexList16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex19);
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test171");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex9 = complex8.sqrt();
        org.apache.commons.math3.complex.Complex complex10 = complex8.sqrt1z();
        org.apache.commons.math3.complex.Complex complex11 = complex1.add(complex10);
        org.apache.commons.math3.complex.Complex complex12 = complex10.tanh();
        org.apache.commons.math3.complex.Complex complex13 = complex12.log();
        org.apache.commons.math3.complex.ComplexField complexField14 = complex12.getField();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complexField14);
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test172");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math3.complex.Complex complex6 = complex4.tanh();
        boolean boolean8 = complex6.equals((java.lang.Object) true);
        double double9 = complex6.getImaginary();
        org.apache.commons.math3.complex.Complex complex10 = complex6.sinh();
        org.apache.commons.math3.complex.Complex complex12 = complex6.multiply(0.0d);
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex1, complex6);
        org.apache.commons.math3.complex.Complex complex15 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math3.complex.Complex complex17 = complex15.sqrt1z();
        org.apache.commons.math3.complex.Complex complex18 = complex6.subtract(complex15);
        org.apache.commons.math3.complex.Complex complex19 = complex18.reciprocal();
        org.apache.commons.math3.complex.Complex complex20 = complex19.negate();
        org.apache.commons.math3.complex.Complex complex22 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math3.complex.Complex complex24 = complex22.tanh();
        boolean boolean26 = complex24.equals((java.lang.Object) true);
        double double27 = complex24.getImaginary();
        org.apache.commons.math3.complex.Complex complex29 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double30 = complex29.getReal();
        org.apache.commons.math3.complex.Complex complex32 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double33 = complex32.getReal();
        boolean boolean34 = org.apache.commons.math3.complex.Complex.equals(complex29, complex32);
        org.apache.commons.math3.complex.Complex complex36 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean38 = org.apache.commons.math3.complex.Complex.equals(complex29, complex36, 10);
        org.apache.commons.math3.complex.Complex complex40 = complex36.pow((double) (byte) 1);
        boolean boolean42 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex24, complex36, (double) (-1));
        org.apache.commons.math3.complex.Complex complex44 = complex36.multiply((double) (byte) 0);
        org.apache.commons.math3.complex.Complex complex46 = complex36.multiply(0.0d);
        boolean boolean48 = org.apache.commons.math3.complex.Complex.equals(complex19, complex46, 10);
        org.apache.commons.math3.complex.Complex complex50 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double51 = complex50.getReal();
        org.apache.commons.math3.complex.Complex complex53 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math3.complex.Complex complex55 = complex53.tanh();
        boolean boolean57 = complex55.equals((java.lang.Object) true);
        double double58 = complex55.getImaginary();
        org.apache.commons.math3.complex.Complex complex59 = complex55.sinh();
        org.apache.commons.math3.complex.Complex complex61 = complex55.multiply(0.0d);
        boolean boolean62 = org.apache.commons.math3.complex.Complex.equals(complex50, complex55);
        org.apache.commons.math3.complex.Complex complex64 = complex50.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex65 = complex64.log();
        double double66 = complex64.getArgument();
        org.apache.commons.math3.complex.Complex complex67 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex69 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double70 = complex69.getReal();
        org.apache.commons.math3.complex.Complex complex72 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex73 = complex72.sqrt();
        org.apache.commons.math3.complex.Complex complex74 = complex72.tanh();
        boolean boolean76 = complex74.equals((java.lang.Object) true);
        double double77 = complex74.getImaginary();
        org.apache.commons.math3.complex.Complex complex78 = complex74.sinh();
        org.apache.commons.math3.complex.Complex complex80 = complex74.multiply(0.0d);
        boolean boolean81 = org.apache.commons.math3.complex.Complex.equals(complex69, complex74);
        org.apache.commons.math3.complex.Complex complex83 = complex69.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex84 = complex67.subtract(complex83);
        org.apache.commons.math3.complex.Complex complex86 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double87 = complex86.getReal();
        double double88 = complex86.getReal();
        org.apache.commons.math3.complex.Complex complex89 = complex86.tan();
        org.apache.commons.math3.complex.Complex complex90 = complex83.pow(complex89);
        org.apache.commons.math3.complex.Complex complex91 = complex90.asin();
        org.apache.commons.math3.complex.Complex complex92 = complex64.subtract(complex91);
        org.apache.commons.math3.complex.Complex complex93 = complex19.pow(complex64);
        org.apache.commons.math3.complex.Complex complex94 = complex64.atan();
        org.apache.commons.math3.complex.Complex complex95 = complex94.exp();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1.0d) + "'", double30 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-1.0d) + "'", double33 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-1.0d) + "'", double51 == (-1.0d));
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.9643867237284715E-15d + "'", double66 == 1.9643867237284715E-15d);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + (-1.0d) + "'", double70 == (-1.0d));
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + (-1.0d) + "'", double87 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + (-1.0d) + "'", double88 == (-1.0d));
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertNotNull(complex95);
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test173");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex8 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex10 = complex3.multiply((-2.0d));
        org.apache.commons.math3.complex.Complex complex11 = complex3.atan();
        org.apache.commons.math3.complex.Complex complex14 = org.apache.commons.math3.complex.Complex.valueOf((double) 100.0f, 0.7853981633974483d);
        boolean boolean16 = org.apache.commons.math3.complex.Complex.equals(complex11, complex14, (int) '4');
        org.apache.commons.math3.complex.Complex complex17 = complex14.log();
        org.apache.commons.math3.complex.Complex complex18 = complex17.cos();
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex(1.557407724654902d);
        org.apache.commons.math3.complex.Complex complex21 = complex20.sqrt();
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex18, complex20);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test174");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        double double3 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = complex1.tan();
        org.apache.commons.math3.complex.Complex complex5 = complex1.exp();
        org.apache.commons.math3.complex.Complex complex7 = complex1.multiply((double) 10);
        org.apache.commons.math3.complex.Complex complex9 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math3.complex.Complex complex11 = complex9.tanh();
        boolean boolean13 = complex11.equals((java.lang.Object) true);
        double double14 = complex11.getImaginary();
        org.apache.commons.math3.complex.Complex complex15 = complex11.sinh();
        org.apache.commons.math3.complex.Complex complex17 = complex11.multiply(10);
        org.apache.commons.math3.complex.Complex complex18 = complex17.sqrt1z();
        boolean boolean20 = org.apache.commons.math3.complex.Complex.equals(complex1, complex17, 0.0d);
        org.apache.commons.math3.complex.Complex complex22 = complex1.add((double) 100.0f);
        boolean boolean23 = complex22.isNaN();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test175");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        double double11 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex12 = complex3.exp();
        double double13 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex16 = org.apache.commons.math3.complex.Complex.valueOf(100.0d, (double) (short) 0);
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double19 = complex18.getReal();
        org.apache.commons.math3.complex.Complex complex21 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double22 = complex21.getReal();
        boolean boolean23 = org.apache.commons.math3.complex.Complex.equals(complex18, complex21);
        org.apache.commons.math3.complex.Complex complex24 = complex21.sqrt();
        org.apache.commons.math3.complex.Complex complex26 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math3.complex.Complex complex28 = complex26.tanh();
        boolean boolean30 = complex28.equals((java.lang.Object) true);
        double double31 = complex28.getImaginary();
        org.apache.commons.math3.complex.Complex complex32 = complex28.sinh();
        org.apache.commons.math3.complex.Complex complex33 = complex28.cosh();
        double double34 = complex28.getImaginary();
        org.apache.commons.math3.complex.Complex complex35 = complex21.add(complex28);
        org.apache.commons.math3.complex.Complex complex36 = complex16.add(complex28);
        org.apache.commons.math3.complex.Complex complex38 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math3.complex.Complex complex40 = complex38.tanh();
        boolean boolean42 = complex40.equals((java.lang.Object) true);
        double double43 = complex40.getImaginary();
        org.apache.commons.math3.complex.Complex complex44 = complex40.sinh();
        org.apache.commons.math3.complex.Complex complex45 = complex36.multiply(complex44);
        boolean boolean46 = org.apache.commons.math3.complex.Complex.equals(complex3, complex45);
        org.apache.commons.math3.complex.Complex complex48 = complex3.multiply((double) '#');
        org.apache.commons.math3.complex.Complex complex51 = org.apache.commons.math3.complex.Complex.valueOf((double) (short) -1, 2.718281828459045d);
        org.apache.commons.math3.complex.Complex complex53 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math3.complex.Complex complex55 = complex53.tanh();
        org.apache.commons.math3.complex.Complex complex56 = complex55.sin();
        org.apache.commons.math3.complex.ComplexField complexField57 = complex55.getField();
        org.apache.commons.math3.complex.Complex complex58 = complex51.divide(complex55);
        org.apache.commons.math3.complex.Complex complex59 = complex51.cos();
        org.apache.commons.math3.complex.Complex complex60 = complex3.multiply(complex51);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-1.0d) + "'", double11 == (-1.0d));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.0d) + "'", double19 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complexField57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test176");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex8 = complex3.cosh();
        org.apache.commons.math3.complex.ComplexField complexField9 = complex8.getField();
        double double10 = complex8.getImaginary();
        org.apache.commons.math3.complex.Complex complex12 = complex8.add((-1.8070843896616986d));
        org.apache.commons.math3.complex.Complex complex13 = complex8.sinh();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complexField9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test177");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        java.lang.String str11 = complex1.toString();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex23 = complex1.add(complex20);
        org.apache.commons.math3.complex.Complex complex24 = org.apache.commons.math3.complex.Complex.NaN;
        org.apache.commons.math3.complex.Complex complex25 = complex20.subtract(complex24);
        org.apache.commons.math3.complex.Complex complex27 = complex20.subtract((double) 100.0f);
        org.apache.commons.math3.complex.Complex complex29 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math3.complex.Complex complex31 = complex29.tanh();
        boolean boolean33 = complex31.equals((java.lang.Object) true);
        double double34 = complex31.getImaginary();
        org.apache.commons.math3.complex.Complex complex35 = complex31.sinh();
        org.apache.commons.math3.complex.Complex complex36 = complex27.pow(complex31);
        org.apache.commons.math3.complex.Complex complex38 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double39 = complex38.getReal();
        org.apache.commons.math3.complex.Complex complex41 = complex38.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex43 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double44 = complex43.getReal();
        org.apache.commons.math3.complex.Complex complex45 = complex41.divide(complex43);
        org.apache.commons.math3.complex.Complex complex47 = complex45.multiply(10.0d);
        org.apache.commons.math3.complex.ComplexField complexField48 = complex47.getField();
        org.apache.commons.math3.complex.Complex complex49 = complex47.tan();
        org.apache.commons.math3.complex.Complex complex50 = complex36.subtract(complex49);
        org.apache.commons.math3.complex.Complex complex51 = complex50.sin();
        org.apache.commons.math3.complex.Complex complex53 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double54 = complex53.getReal();
        boolean boolean55 = complex53.isInfinite();
        org.apache.commons.math3.complex.Complex complex58 = new org.apache.commons.math3.complex.Complex((double) (short) 100, (double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex59 = complex53.subtract(complex58);
        org.apache.commons.math3.complex.Complex complex61 = complex59.add((-3.141592653589793d));
        org.apache.commons.math3.complex.Complex complex62 = complex51.subtract(complex61);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "(-1.0, 0.0)" + "'", str11.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-1.0d) + "'", double39 == (-1.0d));
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1.0d) + "'", double44 == (-1.0d));
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complexField48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1.0d) + "'", double54 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test178");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex11 = complex1.log();
        org.apache.commons.math3.complex.Complex complex12 = complex11.asin();
        org.apache.commons.math3.complex.Complex complex13 = complex11.sin();
        org.apache.commons.math3.complex.Complex complex14 = complex13.exp();
        org.apache.commons.math3.complex.Complex complex15 = complex14.asin();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test179");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        org.apache.commons.math3.complex.Complex complex7 = new org.apache.commons.math3.complex.Complex((double) (short) 0);
        org.apache.commons.math3.complex.Complex complex8 = complex3.divide(complex7);
        org.apache.commons.math3.complex.Complex complex10 = complex3.add((double) 10.0f);
        org.apache.commons.math3.complex.Complex complex12 = complex10.multiply(1.0d);
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        org.apache.commons.math3.complex.Complex complex19 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double20 = complex19.getReal();
        boolean boolean21 = org.apache.commons.math3.complex.Complex.equals(complex16, complex19);
        boolean boolean23 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex14, complex16, (double) 0.0f);
        java.lang.String str24 = complex14.toString();
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double27 = complex26.getReal();
        org.apache.commons.math3.complex.Complex complex29 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double30 = complex29.getReal();
        boolean boolean31 = org.apache.commons.math3.complex.Complex.equals(complex26, complex29);
        org.apache.commons.math3.complex.Complex complex33 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean35 = org.apache.commons.math3.complex.Complex.equals(complex26, complex33, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex36 = complex14.add(complex33);
        java.lang.String str37 = complex33.toString();
        org.apache.commons.math3.complex.Complex complex39 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex40 = complex33.divide(complex39);
        org.apache.commons.math3.complex.Complex complex41 = complex39.negate();
        double double42 = complex41.abs();
        double double43 = complex41.getImaginary();
        org.apache.commons.math3.complex.Complex complex44 = complex10.multiply(complex41);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1.0d) + "'", double20 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "(-1.0, 0.0)" + "'", str24.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1.0d) + "'", double27 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1.0d) + "'", double30 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "(-1.0, 0.0)" + "'", str37.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-0.0d) + "'", double43 == (-0.0d));
        org.junit.Assert.assertNotNull(complex44);
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test180");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math3.complex.Complex complex6 = complex4.tanh();
        boolean boolean8 = complex6.equals((java.lang.Object) true);
        double double9 = complex6.getImaginary();
        org.apache.commons.math3.complex.Complex complex10 = complex6.sinh();
        org.apache.commons.math3.complex.Complex complex12 = complex6.multiply(0.0d);
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex1, complex6);
        org.apache.commons.math3.complex.Complex complex15 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math3.complex.Complex complex17 = complex15.tanh();
        boolean boolean19 = complex17.equals((java.lang.Object) true);
        double double20 = complex17.getImaginary();
        org.apache.commons.math3.complex.Complex complex22 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double23 = complex22.getReal();
        org.apache.commons.math3.complex.Complex complex25 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double26 = complex25.getReal();
        boolean boolean27 = org.apache.commons.math3.complex.Complex.equals(complex22, complex25);
        org.apache.commons.math3.complex.Complex complex29 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean31 = org.apache.commons.math3.complex.Complex.equals(complex22, complex29, 10);
        org.apache.commons.math3.complex.Complex complex33 = complex29.pow((double) (byte) 1);
        boolean boolean35 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex17, complex29, (double) (-1));
        org.apache.commons.math3.complex.Complex complex36 = complex6.subtract(complex29);
        org.apache.commons.math3.complex.Complex complex37 = complex29.sqrt();
        org.apache.commons.math3.complex.Complex complex39 = complex37.pow((double) (-1L));
        org.apache.commons.math3.complex.Complex complex41 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex43 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double44 = complex43.getReal();
        org.apache.commons.math3.complex.Complex complex46 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double47 = complex46.getReal();
        boolean boolean48 = org.apache.commons.math3.complex.Complex.equals(complex43, complex46);
        boolean boolean50 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex41, complex43, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex51 = complex41.log();
        org.apache.commons.math3.complex.Complex complex52 = complex41.atan();
        org.apache.commons.math3.complex.Complex complex53 = complex39.divide(complex41);
        org.apache.commons.math3.complex.Complex complex54 = complex53.tan();
        org.apache.commons.math3.complex.Complex complex55 = complex54.atan();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-1.0d) + "'", double23 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-1.0d) + "'", double26 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1.0d) + "'", double44 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-1.0d) + "'", double47 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test181");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        double double4 = complex3.abs();
        org.apache.commons.math3.complex.Complex complex5 = complex3.exp();
        org.apache.commons.math3.complex.Complex complex6 = complex5.tanh();
        boolean boolean7 = complex6.isNaN();
        org.apache.commons.math3.complex.Complex complex8 = complex6.acos();
        org.apache.commons.math3.complex.Complex complex10 = complex8.pow((-0.03125d));
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex10);
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test182");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) 1.0f);
        org.apache.commons.math3.complex.Complex complex3 = complex1.divide(0.0d);
        org.apache.commons.math3.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double9 = complex8.getReal();
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex8, complex11);
        boolean boolean15 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex6, complex8, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex16 = complex6.log();
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double19 = complex18.getReal();
        org.apache.commons.math3.complex.Complex complex21 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double22 = complex21.getReal();
        boolean boolean23 = org.apache.commons.math3.complex.Complex.equals(complex18, complex21);
        org.apache.commons.math3.complex.Complex complex25 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean27 = org.apache.commons.math3.complex.Complex.equals(complex18, complex25, 10);
        org.apache.commons.math3.complex.Complex complex29 = complex25.pow((double) (byte) 1);
        boolean boolean30 = org.apache.commons.math3.complex.Complex.equals(complex6, complex29);
        org.apache.commons.math3.complex.Complex complex31 = complex6.reciprocal();
        org.apache.commons.math3.complex.Complex complex32 = complex6.cosh();
        org.apache.commons.math3.complex.Complex complex33 = complex6.acos();
        org.apache.commons.math3.complex.Complex complex34 = complex3.add(complex33);
        org.apache.commons.math3.complex.Complex complex36 = complex33.multiply(3.296908309475615d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.0d) + "'", double19 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex36);
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test183");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        java.lang.String str11 = complex1.toString();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex23 = complex1.add(complex20);
        org.apache.commons.math3.complex.Complex complex24 = org.apache.commons.math3.complex.Complex.NaN;
        org.apache.commons.math3.complex.Complex complex25 = complex20.subtract(complex24);
        org.apache.commons.math3.complex.Complex complex27 = complex20.subtract((double) 100.0f);
        org.apache.commons.math3.complex.Complex complex29 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math3.complex.Complex complex31 = complex29.tanh();
        boolean boolean33 = complex31.equals((java.lang.Object) true);
        double double34 = complex31.getImaginary();
        org.apache.commons.math3.complex.Complex complex35 = complex31.sinh();
        org.apache.commons.math3.complex.Complex complex36 = complex27.pow(complex31);
        org.apache.commons.math3.complex.Complex complex37 = complex27.reciprocal();
        boolean boolean38 = complex27.isNaN();
        org.apache.commons.math3.complex.Complex complex39 = complex27.sqrt1z();
        org.apache.commons.math3.complex.Complex complex42 = new org.apache.commons.math3.complex.Complex((double) (byte) 100, (double) 100);
        org.apache.commons.math3.complex.Complex complex44 = complex42.multiply(0);
        org.apache.commons.math3.complex.Complex complex45 = complex27.multiply(complex44);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "(-1.0, 0.0)" + "'", str11.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test184");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        java.lang.String str11 = complex1.toString();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex23 = complex1.add(complex20);
        java.lang.String str24 = complex20.toString();
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex27 = complex20.divide(complex26);
        org.apache.commons.math3.complex.Complex complex29 = complex26.divide((double) ' ');
        double double30 = complex29.abs();
        org.apache.commons.math3.complex.Complex complex32 = complex29.subtract(0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "(-1.0, 0.0)" + "'", str11.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "(-1.0, 0.0)" + "'", str24.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.03125d + "'", double30 == 0.03125d);
        org.junit.Assert.assertNotNull(complex32);
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test185");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf(0.0d, (double) (byte) 100);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test186");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex9 = complex3.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex11 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex12 = complex11.sqrt();
        org.apache.commons.math3.complex.Complex complex13 = complex11.tanh();
        boolean boolean15 = complex13.equals((java.lang.Object) true);
        double double16 = complex13.getImaginary();
        org.apache.commons.math3.complex.Complex complex17 = complex13.sinh();
        org.apache.commons.math3.complex.Complex complex19 = complex13.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex21 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex23 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double24 = complex23.getReal();
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double27 = complex26.getReal();
        boolean boolean28 = org.apache.commons.math3.complex.Complex.equals(complex23, complex26);
        boolean boolean30 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex21, complex23, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex31 = complex21.log();
        org.apache.commons.math3.complex.Complex complex33 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double34 = complex33.getReal();
        org.apache.commons.math3.complex.Complex complex36 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double37 = complex36.getReal();
        boolean boolean38 = org.apache.commons.math3.complex.Complex.equals(complex33, complex36);
        org.apache.commons.math3.complex.Complex complex40 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean42 = org.apache.commons.math3.complex.Complex.equals(complex33, complex40, 10);
        org.apache.commons.math3.complex.Complex complex44 = complex40.pow((double) (byte) 1);
        boolean boolean45 = org.apache.commons.math3.complex.Complex.equals(complex21, complex44);
        org.apache.commons.math3.complex.Complex complex46 = complex21.reciprocal();
        boolean boolean48 = org.apache.commons.math3.complex.Complex.equals(complex19, complex21, (double) (byte) 1);
        org.apache.commons.math3.complex.Complex complex50 = complex21.multiply(0);
        org.apache.commons.math3.complex.Complex complex51 = complex21.reciprocal();
        org.apache.commons.math3.complex.Complex complex52 = complex51.exp();
        org.apache.commons.math3.complex.Complex complex53 = complex3.subtract(complex52);
        boolean boolean54 = complex52.isNaN();
        org.apache.commons.math3.complex.Complex complex56 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double57 = complex56.getReal();
        org.apache.commons.math3.complex.Complex complex59 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double60 = complex59.getReal();
        boolean boolean61 = org.apache.commons.math3.complex.Complex.equals(complex56, complex59);
        org.apache.commons.math3.complex.Complex complex63 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean65 = org.apache.commons.math3.complex.Complex.equals(complex56, complex63, 10);
        org.apache.commons.math3.complex.Complex complex67 = complex56.multiply(10);
        org.apache.commons.math3.complex.Complex complex68 = complex56.reciprocal();
        org.apache.commons.math3.complex.Complex complex70 = complex56.divide((double) (-1.0f));
        org.apache.commons.math3.complex.Complex complex71 = complex70.negate();
        boolean boolean73 = org.apache.commons.math3.complex.Complex.equals(complex52, complex70, (-1.5707963267948966d));
        boolean boolean74 = complex52.isNaN();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1.0d) + "'", double24 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1.0d) + "'", double27 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + (-1.0d) + "'", double37 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-1.0d) + "'", double57 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + (-1.0d) + "'", double60 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test187");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf((double) (-1), 0.7071067811865476d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test188");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (short) 10);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex3 = complex1.sinh();
        double double4 = complex3.abs();
        boolean boolean5 = complex3.isNaN();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 10.0d + "'", double2 == 10.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 11013.232874703393d + "'", double4 == 11013.232874703393d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test189");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex9 = new org.apache.commons.math3.complex.Complex(100.0d, (double) (short) 100);
        org.apache.commons.math3.complex.Complex complex11 = complex9.multiply((double) 100);
        org.apache.commons.math3.complex.Complex complex12 = complex11.tanh();
        org.apache.commons.math3.complex.Complex complex13 = complex1.add(complex11);
        double double14 = complex11.getArgument();
        org.apache.commons.math3.complex.Complex complex16 = complex11.divide(0.03125d);
        org.apache.commons.math3.complex.Complex complex17 = complex11.atan();
        java.lang.String str18 = complex11.toString();
        org.apache.commons.math3.complex.Complex complex19 = complex11.reciprocal();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.7853981633974483d + "'", double14 == 0.7853981633974483d);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "(10000.0, 10000.0)" + "'", str18.equals("(10000.0, 10000.0)"));
        org.junit.Assert.assertNotNull(complex19);
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test190");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex11 = complex1.log();
        org.apache.commons.math3.complex.Complex complex13 = complex11.multiply((int) (short) 10);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex13);
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test191");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math3.complex.Complex complex6 = complex4.tanh();
        boolean boolean8 = complex6.equals((java.lang.Object) true);
        double double9 = complex6.getImaginary();
        org.apache.commons.math3.complex.Complex complex10 = complex6.sinh();
        org.apache.commons.math3.complex.Complex complex12 = complex6.multiply(0.0d);
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex1, complex6);
        org.apache.commons.math3.complex.Complex complex14 = complex1.sqrt1z();
        org.apache.commons.math3.complex.Complex complex15 = complex14.asin();
        org.apache.commons.math3.complex.Complex complex17 = new org.apache.commons.math3.complex.Complex((-2.0d));
        org.apache.commons.math3.complex.Complex complex18 = complex17.acos();
        org.apache.commons.math3.complex.Complex complex19 = complex15.multiply(complex18);
        org.apache.commons.math3.complex.Complex complex20 = complex15.negate();
        org.apache.commons.math3.complex.Complex complex22 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double23 = complex22.getReal();
        org.apache.commons.math3.complex.Complex complex25 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double26 = complex25.getReal();
        boolean boolean27 = org.apache.commons.math3.complex.Complex.equals(complex22, complex25);
        org.apache.commons.math3.complex.Complex complex29 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean31 = org.apache.commons.math3.complex.Complex.equals(complex22, complex29, 10);
        org.apache.commons.math3.complex.Complex complex34 = new org.apache.commons.math3.complex.Complex((double) (short) 100, (double) (short) -1);
        boolean boolean35 = complex22.equals((java.lang.Object) complex34);
        org.apache.commons.math3.complex.Complex complex36 = complex22.log();
        org.apache.commons.math3.complex.Complex complex37 = complex22.sqrt1z();
        org.apache.commons.math3.complex.Complex complex38 = complex37.log();
        org.apache.commons.math3.complex.Complex complex39 = complex37.sin();
        org.apache.commons.math3.complex.Complex complex40 = complex37.conjugate();
        org.apache.commons.math3.complex.Complex complex41 = complex15.pow(complex37);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-1.0d) + "'", double23 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-1.0d) + "'", double26 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test192");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equals(complex1, complex8, 10);
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (short) 100, (double) (short) -1);
        boolean boolean14 = complex1.equals((java.lang.Object) complex13);
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double19 = complex18.getReal();
        org.apache.commons.math3.complex.Complex complex21 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double22 = complex21.getReal();
        boolean boolean23 = org.apache.commons.math3.complex.Complex.equals(complex18, complex21);
        boolean boolean25 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex16, complex18, (double) 0.0f);
        java.lang.String str26 = complex16.toString();
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double29 = complex28.getReal();
        org.apache.commons.math3.complex.Complex complex31 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double32 = complex31.getReal();
        boolean boolean33 = org.apache.commons.math3.complex.Complex.equals(complex28, complex31);
        org.apache.commons.math3.complex.Complex complex35 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean37 = org.apache.commons.math3.complex.Complex.equals(complex28, complex35, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex38 = complex16.add(complex35);
        org.apache.commons.math3.complex.Complex complex39 = org.apache.commons.math3.complex.Complex.NaN;
        org.apache.commons.math3.complex.Complex complex40 = complex35.subtract(complex39);
        double double41 = complex39.getArgument();
        org.apache.commons.math3.complex.Complex complex42 = complex39.sin();
        org.apache.commons.math3.complex.Complex complex43 = complex42.sqrt();
        boolean boolean44 = complex43.isInfinite();
        boolean boolean46 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex13, complex43, 1.557407724654902d);
        org.apache.commons.math3.complex.Complex complex47 = complex13.sin();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.0d) + "'", double19 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "(-1.0, 0.0)" + "'", str26.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1.0d) + "'", double29 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-1.0d) + "'", double32 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertEquals((double) double41, Double.NaN, 0);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(complex47);
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test193");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        double double4 = complex3.abs();
        org.apache.commons.math3.complex.Complex complex5 = complex3.cosh();
        org.apache.commons.math3.complex.Complex complex6 = complex5.sinh();
        org.apache.commons.math3.complex.Complex complex9 = org.apache.commons.math3.complex.Complex.valueOf((double) 10.0f, (double) (-1));
        org.apache.commons.math3.complex.Complex complex11 = complex9.add((double) 'a');
        org.apache.commons.math3.complex.Complex complex12 = complex5.divide(complex9);
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double15 = complex14.getReal();
        org.apache.commons.math3.complex.Complex complex17 = complex14.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex18 = complex14.log();
        org.apache.commons.math3.complex.Complex complex21 = new org.apache.commons.math3.complex.Complex((double) (byte) 10, (-2.0d));
        org.apache.commons.math3.complex.Complex complex22 = complex18.subtract(complex21);
        org.apache.commons.math3.complex.Complex complex23 = complex18.sin();
        org.apache.commons.math3.complex.Complex complex24 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double27 = complex26.getReal();
        org.apache.commons.math3.complex.Complex complex29 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math3.complex.Complex complex31 = complex29.tanh();
        boolean boolean33 = complex31.equals((java.lang.Object) true);
        double double34 = complex31.getImaginary();
        org.apache.commons.math3.complex.Complex complex35 = complex31.sinh();
        org.apache.commons.math3.complex.Complex complex37 = complex31.multiply(0.0d);
        boolean boolean38 = org.apache.commons.math3.complex.Complex.equals(complex26, complex31);
        org.apache.commons.math3.complex.Complex complex40 = complex26.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex41 = complex24.subtract(complex40);
        org.apache.commons.math3.complex.Complex complex42 = complex41.exp();
        double double43 = complex42.abs();
        boolean boolean44 = org.apache.commons.math3.complex.Complex.equals(complex23, complex42);
        boolean boolean46 = org.apache.commons.math3.complex.Complex.equals(complex12, complex42, (-10.0d));
        org.apache.commons.math3.complex.Complex complex47 = complex12.tanh();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1.0d) + "'", double27 == (-1.0d));
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(complex47);
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test194");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        double double11 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex12 = complex3.exp();
        org.apache.commons.math3.complex.ComplexField complexField13 = complex12.getField();
        org.apache.commons.math3.complex.Complex complex14 = complex12.log();
        org.apache.commons.math3.complex.Complex complex15 = complex14.sin();
        org.apache.commons.math3.complex.Complex complex17 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double18 = complex17.getReal();
        org.apache.commons.math3.complex.Complex complex20 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math3.complex.Complex complex22 = complex20.tanh();
        boolean boolean24 = complex22.equals((java.lang.Object) true);
        double double25 = complex22.getImaginary();
        org.apache.commons.math3.complex.Complex complex26 = complex22.sinh();
        org.apache.commons.math3.complex.Complex complex28 = complex22.multiply(0.0d);
        boolean boolean29 = org.apache.commons.math3.complex.Complex.equals(complex17, complex22);
        org.apache.commons.math3.complex.Complex complex31 = complex17.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex32 = complex31.log();
        org.apache.commons.math3.complex.Complex complex34 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex35 = complex34.cos();
        org.apache.commons.math3.complex.Complex complex36 = complex31.multiply(complex34);
        double double37 = complex36.abs();
        org.apache.commons.math3.complex.Complex complex39 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double40 = complex39.getReal();
        org.apache.commons.math3.complex.Complex complex42 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double43 = complex42.getReal();
        boolean boolean44 = org.apache.commons.math3.complex.Complex.equals(complex39, complex42);
        org.apache.commons.math3.complex.Complex complex46 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean48 = org.apache.commons.math3.complex.Complex.equals(complex39, complex46, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex49 = complex46.sin();
        org.apache.commons.math3.complex.Complex complex50 = complex49.log();
        org.apache.commons.math3.complex.Complex complex51 = complex49.reciprocal();
        org.apache.commons.math3.complex.Complex complex52 = complex51.cos();
        org.apache.commons.math3.complex.Complex complex53 = complex52.conjugate();
        org.apache.commons.math3.complex.Complex complex55 = complex52.add(1.8414709848078965d);
        org.apache.commons.math3.complex.Complex complex56 = complex36.divide(complex52);
        boolean boolean57 = org.apache.commons.math3.complex.Complex.equals(complex15, complex52);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-1.0d) + "'", double11 == (-1.0d));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complexField13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.0d) + "'", double18 == (-1.0d));
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-1.0d) + "'", double40 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-1.0d) + "'", double43 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test195");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf(7.896296018268069E13d, 0.9999999958776927d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test196");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf(0.352135490546587d, 7.896296018268069E13d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test197");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex((double) (byte) -1, (double) 'a');
        org.apache.commons.math3.complex.Complex complex3 = complex2.sinh();
        org.apache.commons.math3.complex.Complex complex4 = complex2.exp();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test198");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex(0.0d, 3.296908309475615d);
        org.apache.commons.math3.complex.Complex complex3 = complex2.atan();
        org.apache.commons.math3.complex.Complex complex4 = complex2.tan();
        java.util.List<org.apache.commons.math3.complex.Complex> complexList6 = complex2.nthRoot((int) (short) 100);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complexList6);
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test199");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) ' ');
        java.lang.Class<?> wildcardClass2 = complex1.getClass();
        boolean boolean3 = complex1.isNaN();
        org.apache.commons.math3.complex.Complex complex5 = complex1.pow(3.1415926535897927d);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(complex5);
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test200");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math3.complex.Complex complex6 = complex4.tanh();
        boolean boolean8 = complex6.equals((java.lang.Object) true);
        double double9 = complex6.getImaginary();
        org.apache.commons.math3.complex.Complex complex10 = complex6.sinh();
        org.apache.commons.math3.complex.Complex complex12 = complex6.multiply(0.0d);
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex1, complex6);
        org.apache.commons.math3.complex.Complex complex15 = complex1.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex16 = complex15.log();
        double double17 = complex15.getArgument();
        org.apache.commons.math3.complex.Complex complex18 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double21 = complex20.getReal();
        org.apache.commons.math3.complex.Complex complex23 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math3.complex.Complex complex25 = complex23.tanh();
        boolean boolean27 = complex25.equals((java.lang.Object) true);
        double double28 = complex25.getImaginary();
        org.apache.commons.math3.complex.Complex complex29 = complex25.sinh();
        org.apache.commons.math3.complex.Complex complex31 = complex25.multiply(0.0d);
        boolean boolean32 = org.apache.commons.math3.complex.Complex.equals(complex20, complex25);
        org.apache.commons.math3.complex.Complex complex34 = complex20.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex35 = complex18.subtract(complex34);
        org.apache.commons.math3.complex.Complex complex37 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double38 = complex37.getReal();
        double double39 = complex37.getReal();
        org.apache.commons.math3.complex.Complex complex40 = complex37.tan();
        org.apache.commons.math3.complex.Complex complex41 = complex34.pow(complex40);
        org.apache.commons.math3.complex.Complex complex42 = complex41.asin();
        org.apache.commons.math3.complex.Complex complex43 = complex15.subtract(complex42);
        org.apache.commons.math3.complex.Complex complex44 = complex42.atan();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.9643867237284715E-15d + "'", double17 == 1.9643867237284715E-15d);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1.0d) + "'", double21 == (-1.0d));
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-1.0d) + "'", double38 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-1.0d) + "'", double39 == (-1.0d));
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test201");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf((double) (byte) 1, (double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math3.complex.Complex complex4 = complex2.tanh();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test202");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (short) 10);
        org.apache.commons.math3.complex.Complex complex3 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex4 = complex3.sqrt();
        org.apache.commons.math3.complex.Complex complex5 = complex3.tanh();
        boolean boolean7 = complex5.equals((java.lang.Object) true);
        double double8 = complex5.getImaginary();
        org.apache.commons.math3.complex.Complex complex9 = complex5.sinh();
        org.apache.commons.math3.complex.Complex complex11 = complex5.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex15 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double16 = complex15.getReal();
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double19 = complex18.getReal();
        boolean boolean20 = org.apache.commons.math3.complex.Complex.equals(complex15, complex18);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex13, complex15, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex23 = complex13.log();
        org.apache.commons.math3.complex.Complex complex25 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double26 = complex25.getReal();
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double29 = complex28.getReal();
        boolean boolean30 = org.apache.commons.math3.complex.Complex.equals(complex25, complex28);
        org.apache.commons.math3.complex.Complex complex32 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean34 = org.apache.commons.math3.complex.Complex.equals(complex25, complex32, 10);
        org.apache.commons.math3.complex.Complex complex36 = complex32.pow((double) (byte) 1);
        boolean boolean37 = org.apache.commons.math3.complex.Complex.equals(complex13, complex36);
        org.apache.commons.math3.complex.Complex complex38 = complex13.reciprocal();
        boolean boolean40 = org.apache.commons.math3.complex.Complex.equals(complex11, complex13, (double) (byte) 1);
        org.apache.commons.math3.complex.Complex complex41 = complex1.divide(complex11);
        org.apache.commons.math3.complex.Complex complex42 = complex1.cos();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1.0d) + "'", double16 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.0d) + "'", double19 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-1.0d) + "'", double26 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1.0d) + "'", double29 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test203");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        org.apache.commons.math3.complex.Complex complex7 = new org.apache.commons.math3.complex.Complex((double) (short) 0);
        org.apache.commons.math3.complex.Complex complex8 = complex3.divide(complex7);
        org.apache.commons.math3.complex.Complex complex10 = complex3.add((double) 10.0f);
        org.apache.commons.math3.complex.Complex complex11 = complex10.negate();
        org.apache.commons.math3.complex.Complex complex12 = complex10.reciprocal();
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) ' ');
        org.apache.commons.math3.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math3.complex.Complex complex17 = complex14.multiply((int) (byte) -1);
        org.apache.commons.math3.complex.Complex complex18 = complex12.multiply(complex17);
        java.util.List<org.apache.commons.math3.complex.Complex> complexList20 = complex17.nthRoot((int) (byte) 1);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complexList20);
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test204");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double9 = complex8.getReal();
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex8, complex11);
        org.apache.commons.math3.complex.Complex complex14 = complex11.sqrt();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        org.apache.commons.math3.complex.Complex complex19 = complex16.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex20 = complex14.pow(complex19);
        org.apache.commons.math3.complex.Complex complex21 = complex4.multiply(complex20);
        org.apache.commons.math3.complex.Complex complex22 = complex20.sqrt1z();
        org.apache.commons.math3.complex.Complex complex23 = complex20.log();
        org.apache.commons.math3.complex.Complex complex25 = complex20.divide((-1.9643867237284715E-15d));
        org.apache.commons.math3.complex.Complex complex26 = complex25.tanh();
        double double27 = complex25.getImaginary();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.31171224697113936d + "'", double27 == 0.31171224697113936d);
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test205");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex11 = complex1.log();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, 10);
        org.apache.commons.math3.complex.Complex complex24 = complex20.pow((double) (byte) 1);
        boolean boolean25 = org.apache.commons.math3.complex.Complex.equals(complex1, complex24);
        org.apache.commons.math3.complex.Complex complex26 = complex1.cosh();
        org.apache.commons.math3.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math3.complex.Complex complex28 = complex26.exp();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test206");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex8 = complex3.cosh();
        org.apache.commons.math3.complex.ComplexField complexField9 = complex8.getField();
        double double10 = complex8.getImaginary();
        boolean boolean12 = complex8.equals((java.lang.Object) "");
        org.apache.commons.math3.complex.Complex complex13 = complex8.acos();
        org.apache.commons.math3.complex.Complex complex14 = complex8.negate();
        org.apache.commons.math3.complex.Complex complex15 = complex8.tanh();
        org.apache.commons.math3.complex.Complex complex16 = complex8.negate();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complexField9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test207");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex8 = complex3.cosh();
        double double9 = complex3.getImaginary();
        double double10 = complex3.abs();
        org.apache.commons.math3.complex.Complex complex12 = complex3.multiply((-1));
        org.apache.commons.math3.complex.Complex complex14 = complex3.multiply(0);
        org.apache.commons.math3.complex.ComplexField complexField15 = complex3.getField();
        org.apache.commons.math3.complex.Complex complex17 = complex3.pow((double) (byte) -1);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complexField15);
        org.junit.Assert.assertNotNull(complex17);
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test208");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex11 = complex1.log();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, 10);
        org.apache.commons.math3.complex.Complex complex24 = complex20.pow((double) (byte) 1);
        boolean boolean25 = org.apache.commons.math3.complex.Complex.equals(complex1, complex24);
        org.apache.commons.math3.complex.Complex complex27 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double28 = complex27.getReal();
        double double29 = complex27.getReal();
        org.apache.commons.math3.complex.Complex complex30 = complex27.tan();
        org.apache.commons.math3.complex.Complex complex31 = complex27.exp();
        org.apache.commons.math3.complex.Complex complex33 = complex27.multiply((double) 10);
        boolean boolean34 = org.apache.commons.math3.complex.Complex.equals(complex1, complex33);
        org.apache.commons.math3.complex.Complex complex35 = complex33.cosh();
        org.apache.commons.math3.complex.Complex complex38 = new org.apache.commons.math3.complex.Complex(0.0d, (double) ' ');
        org.apache.commons.math3.complex.Complex complex39 = complex38.asin();
        org.apache.commons.math3.complex.Complex complex40 = complex38.exp();
        org.apache.commons.math3.complex.Complex complex42 = complex40.divide(3.1415926535897927d);
        boolean boolean43 = complex42.isInfinite();
        org.apache.commons.math3.complex.Complex complex44 = complex42.tan();
        org.apache.commons.math3.complex.Complex complex46 = complex44.multiply((int) ' ');
        org.apache.commons.math3.complex.Complex complex47 = complex35.divide(complex44);
        org.apache.commons.math3.complex.Complex complex48 = complex35.log();
        org.apache.commons.math3.complex.Complex complex49 = complex48.sqrt1z();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-1.0d) + "'", double28 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1.0d) + "'", double29 == (-1.0d));
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test209");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex9 = complex3.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double15 = complex14.getReal();
        boolean boolean16 = org.apache.commons.math3.complex.Complex.equals(complex11, complex14);
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean20 = org.apache.commons.math3.complex.Complex.equals(complex11, complex18, 10);
        org.apache.commons.math3.complex.Complex complex22 = complex18.pow((double) (byte) 1);
        boolean boolean24 = org.apache.commons.math3.complex.Complex.equals(complex3, complex22, (int) (short) -1);
        org.apache.commons.math3.complex.ComplexField complexField25 = complex3.getField();
        org.apache.commons.math3.complex.Complex complex26 = complex3.exp();
        org.apache.commons.math3.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math3.complex.Complex complex29 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math3.complex.Complex complex31 = complex29.tanh();
        boolean boolean33 = complex31.equals((java.lang.Object) true);
        double double34 = complex31.getImaginary();
        org.apache.commons.math3.complex.Complex complex35 = complex31.sinh();
        org.apache.commons.math3.complex.Complex complex36 = complex31.cosh();
        org.apache.commons.math3.complex.Complex complex38 = complex36.subtract((double) 0L);
        boolean boolean39 = complex26.equals((java.lang.Object) 0L);
        org.apache.commons.math3.complex.Complex complex40 = complex26.log();
        org.apache.commons.math3.complex.Complex complex41 = complex26.acos();
        org.apache.commons.math3.complex.Complex complex42 = complex41.sin();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(complexField25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test210");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf((double) (short) 100);
        org.apache.commons.math3.complex.Complex complex2 = complex1.asin();
        double double3 = complex1.abs();
        boolean boolean4 = complex1.isNaN();
        double double5 = complex1.getImaginary();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 100.0d + "'", double3 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test211");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex8 = complex3.cosh();
        org.apache.commons.math3.complex.ComplexField complexField9 = complex8.getField();
        boolean boolean10 = complex8.isNaN();
        java.lang.String str11 = complex8.toString();
        boolean boolean12 = complex8.isInfinite();
        org.apache.commons.math3.complex.Complex complex14 = complex8.pow((-1.9643867237284715E-15d));
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complexField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "(1.0, 0.0)" + "'", str11.equals("(1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(complex14);
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test212");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        java.lang.String str11 = complex1.toString();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex23 = complex1.add(complex20);
        org.apache.commons.math3.complex.Complex complex24 = org.apache.commons.math3.complex.Complex.NaN;
        org.apache.commons.math3.complex.Complex complex25 = complex20.subtract(complex24);
        org.apache.commons.math3.complex.Complex complex27 = complex20.subtract((double) 100.0f);
        org.apache.commons.math3.complex.Complex complex29 = complex27.multiply((int) (byte) -1);
        org.apache.commons.math3.complex.Complex complex32 = new org.apache.commons.math3.complex.Complex(0.0d, (double) ' ');
        org.apache.commons.math3.complex.Complex complex33 = complex32.asin();
        boolean boolean34 = complex29.equals((java.lang.Object) complex33);
        org.apache.commons.math3.complex.Complex complex36 = complex29.pow(0.0d);
        org.apache.commons.math3.complex.Complex complex37 = complex29.sqrt();
        org.apache.commons.math3.complex.Complex complex38 = complex29.asin();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "(-1.0, 0.0)" + "'", str11.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test213");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex(0.8778963166742729d, 100.0d);
        org.apache.commons.math3.complex.Complex complex3 = complex2.negate();
        org.apache.commons.math3.complex.Complex complex5 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex6 = complex5.cos();
        org.apache.commons.math3.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math3.complex.Complex complex8 = complex6.reciprocal();
        org.apache.commons.math3.complex.Complex complex9 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        org.apache.commons.math3.complex.Complex complex14 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math3.complex.Complex complex16 = complex14.tanh();
        boolean boolean18 = complex16.equals((java.lang.Object) true);
        double double19 = complex16.getImaginary();
        org.apache.commons.math3.complex.Complex complex20 = complex16.sinh();
        org.apache.commons.math3.complex.Complex complex22 = complex16.multiply(0.0d);
        boolean boolean23 = org.apache.commons.math3.complex.Complex.equals(complex11, complex16);
        org.apache.commons.math3.complex.Complex complex25 = complex11.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex26 = complex9.subtract(complex25);
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double29 = complex28.getReal();
        org.apache.commons.math3.complex.Complex complex31 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double32 = complex31.getReal();
        boolean boolean33 = org.apache.commons.math3.complex.Complex.equals(complex28, complex31);
        org.apache.commons.math3.complex.Complex complex35 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex36 = complex35.sqrt();
        org.apache.commons.math3.complex.Complex complex37 = complex35.tanh();
        boolean boolean39 = complex37.equals((java.lang.Object) true);
        double double40 = complex37.getImaginary();
        org.apache.commons.math3.complex.Complex complex41 = complex37.sinh();
        org.apache.commons.math3.complex.Complex complex42 = complex37.cosh();
        double double43 = complex37.getImaginary();
        boolean boolean44 = complex31.equals((java.lang.Object) complex37);
        org.apache.commons.math3.complex.Complex complex45 = complex26.add(complex31);
        double double46 = complex45.getImaginary();
        org.apache.commons.math3.complex.Complex complex48 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex49 = complex48.sqrt();
        org.apache.commons.math3.complex.Complex complex50 = complex48.tanh();
        boolean boolean52 = complex50.equals((java.lang.Object) true);
        double double53 = complex50.getImaginary();
        org.apache.commons.math3.complex.Complex complex54 = complex50.sinh();
        org.apache.commons.math3.complex.Complex complex56 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex58 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double59 = complex58.getReal();
        org.apache.commons.math3.complex.Complex complex61 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double62 = complex61.getReal();
        boolean boolean63 = org.apache.commons.math3.complex.Complex.equals(complex58, complex61);
        boolean boolean65 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex56, complex58, (double) 0.0f);
        java.lang.String str66 = complex56.toString();
        org.apache.commons.math3.complex.Complex complex68 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double69 = complex68.getReal();
        org.apache.commons.math3.complex.Complex complex71 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double72 = complex71.getReal();
        boolean boolean73 = org.apache.commons.math3.complex.Complex.equals(complex68, complex71);
        org.apache.commons.math3.complex.Complex complex75 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean77 = org.apache.commons.math3.complex.Complex.equals(complex68, complex75, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex78 = complex56.add(complex75);
        org.apache.commons.math3.complex.Complex complex79 = complex54.multiply(complex78);
        org.apache.commons.math3.complex.Complex complex81 = complex79.divide((double) 1L);
        org.apache.commons.math3.complex.Complex complex82 = complex45.pow(complex81);
        org.apache.commons.math3.complex.Complex complex83 = complex6.add(complex82);
        org.apache.commons.math3.complex.Complex complex84 = complex2.subtract(complex82);
        org.apache.commons.math3.complex.Complex complex86 = complex2.multiply(100);
        org.apache.commons.math3.complex.Complex complex87 = complex2.atan();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1.0d) + "'", double29 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-1.0d) + "'", double32 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1.9643867237284715E-15d) + "'", double46 == (-1.9643867237284715E-15d));
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + (-1.0d) + "'", double59 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-1.0d) + "'", double62 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + str66 + "' != '" + "(-1.0, 0.0)" + "'", str66.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + (-1.0d) + "'", double69 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + (-1.0d) + "'", double72 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test214");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex11 = complex1.log();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, 10);
        org.apache.commons.math3.complex.Complex complex24 = complex20.pow((double) (byte) 1);
        boolean boolean25 = org.apache.commons.math3.complex.Complex.equals(complex1, complex24);
        org.apache.commons.math3.complex.Complex complex26 = complex1.reciprocal();
        org.apache.commons.math3.complex.Complex complex27 = complex1.cosh();
        org.apache.commons.math3.complex.Complex complex28 = complex1.acos();
        org.apache.commons.math3.complex.Complex complex29 = complex1.sinh();
        double double30 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex31 = complex1.reciprocal();
        org.apache.commons.math3.complex.Complex complex33 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex35 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double36 = complex35.getReal();
        org.apache.commons.math3.complex.Complex complex38 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double39 = complex38.getReal();
        boolean boolean40 = org.apache.commons.math3.complex.Complex.equals(complex35, complex38);
        boolean boolean42 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex33, complex35, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex43 = complex33.log();
        org.apache.commons.math3.complex.Complex complex45 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double46 = complex45.getReal();
        org.apache.commons.math3.complex.Complex complex48 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double49 = complex48.getReal();
        boolean boolean50 = org.apache.commons.math3.complex.Complex.equals(complex45, complex48);
        org.apache.commons.math3.complex.Complex complex52 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean54 = org.apache.commons.math3.complex.Complex.equals(complex45, complex52, 10);
        org.apache.commons.math3.complex.Complex complex56 = complex52.pow((double) (byte) 1);
        boolean boolean57 = org.apache.commons.math3.complex.Complex.equals(complex33, complex56);
        org.apache.commons.math3.complex.Complex complex58 = complex33.reciprocal();
        org.apache.commons.math3.complex.Complex complex59 = complex33.cosh();
        org.apache.commons.math3.complex.Complex complex61 = complex33.multiply(Double.NaN);
        org.apache.commons.math3.complex.Complex complex63 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex65 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double66 = complex65.getReal();
        org.apache.commons.math3.complex.Complex complex68 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double69 = complex68.getReal();
        boolean boolean70 = org.apache.commons.math3.complex.Complex.equals(complex65, complex68);
        boolean boolean72 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex63, complex65, (double) 0.0f);
        double double73 = complex65.getReal();
        org.apache.commons.math3.complex.Complex complex74 = complex65.exp();
        java.lang.Class<?> wildcardClass75 = complex65.getClass();
        org.apache.commons.math3.complex.Complex complex76 = complex33.subtract(complex65);
        org.apache.commons.math3.complex.Complex complex77 = complex1.divide(complex65);
        boolean boolean78 = complex1.isInfinite();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1.0d) + "'", double30 == (-1.0d));
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-1.0d) + "'", double36 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-1.0d) + "'", double39 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1.0d) + "'", double46 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-1.0d) + "'", double49 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + (-1.0d) + "'", double66 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + (-1.0d) + "'", double69 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + (-1.0d) + "'", double73 == (-1.0d));
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test215");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.cos();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        org.apache.commons.math3.complex.Complex complex9 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double10 = complex9.getReal();
        boolean boolean11 = org.apache.commons.math3.complex.Complex.equals(complex6, complex9);
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex4, complex6, (double) 0.0f);
        java.lang.String str14 = complex4.toString();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        org.apache.commons.math3.complex.Complex complex19 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double20 = complex19.getReal();
        boolean boolean21 = org.apache.commons.math3.complex.Complex.equals(complex16, complex19);
        org.apache.commons.math3.complex.Complex complex23 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean25 = org.apache.commons.math3.complex.Complex.equals(complex16, complex23, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex26 = complex4.add(complex23);
        java.lang.String str27 = complex23.toString();
        org.apache.commons.math3.complex.Complex complex29 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex30 = complex23.divide(complex29);
        org.apache.commons.math3.complex.ComplexField complexField31 = complex29.getField();
        boolean boolean33 = org.apache.commons.math3.complex.Complex.equals(complex1, complex29, (-1));
        boolean boolean34 = complex29.isInfinite();
        org.apache.commons.math3.complex.Complex complex36 = complex29.multiply((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex38 = complex36.pow((double) 'a');
        org.apache.commons.math3.complex.Complex complex39 = complex36.conjugate();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "(-1.0, 0.0)" + "'", str14.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1.0d) + "'", double20 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "(-1.0, 0.0)" + "'", str27.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexField31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test216");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex8 = complex3.cosh();
        double double9 = complex3.getImaginary();
        double double10 = complex3.abs();
        org.apache.commons.math3.complex.Complex complex12 = complex3.multiply((-1));
        org.apache.commons.math3.complex.Complex complex14 = complex3.multiply(0);
        org.apache.commons.math3.complex.Complex complex15 = complex3.negate();
        org.apache.commons.math3.complex.Complex complex16 = complex15.sin();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test217");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf(0.0d, 0.36787944117144233d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test218");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex(0.8778963166742729d, 100.0d);
        org.apache.commons.math3.complex.Complex complex3 = complex2.negate();
        org.apache.commons.math3.complex.Complex complex5 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex6 = complex5.cos();
        org.apache.commons.math3.complex.Complex complex7 = complex6.exp();
        org.apache.commons.math3.complex.Complex complex8 = complex6.reciprocal();
        org.apache.commons.math3.complex.Complex complex9 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        org.apache.commons.math3.complex.Complex complex14 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math3.complex.Complex complex16 = complex14.tanh();
        boolean boolean18 = complex16.equals((java.lang.Object) true);
        double double19 = complex16.getImaginary();
        org.apache.commons.math3.complex.Complex complex20 = complex16.sinh();
        org.apache.commons.math3.complex.Complex complex22 = complex16.multiply(0.0d);
        boolean boolean23 = org.apache.commons.math3.complex.Complex.equals(complex11, complex16);
        org.apache.commons.math3.complex.Complex complex25 = complex11.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex26 = complex9.subtract(complex25);
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double29 = complex28.getReal();
        org.apache.commons.math3.complex.Complex complex31 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double32 = complex31.getReal();
        boolean boolean33 = org.apache.commons.math3.complex.Complex.equals(complex28, complex31);
        org.apache.commons.math3.complex.Complex complex35 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex36 = complex35.sqrt();
        org.apache.commons.math3.complex.Complex complex37 = complex35.tanh();
        boolean boolean39 = complex37.equals((java.lang.Object) true);
        double double40 = complex37.getImaginary();
        org.apache.commons.math3.complex.Complex complex41 = complex37.sinh();
        org.apache.commons.math3.complex.Complex complex42 = complex37.cosh();
        double double43 = complex37.getImaginary();
        boolean boolean44 = complex31.equals((java.lang.Object) complex37);
        org.apache.commons.math3.complex.Complex complex45 = complex26.add(complex31);
        double double46 = complex45.getImaginary();
        org.apache.commons.math3.complex.Complex complex48 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex49 = complex48.sqrt();
        org.apache.commons.math3.complex.Complex complex50 = complex48.tanh();
        boolean boolean52 = complex50.equals((java.lang.Object) true);
        double double53 = complex50.getImaginary();
        org.apache.commons.math3.complex.Complex complex54 = complex50.sinh();
        org.apache.commons.math3.complex.Complex complex56 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex58 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double59 = complex58.getReal();
        org.apache.commons.math3.complex.Complex complex61 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double62 = complex61.getReal();
        boolean boolean63 = org.apache.commons.math3.complex.Complex.equals(complex58, complex61);
        boolean boolean65 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex56, complex58, (double) 0.0f);
        java.lang.String str66 = complex56.toString();
        org.apache.commons.math3.complex.Complex complex68 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double69 = complex68.getReal();
        org.apache.commons.math3.complex.Complex complex71 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double72 = complex71.getReal();
        boolean boolean73 = org.apache.commons.math3.complex.Complex.equals(complex68, complex71);
        org.apache.commons.math3.complex.Complex complex75 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean77 = org.apache.commons.math3.complex.Complex.equals(complex68, complex75, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex78 = complex56.add(complex75);
        org.apache.commons.math3.complex.Complex complex79 = complex54.multiply(complex78);
        org.apache.commons.math3.complex.Complex complex81 = complex79.divide((double) 1L);
        org.apache.commons.math3.complex.Complex complex82 = complex45.pow(complex81);
        org.apache.commons.math3.complex.Complex complex83 = complex6.add(complex82);
        org.apache.commons.math3.complex.Complex complex84 = complex2.subtract(complex82);
        org.apache.commons.math3.complex.Complex complex85 = complex82.reciprocal();
        org.apache.commons.math3.complex.Complex complex87 = complex85.divide(10.841470984807897d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1.0d) + "'", double29 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-1.0d) + "'", double32 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1.9643867237284715E-15d) + "'", double46 == (-1.9643867237284715E-15d));
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + (-1.0d) + "'", double59 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-1.0d) + "'", double62 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + str66 + "' != '" + "(-1.0, 0.0)" + "'", str66.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + (-1.0d) + "'", double69 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + (-1.0d) + "'", double72 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex87);
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test219");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.cos();
        org.apache.commons.math3.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math3.complex.Complex complex4 = complex2.reciprocal();
        org.apache.commons.math3.complex.Complex complex6 = complex4.add((double) (-1));
        org.apache.commons.math3.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math3.complex.Complex complex8 = complex7.sin();
        org.apache.commons.math3.complex.Complex complex9 = complex7.tan();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test220");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math3.complex.Complex complex6 = complex4.tanh();
        boolean boolean8 = complex6.equals((java.lang.Object) true);
        double double9 = complex6.getImaginary();
        org.apache.commons.math3.complex.Complex complex10 = complex6.sinh();
        org.apache.commons.math3.complex.Complex complex12 = complex6.multiply(0.0d);
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex1, complex6);
        org.apache.commons.math3.complex.Complex complex15 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math3.complex.Complex complex17 = complex15.sqrt1z();
        org.apache.commons.math3.complex.Complex complex18 = complex6.subtract(complex15);
        org.apache.commons.math3.complex.Complex complex19 = complex18.reciprocal();
        org.apache.commons.math3.complex.Complex complex20 = complex19.acos();
        org.apache.commons.math3.complex.Complex complex21 = complex20.sin();
        org.apache.commons.math3.complex.Complex complex23 = complex20.divide((double) (short) 0);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex23);
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test221");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double9 = complex8.getReal();
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex8, complex11);
        org.apache.commons.math3.complex.Complex complex15 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean17 = org.apache.commons.math3.complex.Complex.equals(complex8, complex15, 10);
        org.apache.commons.math3.complex.Complex complex19 = complex15.pow((double) (byte) 1);
        boolean boolean21 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex3, complex15, (double) (-1));
        org.apache.commons.math3.complex.Complex complex22 = complex3.sqrt();
        org.apache.commons.math3.complex.Complex complex23 = complex3.cosh();
        boolean boolean24 = complex23.isInfinite();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test222");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = complex1.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex5 = complex1.log();
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) 10, (-2.0d));
        org.apache.commons.math3.complex.Complex complex9 = complex5.subtract(complex8);
        org.apache.commons.math3.complex.Complex complex10 = complex5.sqrt1z();
        org.apache.commons.math3.complex.Complex complex11 = complex5.sqrt();
        org.apache.commons.math3.complex.Complex complex14 = org.apache.commons.math3.complex.Complex.valueOf(100.0d, (double) (short) 0);
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        org.apache.commons.math3.complex.Complex complex19 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double20 = complex19.getReal();
        boolean boolean21 = org.apache.commons.math3.complex.Complex.equals(complex16, complex19);
        org.apache.commons.math3.complex.Complex complex23 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double24 = complex23.getReal();
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double27 = complex26.getReal();
        boolean boolean28 = org.apache.commons.math3.complex.Complex.equals(complex23, complex26);
        org.apache.commons.math3.complex.Complex complex29 = complex26.sqrt();
        org.apache.commons.math3.complex.Complex complex31 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double32 = complex31.getReal();
        org.apache.commons.math3.complex.Complex complex34 = complex31.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex35 = complex29.pow(complex34);
        org.apache.commons.math3.complex.Complex complex36 = complex19.multiply(complex35);
        org.apache.commons.math3.complex.Complex complex37 = complex35.sqrt1z();
        org.apache.commons.math3.complex.Complex complex38 = complex14.divide(complex35);
        org.apache.commons.math3.complex.Complex complex39 = complex38.log();
        org.apache.commons.math3.complex.Complex complex40 = complex5.pow(complex38);
        org.apache.commons.math3.complex.Complex complex42 = complex38.multiply(0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1.0d) + "'", double20 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1.0d) + "'", double24 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1.0d) + "'", double27 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-1.0d) + "'", double32 == (-1.0d));
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex42);
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test223");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        double double4 = complex3.abs();
        org.apache.commons.math3.complex.Complex complex5 = complex3.cosh();
        boolean boolean6 = complex5.isNaN();
        org.apache.commons.math3.complex.Complex complex7 = complex5.tanh();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(complex7);
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test224");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex9 = complex3.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        boolean boolean20 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex11, complex13, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex22 = complex13.multiply(1);
        org.apache.commons.math3.complex.Complex complex23 = complex13.conjugate();
        boolean boolean25 = org.apache.commons.math3.complex.Complex.equals(complex9, complex13, (int) (short) 100);
        org.apache.commons.math3.complex.Complex complex27 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex28 = complex27.sqrt();
        org.apache.commons.math3.complex.Complex complex29 = complex27.tanh();
        double double30 = complex29.abs();
        org.apache.commons.math3.complex.Complex complex31 = complex29.exp();
        org.apache.commons.math3.complex.Complex complex32 = complex31.negate();
        org.apache.commons.math3.complex.Complex complex33 = complex31.sin();
        org.apache.commons.math3.complex.Complex complex34 = complex9.subtract(complex33);
        double double35 = complex33.abs();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8414709848078965d + "'", double35 == 0.8414709848078965d);
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test225");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex(0.0d, (double) ' ');
        org.apache.commons.math3.complex.Complex complex3 = complex2.asin();
        org.apache.commons.math3.complex.Complex complex4 = complex2.exp();
        org.apache.commons.math3.complex.Complex complex6 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math3.complex.Complex complex8 = complex6.tanh();
        boolean boolean10 = complex8.equals((java.lang.Object) true);
        double double11 = complex8.getImaginary();
        org.apache.commons.math3.complex.Complex complex12 = complex8.sinh();
        org.apache.commons.math3.complex.Complex complex14 = complex8.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double19 = complex18.getReal();
        org.apache.commons.math3.complex.Complex complex21 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double22 = complex21.getReal();
        boolean boolean23 = org.apache.commons.math3.complex.Complex.equals(complex18, complex21);
        boolean boolean25 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex16, complex18, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex26 = complex16.log();
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double29 = complex28.getReal();
        org.apache.commons.math3.complex.Complex complex31 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double32 = complex31.getReal();
        boolean boolean33 = org.apache.commons.math3.complex.Complex.equals(complex28, complex31);
        org.apache.commons.math3.complex.Complex complex35 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean37 = org.apache.commons.math3.complex.Complex.equals(complex28, complex35, 10);
        org.apache.commons.math3.complex.Complex complex39 = complex35.pow((double) (byte) 1);
        boolean boolean40 = org.apache.commons.math3.complex.Complex.equals(complex16, complex39);
        org.apache.commons.math3.complex.Complex complex41 = complex16.reciprocal();
        boolean boolean43 = org.apache.commons.math3.complex.Complex.equals(complex14, complex16, (double) (byte) 1);
        org.apache.commons.math3.complex.Complex complex45 = complex16.multiply(0);
        org.apache.commons.math3.complex.Complex complex46 = complex16.reciprocal();
        org.apache.commons.math3.complex.Complex complex47 = complex46.exp();
        double double48 = complex46.getArgument();
        org.apache.commons.math3.complex.ComplexField complexField49 = complex46.getField();
        org.apache.commons.math3.complex.Complex complex51 = complex46.subtract((double) '#');
        boolean boolean53 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex2, complex46, 0.7615941559557649d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.0d) + "'", double19 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1.0d) + "'", double29 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-1.0d) + "'", double32 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-3.141592653589793d) + "'", double48 == (-3.141592653589793d));
        org.junit.Assert.assertNotNull(complexField49);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test226");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        java.lang.String str11 = complex1.toString();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex23 = complex1.add(complex20);
        org.apache.commons.math3.complex.Complex complex24 = org.apache.commons.math3.complex.Complex.NaN;
        org.apache.commons.math3.complex.Complex complex25 = complex20.subtract(complex24);
        org.apache.commons.math3.complex.Complex complex27 = complex20.subtract((double) 100.0f);
        org.apache.commons.math3.complex.Complex complex29 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math3.complex.Complex complex31 = complex29.tanh();
        boolean boolean33 = complex31.equals((java.lang.Object) true);
        double double34 = complex31.getImaginary();
        org.apache.commons.math3.complex.Complex complex35 = complex31.sinh();
        org.apache.commons.math3.complex.Complex complex36 = complex27.pow(complex31);
        org.apache.commons.math3.complex.Complex complex37 = complex27.reciprocal();
        org.apache.commons.math3.complex.Complex complex38 = complex37.negate();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "(-1.0, 0.0)" + "'", str11.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test227");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = complex1.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex5 = complex1.log();
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) 10, (-2.0d));
        org.apache.commons.math3.complex.Complex complex9 = complex5.subtract(complex8);
        org.apache.commons.math3.complex.Complex complex10 = complex5.sqrt1z();
        org.apache.commons.math3.complex.Complex complex11 = complex5.sqrt();
        org.apache.commons.math3.complex.Complex complex13 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math3.complex.Complex complex15 = complex13.sqrt1z();
        org.apache.commons.math3.complex.Complex complex16 = complex15.reciprocal();
        org.apache.commons.math3.complex.Complex complex17 = complex11.multiply(complex16);
        org.apache.commons.math3.complex.Complex complex19 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex20 = complex19.conjugate();
        org.apache.commons.math3.complex.Complex complex21 = complex20.sin();
        org.apache.commons.math3.complex.Complex complex22 = complex21.sinh();
        org.apache.commons.math3.complex.Complex complex23 = complex21.acos();
        org.apache.commons.math3.complex.Complex complex24 = complex11.pow(complex23);
        org.apache.commons.math3.complex.Complex complex26 = complex11.multiply((int) (short) -1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex26);
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test228");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex11 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex12 = complex11.asin();
        org.apache.commons.math3.complex.Complex complex13 = complex11.tanh();
        org.apache.commons.math3.complex.Complex complex14 = complex13.sin();
        boolean boolean15 = complex3.equals((java.lang.Object) complex13);
        org.apache.commons.math3.complex.Complex complex17 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double18 = complex17.getReal();
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double21 = complex20.getReal();
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex17, complex20);
        org.apache.commons.math3.complex.Complex complex24 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean26 = org.apache.commons.math3.complex.Complex.equals(complex17, complex24, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (short) 10);
        double double29 = complex28.getReal();
        boolean boolean30 = complex17.equals((java.lang.Object) complex28);
        org.apache.commons.math3.complex.Complex complex32 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double33 = complex32.getReal();
        double double34 = complex32.getReal();
        boolean boolean35 = complex17.equals((java.lang.Object) complex32);
        org.apache.commons.math3.complex.Complex complex36 = complex3.pow(complex32);
        org.apache.commons.math3.complex.Complex complex38 = complex3.add((-10.0d));
        org.apache.commons.math3.complex.Complex complex40 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double41 = complex40.getReal();
        org.apache.commons.math3.complex.Complex complex43 = complex40.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex44 = complex40.log();
        org.apache.commons.math3.complex.Complex complex45 = complex44.reciprocal();
        org.apache.commons.math3.complex.Complex complex46 = complex45.acos();
        boolean boolean47 = complex3.equals((java.lang.Object) complex45);
        org.apache.commons.math3.complex.Complex complex48 = complex3.log();
        org.apache.commons.math3.complex.Complex complex49 = complex3.cos();
        org.apache.commons.math3.complex.Complex complex51 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex52 = complex51.sqrt();
        org.apache.commons.math3.complex.Complex complex53 = complex51.tanh();
        boolean boolean55 = complex53.equals((java.lang.Object) true);
        double double56 = complex53.getImaginary();
        org.apache.commons.math3.complex.Complex complex57 = complex53.sinh();
        org.apache.commons.math3.complex.Complex complex59 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex61 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double62 = complex61.getReal();
        org.apache.commons.math3.complex.Complex complex64 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double65 = complex64.getReal();
        boolean boolean66 = org.apache.commons.math3.complex.Complex.equals(complex61, complex64);
        boolean boolean68 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex59, complex61, (double) 0.0f);
        java.lang.String str69 = complex59.toString();
        org.apache.commons.math3.complex.Complex complex71 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double72 = complex71.getReal();
        org.apache.commons.math3.complex.Complex complex74 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double75 = complex74.getReal();
        boolean boolean76 = org.apache.commons.math3.complex.Complex.equals(complex71, complex74);
        org.apache.commons.math3.complex.Complex complex78 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean80 = org.apache.commons.math3.complex.Complex.equals(complex71, complex78, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex81 = complex59.add(complex78);
        org.apache.commons.math3.complex.Complex complex82 = complex57.multiply(complex81);
        org.apache.commons.math3.complex.Complex complex84 = complex82.divide((double) 1L);
        boolean boolean86 = org.apache.commons.math3.complex.Complex.equals(complex49, complex82, (double) (short) -1);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.0d) + "'", double18 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1.0d) + "'", double21 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-1.0d) + "'", double33 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-1.0d) + "'", double41 == (-1.0d));
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-1.0d) + "'", double62 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + (-1.0d) + "'", double65 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + str69 + "' != '" + "(-1.0, 0.0)" + "'", str69.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + (-1.0d) + "'", double72 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + (-1.0d) + "'", double75 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test229");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex9 = complex8.sqrt();
        org.apache.commons.math3.complex.Complex complex10 = complex8.tanh();
        boolean boolean12 = complex10.equals((java.lang.Object) true);
        double double13 = complex10.getImaginary();
        org.apache.commons.math3.complex.Complex complex14 = complex10.sinh();
        org.apache.commons.math3.complex.Complex complex15 = complex10.cosh();
        double double16 = complex10.getImaginary();
        boolean boolean17 = complex4.equals((java.lang.Object) complex10);
        org.apache.commons.math3.complex.Complex complex18 = complex4.acos();
        boolean boolean19 = complex4.isNaN();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test230");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex(3.136592820246461d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.conjugate();
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test231");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math3.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math3.complex.Complex complex6 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex7 = complex6.sqrt();
        boolean boolean9 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6, (int) (byte) -1);
        org.apache.commons.math3.complex.Complex complex10 = complex3.conjugate();
        org.apache.commons.math3.complex.Complex complex11 = complex10.asin();
        org.apache.commons.math3.complex.Complex complex13 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex14 = complex13.conjugate();
        org.apache.commons.math3.complex.Complex complex15 = complex14.sin();
        org.apache.commons.math3.complex.Complex complex16 = complex11.add(complex14);
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double19 = complex18.getReal();
        org.apache.commons.math3.complex.Complex complex21 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double22 = complex21.getReal();
        boolean boolean23 = org.apache.commons.math3.complex.Complex.equals(complex18, complex21);
        org.apache.commons.math3.complex.Complex complex25 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean27 = org.apache.commons.math3.complex.Complex.equals(complex18, complex25, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex29 = new org.apache.commons.math3.complex.Complex((double) (short) 10);
        double double30 = complex29.getReal();
        boolean boolean31 = complex18.equals((java.lang.Object) complex29);
        org.apache.commons.math3.complex.Complex complex33 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double34 = complex33.getReal();
        double double35 = complex33.getReal();
        boolean boolean36 = complex18.equals((java.lang.Object) complex33);
        boolean boolean38 = org.apache.commons.math3.complex.Complex.equals(complex11, complex18, (-1));
        org.apache.commons.math3.complex.Complex complex39 = complex18.cosh();
        boolean boolean40 = complex18.isInfinite();
        org.apache.commons.math3.complex.ComplexField complexField41 = complex18.getField();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.0d) + "'", double19 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-1.0d) + "'", double35 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(complexField41);
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test232");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        double double11 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex12 = complex3.exp();
        org.apache.commons.math3.complex.Complex complex13 = complex3.tan();
        org.apache.commons.math3.complex.Complex complex15 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double16 = complex15.getReal();
        org.apache.commons.math3.complex.Complex complex18 = complex15.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex19 = complex15.log();
        org.apache.commons.math3.complex.Complex complex20 = complex19.reciprocal();
        boolean boolean21 = complex19.isNaN();
        org.apache.commons.math3.complex.Complex complex22 = complex19.tanh();
        org.apache.commons.math3.complex.Complex complex24 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double25 = complex24.getReal();
        org.apache.commons.math3.complex.Complex complex27 = complex24.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex28 = complex24.log();
        org.apache.commons.math3.complex.Complex complex31 = new org.apache.commons.math3.complex.Complex((double) (byte) 10, (-2.0d));
        org.apache.commons.math3.complex.Complex complex32 = complex28.subtract(complex31);
        org.apache.commons.math3.complex.Complex complex33 = complex28.sqrt1z();
        org.apache.commons.math3.complex.Complex complex34 = complex33.sqrt1z();
        boolean boolean35 = org.apache.commons.math3.complex.Complex.equals(complex19, complex33);
        org.apache.commons.math3.complex.Complex complex36 = complex19.asin();
        boolean boolean38 = org.apache.commons.math3.complex.Complex.equals(complex3, complex19, (int) ' ');
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-1.0d) + "'", double11 == (-1.0d));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1.0d) + "'", double16 == (-1.0d));
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test233");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex((double) (short) 100, (-2.0d));
        org.apache.commons.math3.complex.Complex complex3 = complex2.negate();
        org.apache.commons.math3.complex.Complex complex4 = complex3.exp();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test234");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math3.complex.Complex complex6 = complex4.tanh();
        boolean boolean8 = complex6.equals((java.lang.Object) true);
        double double9 = complex6.getImaginary();
        org.apache.commons.math3.complex.Complex complex10 = complex6.sinh();
        org.apache.commons.math3.complex.Complex complex12 = complex6.multiply(0.0d);
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex1, complex6);
        org.apache.commons.math3.complex.Complex complex15 = complex1.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex16 = complex15.log();
        org.apache.commons.math3.complex.Complex complex18 = complex16.add(3.1415926535897927d);
        org.apache.commons.math3.complex.Complex complex19 = complex16.sqrt();
        org.apache.commons.math3.complex.Complex complex20 = complex19.sin();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test235");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = complex1.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex5 = complex1.log();
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) 10, (-2.0d));
        org.apache.commons.math3.complex.Complex complex9 = complex5.subtract(complex8);
        org.apache.commons.math3.complex.Complex complex10 = complex5.sqrt1z();
        org.apache.commons.math3.complex.Complex complex11 = complex5.sqrt();
        org.apache.commons.math3.complex.Complex complex14 = org.apache.commons.math3.complex.Complex.valueOf(100.0d, (double) (short) 0);
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        org.apache.commons.math3.complex.Complex complex19 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double20 = complex19.getReal();
        boolean boolean21 = org.apache.commons.math3.complex.Complex.equals(complex16, complex19);
        org.apache.commons.math3.complex.Complex complex23 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double24 = complex23.getReal();
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double27 = complex26.getReal();
        boolean boolean28 = org.apache.commons.math3.complex.Complex.equals(complex23, complex26);
        org.apache.commons.math3.complex.Complex complex29 = complex26.sqrt();
        org.apache.commons.math3.complex.Complex complex31 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double32 = complex31.getReal();
        org.apache.commons.math3.complex.Complex complex34 = complex31.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex35 = complex29.pow(complex34);
        org.apache.commons.math3.complex.Complex complex36 = complex19.multiply(complex35);
        org.apache.commons.math3.complex.Complex complex37 = complex35.sqrt1z();
        org.apache.commons.math3.complex.Complex complex38 = complex14.divide(complex35);
        org.apache.commons.math3.complex.Complex complex39 = complex38.log();
        org.apache.commons.math3.complex.Complex complex40 = complex5.pow(complex38);
        org.apache.commons.math3.complex.Complex complex42 = complex38.divide((-100.0d));
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1.0d) + "'", double20 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1.0d) + "'", double24 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1.0d) + "'", double27 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-1.0d) + "'", double32 == (-1.0d));
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex42);
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test236");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        double double2 = complex1.abs();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertNotNull(complex3);
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test237");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math3.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math3.complex.Complex complex6 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex7 = complex6.sqrt();
        boolean boolean9 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6, (int) (byte) -1);
        org.apache.commons.math3.complex.Complex complex10 = complex3.cosh();
        org.apache.commons.math3.complex.Complex complex12 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math3.complex.Complex complex14 = complex12.tanh();
        boolean boolean16 = complex14.equals((java.lang.Object) true);
        double double17 = complex14.getImaginary();
        boolean boolean19 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex10, complex14, (double) (short) 0);
        org.apache.commons.math3.complex.ComplexField complexField20 = complex10.getField();
        org.apache.commons.math3.complex.Complex complex22 = complex10.pow((-10.0d));
        org.apache.commons.math3.complex.Complex complex24 = complex22.multiply((int) '4');
        java.util.List<org.apache.commons.math3.complex.Complex> complexList26 = complex24.nthRoot((int) (short) 1);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(complexField20);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complexList26);
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test238");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(3.1415926535897927d);
        org.junit.Assert.assertNotNull(complex1);
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test239");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf((double) 1.0f);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex5 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double6 = complex5.getReal();
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double9 = complex8.getReal();
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equals(complex5, complex8);
        boolean boolean12 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex3, complex5, (double) 0.0f);
        java.lang.String str13 = complex3.toString();
        org.apache.commons.math3.complex.Complex complex15 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double16 = complex15.getReal();
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double19 = complex18.getReal();
        boolean boolean20 = org.apache.commons.math3.complex.Complex.equals(complex15, complex18);
        org.apache.commons.math3.complex.Complex complex22 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean24 = org.apache.commons.math3.complex.Complex.equals(complex15, complex22, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex25 = complex3.add(complex22);
        java.lang.String str26 = complex22.toString();
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex29 = complex22.divide(complex28);
        org.apache.commons.math3.complex.Complex complex30 = complex29.exp();
        org.apache.commons.math3.complex.Complex complex31 = complex1.multiply(complex30);
        org.apache.commons.math3.complex.Complex complex32 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex34 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double35 = complex34.getReal();
        org.apache.commons.math3.complex.Complex complex37 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex38 = complex37.sqrt();
        org.apache.commons.math3.complex.Complex complex39 = complex37.tanh();
        boolean boolean41 = complex39.equals((java.lang.Object) true);
        double double42 = complex39.getImaginary();
        org.apache.commons.math3.complex.Complex complex43 = complex39.sinh();
        org.apache.commons.math3.complex.Complex complex45 = complex39.multiply(0.0d);
        boolean boolean46 = org.apache.commons.math3.complex.Complex.equals(complex34, complex39);
        org.apache.commons.math3.complex.Complex complex48 = complex34.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex49 = complex32.subtract(complex48);
        org.apache.commons.math3.complex.Complex complex50 = complex49.exp();
        org.apache.commons.math3.complex.Complex complex51 = complex30.subtract(complex50);
        org.apache.commons.math3.complex.Complex complex52 = complex50.log();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.0d) + "'", double6 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "(-1.0, 0.0)" + "'", str13.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1.0d) + "'", double16 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.0d) + "'", double19 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "(-1.0, 0.0)" + "'", str26.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-1.0d) + "'", double35 == (-1.0d));
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test240");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex7 = complex4.sqrt();
        org.apache.commons.math3.complex.Complex complex9 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math3.complex.Complex complex11 = complex9.tanh();
        boolean boolean13 = complex11.equals((java.lang.Object) true);
        double double14 = complex11.getImaginary();
        org.apache.commons.math3.complex.Complex complex15 = complex11.sinh();
        org.apache.commons.math3.complex.Complex complex16 = complex11.cosh();
        double double17 = complex11.getImaginary();
        org.apache.commons.math3.complex.Complex complex18 = complex4.add(complex11);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double21 = complex20.getReal();
        org.apache.commons.math3.complex.Complex complex23 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double24 = complex23.getReal();
        boolean boolean25 = org.apache.commons.math3.complex.Complex.equals(complex20, complex23);
        org.apache.commons.math3.complex.Complex complex27 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean29 = org.apache.commons.math3.complex.Complex.equals(complex20, complex27, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex31 = new org.apache.commons.math3.complex.Complex((double) (short) 10);
        double double32 = complex31.getReal();
        boolean boolean33 = complex20.equals((java.lang.Object) complex31);
        boolean boolean34 = org.apache.commons.math3.complex.Complex.equals(complex11, complex31);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1.0d) + "'", double21 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1.0d) + "'", double24 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test241");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equals(complex1, complex8, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex12 = new org.apache.commons.math3.complex.Complex((-1.557407724654902d));
        org.apache.commons.math3.complex.Complex complex13 = complex1.multiply(complex12);
        org.apache.commons.math3.complex.Complex complex14 = complex12.exp();
        org.apache.commons.math3.complex.Complex complex15 = complex14.cos();
        org.apache.commons.math3.complex.Complex complex17 = complex15.add(1.5707963267948966d);
        org.apache.commons.math3.complex.Complex complex19 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math3.complex.Complex complex21 = complex19.tanh();
        boolean boolean23 = complex21.equals((java.lang.Object) true);
        double double24 = complex21.getImaginary();
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double27 = complex26.getReal();
        org.apache.commons.math3.complex.Complex complex29 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double30 = complex29.getReal();
        boolean boolean31 = org.apache.commons.math3.complex.Complex.equals(complex26, complex29);
        org.apache.commons.math3.complex.Complex complex33 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean35 = org.apache.commons.math3.complex.Complex.equals(complex26, complex33, 10);
        org.apache.commons.math3.complex.Complex complex37 = complex33.pow((double) (byte) 1);
        boolean boolean39 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex21, complex33, (double) (-1));
        org.apache.commons.math3.complex.Complex complex40 = complex33.sin();
        org.apache.commons.math3.complex.Complex complex42 = complex40.subtract((double) (byte) 1);
        boolean boolean44 = org.apache.commons.math3.complex.Complex.equals(complex15, complex40, (-0.05714285714285714d));
        org.apache.commons.math3.complex.Complex complex46 = complex15.pow((-1.0d));
        org.apache.commons.math3.complex.Complex complex48 = new org.apache.commons.math3.complex.Complex((double) 1.0f);
        org.apache.commons.math3.complex.Complex complex50 = complex48.divide(0.0d);
        org.apache.commons.math3.complex.Complex complex51 = complex50.negate();
        org.apache.commons.math3.complex.Complex complex53 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex55 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double56 = complex55.getReal();
        org.apache.commons.math3.complex.Complex complex58 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double59 = complex58.getReal();
        boolean boolean60 = org.apache.commons.math3.complex.Complex.equals(complex55, complex58);
        boolean boolean62 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex53, complex55, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex63 = complex53.log();
        org.apache.commons.math3.complex.Complex complex65 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double66 = complex65.getReal();
        org.apache.commons.math3.complex.Complex complex68 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double69 = complex68.getReal();
        boolean boolean70 = org.apache.commons.math3.complex.Complex.equals(complex65, complex68);
        org.apache.commons.math3.complex.Complex complex72 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean74 = org.apache.commons.math3.complex.Complex.equals(complex65, complex72, 10);
        org.apache.commons.math3.complex.Complex complex76 = complex72.pow((double) (byte) 1);
        boolean boolean77 = org.apache.commons.math3.complex.Complex.equals(complex53, complex76);
        org.apache.commons.math3.complex.Complex complex78 = complex53.reciprocal();
        org.apache.commons.math3.complex.Complex complex79 = complex53.cosh();
        org.apache.commons.math3.complex.Complex complex80 = complex53.acos();
        org.apache.commons.math3.complex.Complex complex81 = complex50.add(complex80);
        double double82 = complex80.getReal();
        org.apache.commons.math3.complex.Complex complex83 = complex15.divide(complex80);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1.0d) + "'", double27 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1.0d) + "'", double30 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + (-1.0d) + "'", double56 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + (-1.0d) + "'", double59 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + (-1.0d) + "'", double66 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + (-1.0d) + "'", double69 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 3.141592653589793d + "'", double82 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(complex83);
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test242");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex8 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex9 = complex8.sqrt();
        org.apache.commons.math3.complex.Complex complex10 = complex8.tanh();
        boolean boolean12 = complex10.equals((java.lang.Object) true);
        double double13 = complex10.getImaginary();
        org.apache.commons.math3.complex.Complex complex14 = complex10.sinh();
        org.apache.commons.math3.complex.Complex complex15 = complex10.cosh();
        double double16 = complex10.getImaginary();
        org.apache.commons.math3.complex.Complex complex17 = complex3.pow(complex10);
        boolean boolean18 = complex17.isNaN();
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double21 = complex20.getReal();
        double double22 = complex20.getReal();
        org.apache.commons.math3.complex.Complex complex23 = complex20.tan();
        org.apache.commons.math3.complex.Complex complex24 = complex20.exp();
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double27 = complex26.getReal();
        org.apache.commons.math3.complex.Complex complex29 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math3.complex.Complex complex31 = complex29.tanh();
        boolean boolean33 = complex31.equals((java.lang.Object) true);
        double double34 = complex31.getImaginary();
        org.apache.commons.math3.complex.Complex complex35 = complex31.sinh();
        org.apache.commons.math3.complex.Complex complex37 = complex31.multiply(0.0d);
        boolean boolean38 = org.apache.commons.math3.complex.Complex.equals(complex26, complex31);
        org.apache.commons.math3.complex.Complex complex40 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex41 = complex40.sqrt();
        org.apache.commons.math3.complex.Complex complex42 = complex40.sqrt1z();
        org.apache.commons.math3.complex.Complex complex43 = complex31.subtract(complex40);
        org.apache.commons.math3.complex.Complex complex44 = complex24.divide(complex31);
        boolean boolean46 = org.apache.commons.math3.complex.Complex.equals(complex17, complex44, 0.5403023058681398d);
        org.apache.commons.math3.complex.Complex complex47 = complex17.acos();
        boolean boolean48 = complex17.isInfinite();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1.0d) + "'", double21 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1.0d) + "'", double27 == (-1.0d));
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test243");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex((-1.8070843896616986d), (double) (byte) 1);
        org.apache.commons.math3.complex.Complex complex5 = new org.apache.commons.math3.complex.Complex((-1.557407724654902d), (-1.0d));
        boolean boolean7 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex2, complex5, 11013.232874703393d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test244");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex12 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double15 = complex14.getReal();
        org.apache.commons.math3.complex.Complex complex17 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double18 = complex17.getReal();
        boolean boolean19 = org.apache.commons.math3.complex.Complex.equals(complex14, complex17);
        boolean boolean21 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex12, complex14, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex22 = complex12.log();
        org.apache.commons.math3.complex.Complex complex24 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double25 = complex24.getReal();
        org.apache.commons.math3.complex.Complex complex27 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double28 = complex27.getReal();
        boolean boolean29 = org.apache.commons.math3.complex.Complex.equals(complex24, complex27);
        org.apache.commons.math3.complex.Complex complex31 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean33 = org.apache.commons.math3.complex.Complex.equals(complex24, complex31, 10);
        org.apache.commons.math3.complex.Complex complex35 = complex31.pow((double) (byte) 1);
        boolean boolean36 = org.apache.commons.math3.complex.Complex.equals(complex12, complex35);
        boolean boolean37 = complex3.equals((java.lang.Object) complex12);
        org.apache.commons.math3.complex.Complex complex38 = complex3.reciprocal();
        org.apache.commons.math3.complex.Complex complex40 = complex38.divide((double) (short) -1);
        org.apache.commons.math3.complex.Complex complex42 = complex40.multiply((double) 0);
        org.apache.commons.math3.complex.Complex complex44 = org.apache.commons.math3.complex.Complex.valueOf((double) 1.0f);
        org.apache.commons.math3.complex.Complex complex46 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex48 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double49 = complex48.getReal();
        org.apache.commons.math3.complex.Complex complex51 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double52 = complex51.getReal();
        boolean boolean53 = org.apache.commons.math3.complex.Complex.equals(complex48, complex51);
        boolean boolean55 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex46, complex48, (double) 0.0f);
        java.lang.String str56 = complex46.toString();
        org.apache.commons.math3.complex.Complex complex58 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double59 = complex58.getReal();
        org.apache.commons.math3.complex.Complex complex61 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double62 = complex61.getReal();
        boolean boolean63 = org.apache.commons.math3.complex.Complex.equals(complex58, complex61);
        org.apache.commons.math3.complex.Complex complex65 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean67 = org.apache.commons.math3.complex.Complex.equals(complex58, complex65, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex68 = complex46.add(complex65);
        java.lang.String str69 = complex65.toString();
        org.apache.commons.math3.complex.Complex complex71 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex72 = complex65.divide(complex71);
        org.apache.commons.math3.complex.Complex complex73 = complex72.exp();
        org.apache.commons.math3.complex.Complex complex74 = complex44.multiply(complex73);
        org.apache.commons.math3.complex.Complex complex76 = complex73.subtract((-1.9643867237284715E-15d));
        java.util.List<org.apache.commons.math3.complex.Complex> complexList78 = complex76.nthRoot((int) ' ');
        org.apache.commons.math3.complex.Complex complex79 = complex40.add(complex76);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.0d) + "'", double18 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-1.0d) + "'", double28 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-1.0d) + "'", double49 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-1.0d) + "'", double52 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + str56 + "' != '" + "(-1.0, 0.0)" + "'", str56.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + (-1.0d) + "'", double59 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-1.0d) + "'", double62 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + str69 + "' != '" + "(-1.0, 0.0)" + "'", str69.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complexList78);
        org.junit.Assert.assertNotNull(complex79);
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test245");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        org.apache.commons.math3.complex.Complex complex7 = new org.apache.commons.math3.complex.Complex((double) (short) 0);
        org.apache.commons.math3.complex.Complex complex8 = complex3.divide(complex7);
        org.apache.commons.math3.complex.Complex complex10 = complex3.add((double) 10.0f);
        org.apache.commons.math3.complex.Complex complex11 = complex10.negate();
        org.apache.commons.math3.complex.Complex complex12 = complex10.reciprocal();
        org.apache.commons.math3.complex.Complex complex13 = complex12.reciprocal();
        org.apache.commons.math3.complex.Complex complex14 = complex12.tan();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test246");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf((double) 1.0f);
        org.apache.commons.math3.complex.Complex complex2 = complex1.conjugate();
        org.apache.commons.math3.complex.Complex complex3 = complex2.acos();
        org.apache.commons.math3.complex.Complex complex5 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex7 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double8 = complex7.getReal();
        org.apache.commons.math3.complex.Complex complex10 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double11 = complex10.getReal();
        boolean boolean12 = org.apache.commons.math3.complex.Complex.equals(complex7, complex10);
        boolean boolean14 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex5, complex7, (double) 0.0f);
        java.lang.String str15 = complex5.toString();
        org.apache.commons.math3.complex.Complex complex17 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double18 = complex17.getReal();
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double21 = complex20.getReal();
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex17, complex20);
        org.apache.commons.math3.complex.Complex complex24 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean26 = org.apache.commons.math3.complex.Complex.equals(complex17, complex24, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex27 = complex5.add(complex24);
        java.lang.String str28 = complex24.toString();
        org.apache.commons.math3.complex.Complex complex30 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex31 = complex24.divide(complex30);
        org.apache.commons.math3.complex.Complex complex32 = complex24.tanh();
        org.apache.commons.math3.complex.Complex complex33 = complex24.tan();
        org.apache.commons.math3.complex.Complex complex35 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex36 = complex35.sqrt();
        org.apache.commons.math3.complex.Complex complex38 = complex35.subtract((double) (short) 100);
        boolean boolean39 = org.apache.commons.math3.complex.Complex.equals(complex24, complex38);
        java.util.List<org.apache.commons.math3.complex.Complex> complexList41 = complex24.nthRoot(1);
        org.apache.commons.math3.complex.Complex complex43 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex44 = complex43.cos();
        org.apache.commons.math3.complex.Complex complex46 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex48 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double49 = complex48.getReal();
        org.apache.commons.math3.complex.Complex complex51 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double52 = complex51.getReal();
        boolean boolean53 = org.apache.commons.math3.complex.Complex.equals(complex48, complex51);
        boolean boolean55 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex46, complex48, (double) 0.0f);
        java.lang.String str56 = complex46.toString();
        org.apache.commons.math3.complex.Complex complex58 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double59 = complex58.getReal();
        org.apache.commons.math3.complex.Complex complex61 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double62 = complex61.getReal();
        boolean boolean63 = org.apache.commons.math3.complex.Complex.equals(complex58, complex61);
        org.apache.commons.math3.complex.Complex complex65 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean67 = org.apache.commons.math3.complex.Complex.equals(complex58, complex65, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex68 = complex46.add(complex65);
        java.lang.String str69 = complex65.toString();
        org.apache.commons.math3.complex.Complex complex71 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex72 = complex65.divide(complex71);
        org.apache.commons.math3.complex.ComplexField complexField73 = complex71.getField();
        boolean boolean75 = org.apache.commons.math3.complex.Complex.equals(complex43, complex71, (-1));
        boolean boolean76 = complex71.isInfinite();
        org.apache.commons.math3.complex.Complex complex77 = complex71.sqrt1z();
        org.apache.commons.math3.complex.Complex complex79 = complex71.multiply((int) ' ');
        org.apache.commons.math3.complex.Complex complex80 = complex24.pow(complex79);
        boolean boolean81 = org.apache.commons.math3.complex.Complex.equals(complex2, complex79);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-1.0d) + "'", double11 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "(-1.0, 0.0)" + "'", str15.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.0d) + "'", double18 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1.0d) + "'", double21 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "(-1.0, 0.0)" + "'", str28.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(complexList41);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-1.0d) + "'", double49 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-1.0d) + "'", double52 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + str56 + "' != '" + "(-1.0, 0.0)" + "'", str56.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + (-1.0d) + "'", double59 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-1.0d) + "'", double62 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + str69 + "' != '" + "(-1.0, 0.0)" + "'", str69.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complexField73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test247");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex9 = complex3.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex10 = complex9.sqrt();
        double double11 = complex10.abs();
        org.apache.commons.math3.complex.Complex complex12 = complex10.asin();
        org.apache.commons.math3.complex.Complex complex13 = complex10.tan();
        org.apache.commons.math3.complex.Complex complex14 = complex10.sin();
        org.apache.commons.math3.complex.Complex complex16 = complex10.divide(1.2645189576252271d);
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex((-1.8070843896616986d));
        org.apache.commons.math3.complex.ComplexField complexField19 = complex18.getField();
        boolean boolean20 = org.apache.commons.math3.complex.Complex.equals(complex16, complex18);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complexField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test248");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equals(complex1, complex8, 10);
        org.apache.commons.math3.complex.Complex complex11 = complex8.sqrt1z();
        org.apache.commons.math3.complex.Complex complex12 = org.apache.commons.math3.complex.Complex.NaN;
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double15 = complex14.getReal();
        org.apache.commons.math3.complex.Complex complex17 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math3.complex.Complex complex19 = complex17.tanh();
        boolean boolean21 = complex19.equals((java.lang.Object) true);
        double double22 = complex19.getImaginary();
        org.apache.commons.math3.complex.Complex complex23 = complex19.sinh();
        org.apache.commons.math3.complex.Complex complex25 = complex19.multiply(0.0d);
        boolean boolean26 = org.apache.commons.math3.complex.Complex.equals(complex14, complex19);
        org.apache.commons.math3.complex.Complex complex28 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math3.complex.Complex complex30 = complex28.sqrt1z();
        org.apache.commons.math3.complex.Complex complex31 = complex19.subtract(complex28);
        org.apache.commons.math3.complex.Complex complex32 = complex31.acos();
        boolean boolean33 = org.apache.commons.math3.complex.Complex.equals(complex12, complex31);
        org.apache.commons.math3.complex.Complex complex34 = complex11.divide(complex31);
        org.apache.commons.math3.complex.Complex complex35 = complex34.sqrt1z();
        double double36 = complex34.getArgument();
        org.apache.commons.math3.complex.Complex complex37 = complex34.cosh();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertEquals((double) double36, Double.NaN, 0);
        org.junit.Assert.assertNotNull(complex37);
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test249");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex(32.0d);
        org.apache.commons.math3.complex.Complex complex3 = complex1.multiply((-1.557407724654902d));
        org.apache.commons.math3.complex.Complex complex5 = complex1.pow(14142.135623730952d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex5);
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test250");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        double double11 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex12 = complex3.exp();
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        org.apache.commons.math3.complex.Complex complex19 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double20 = complex19.getReal();
        boolean boolean21 = org.apache.commons.math3.complex.Complex.equals(complex16, complex19);
        boolean boolean23 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex14, complex16, (double) 0.0f);
        java.lang.String str24 = complex14.toString();
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double27 = complex26.getReal();
        org.apache.commons.math3.complex.Complex complex29 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double30 = complex29.getReal();
        boolean boolean31 = org.apache.commons.math3.complex.Complex.equals(complex26, complex29);
        org.apache.commons.math3.complex.Complex complex33 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean35 = org.apache.commons.math3.complex.Complex.equals(complex26, complex33, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex36 = complex14.add(complex33);
        org.apache.commons.math3.complex.Complex complex37 = org.apache.commons.math3.complex.Complex.NaN;
        org.apache.commons.math3.complex.Complex complex38 = complex33.subtract(complex37);
        org.apache.commons.math3.complex.Complex complex40 = complex33.subtract((double) 100.0f);
        org.apache.commons.math3.complex.Complex complex41 = complex12.subtract(complex33);
        org.apache.commons.math3.complex.Complex complex43 = complex41.multiply(10.04987562112089d);
        java.util.List<org.apache.commons.math3.complex.Complex> complexList45 = complex41.nthRoot(100);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-1.0d) + "'", double11 == (-1.0d));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1.0d) + "'", double20 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "(-1.0, 0.0)" + "'", str24.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1.0d) + "'", double27 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1.0d) + "'", double30 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complexList45);
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test251");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math3.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math3.complex.Complex complex6 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex7 = complex6.sqrt();
        boolean boolean9 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6, (int) (byte) -1);
        org.apache.commons.math3.complex.Complex complex10 = complex3.cosh();
        org.apache.commons.math3.complex.Complex complex12 = complex10.multiply(10);
        org.apache.commons.math3.complex.Complex complex13 = complex10.sin();
        org.apache.commons.math3.complex.Complex complex15 = complex10.subtract(100.0d);
        org.apache.commons.math3.complex.Complex complex16 = complex10.acos();
        org.apache.commons.math3.complex.Complex complex17 = complex16.cosh();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test252");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.cos();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        org.apache.commons.math3.complex.Complex complex9 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double10 = complex9.getReal();
        boolean boolean11 = org.apache.commons.math3.complex.Complex.equals(complex6, complex9);
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex4, complex6, (double) 0.0f);
        java.lang.String str14 = complex4.toString();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        org.apache.commons.math3.complex.Complex complex19 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double20 = complex19.getReal();
        boolean boolean21 = org.apache.commons.math3.complex.Complex.equals(complex16, complex19);
        org.apache.commons.math3.complex.Complex complex23 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean25 = org.apache.commons.math3.complex.Complex.equals(complex16, complex23, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex26 = complex4.add(complex23);
        java.lang.String str27 = complex23.toString();
        org.apache.commons.math3.complex.Complex complex29 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex30 = complex23.divide(complex29);
        org.apache.commons.math3.complex.ComplexField complexField31 = complex29.getField();
        boolean boolean33 = org.apache.commons.math3.complex.Complex.equals(complex1, complex29, (-1));
        boolean boolean34 = complex29.isInfinite();
        org.apache.commons.math3.complex.Complex complex36 = complex29.multiply((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex37 = complex29.sqrt();
        java.util.List<org.apache.commons.math3.complex.Complex> complexList39 = complex37.nthRoot((int) ' ');
        org.apache.commons.math3.complex.Complex complex40 = complex37.sqrt();
        org.apache.commons.math3.complex.Complex complex42 = complex40.subtract((double) 'a');
        org.apache.commons.math3.complex.Complex complex44 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex45 = complex44.cos();
        org.apache.commons.math3.complex.Complex complex47 = complex45.subtract(1.0d);
        org.apache.commons.math3.complex.Complex complex49 = complex45.subtract((double) 0);
        org.apache.commons.math3.complex.Complex complex50 = complex45.cosh();
        org.apache.commons.math3.complex.Complex complex51 = complex45.tanh();
        double double52 = complex45.abs();
        org.apache.commons.math3.complex.Complex complex53 = complex40.add(complex45);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "(-1.0, 0.0)" + "'", str14.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1.0d) + "'", double20 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "(-1.0, 0.0)" + "'", str27.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexField31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complexList39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d);
        org.junit.Assert.assertNotNull(complex53);
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test253");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (short) 10);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = complex1.pow((double) (short) 1);
        org.apache.commons.math3.complex.Complex complex5 = complex1.sqrt1z();
        org.apache.commons.math3.complex.Complex complex7 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double8 = complex7.getReal();
        org.apache.commons.math3.complex.Complex complex10 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double11 = complex10.getReal();
        boolean boolean12 = org.apache.commons.math3.complex.Complex.equals(complex7, complex10);
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean16 = org.apache.commons.math3.complex.Complex.equals(complex7, complex14, 10);
        org.apache.commons.math3.complex.Complex complex19 = new org.apache.commons.math3.complex.Complex((double) (short) 100, (double) (short) -1);
        boolean boolean20 = complex7.equals((java.lang.Object) complex19);
        org.apache.commons.math3.complex.Complex complex22 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex24 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double25 = complex24.getReal();
        org.apache.commons.math3.complex.Complex complex27 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double28 = complex27.getReal();
        boolean boolean29 = org.apache.commons.math3.complex.Complex.equals(complex24, complex27);
        boolean boolean31 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex22, complex24, (double) 0.0f);
        java.lang.String str32 = complex22.toString();
        org.apache.commons.math3.complex.Complex complex34 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double35 = complex34.getReal();
        org.apache.commons.math3.complex.Complex complex37 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double38 = complex37.getReal();
        boolean boolean39 = org.apache.commons.math3.complex.Complex.equals(complex34, complex37);
        org.apache.commons.math3.complex.Complex complex41 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean43 = org.apache.commons.math3.complex.Complex.equals(complex34, complex41, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex44 = complex22.add(complex41);
        org.apache.commons.math3.complex.Complex complex45 = org.apache.commons.math3.complex.Complex.NaN;
        org.apache.commons.math3.complex.Complex complex46 = complex41.subtract(complex45);
        double double47 = complex45.getArgument();
        org.apache.commons.math3.complex.Complex complex48 = complex45.sin();
        org.apache.commons.math3.complex.Complex complex49 = complex48.sqrt();
        boolean boolean50 = complex49.isInfinite();
        boolean boolean52 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex19, complex49, 1.557407724654902d);
        boolean boolean54 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex5, complex19, 0.0d);
        org.apache.commons.math3.complex.ComplexField complexField55 = complex19.getField();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 10.0d + "'", double2 == 10.0d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-1.0d) + "'", double11 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-1.0d) + "'", double28 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "(-1.0, 0.0)" + "'", str32.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-1.0d) + "'", double35 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-1.0d) + "'", double38 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertEquals((double) double47, Double.NaN, 0);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(complexField55);
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test254");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex9 = complex3.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex10 = complex3.acos();
        org.apache.commons.math3.complex.Complex complex11 = complex3.sqrt1z();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test255");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(1.0d);
        org.apache.commons.math3.complex.Complex complex3 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex4 = complex3.sqrt();
        org.apache.commons.math3.complex.Complex complex5 = complex3.tanh();
        org.apache.commons.math3.complex.Complex complex6 = complex3.asin();
        org.apache.commons.math3.complex.Complex complex8 = complex6.pow(100.0d);
        org.apache.commons.math3.complex.Complex complex9 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        org.apache.commons.math3.complex.Complex complex14 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math3.complex.Complex complex16 = complex14.tanh();
        boolean boolean18 = complex16.equals((java.lang.Object) true);
        double double19 = complex16.getImaginary();
        org.apache.commons.math3.complex.Complex complex20 = complex16.sinh();
        org.apache.commons.math3.complex.Complex complex22 = complex16.multiply(0.0d);
        boolean boolean23 = org.apache.commons.math3.complex.Complex.equals(complex11, complex16);
        org.apache.commons.math3.complex.Complex complex25 = complex11.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex26 = complex9.subtract(complex25);
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double29 = complex28.getReal();
        org.apache.commons.math3.complex.Complex complex31 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double32 = complex31.getReal();
        boolean boolean33 = org.apache.commons.math3.complex.Complex.equals(complex28, complex31);
        org.apache.commons.math3.complex.Complex complex35 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex36 = complex35.sqrt();
        org.apache.commons.math3.complex.Complex complex37 = complex35.tanh();
        boolean boolean39 = complex37.equals((java.lang.Object) true);
        double double40 = complex37.getImaginary();
        org.apache.commons.math3.complex.Complex complex41 = complex37.sinh();
        org.apache.commons.math3.complex.Complex complex42 = complex37.cosh();
        double double43 = complex37.getImaginary();
        boolean boolean44 = complex31.equals((java.lang.Object) complex37);
        org.apache.commons.math3.complex.Complex complex45 = complex26.add(complex31);
        org.apache.commons.math3.complex.Complex complex46 = complex6.multiply(complex31);
        org.apache.commons.math3.complex.Complex complex47 = complex6.sqrt();
        java.lang.Class<?> wildcardClass48 = complex47.getClass();
        boolean boolean49 = complex1.equals((java.lang.Object) wildcardClass48);
        org.apache.commons.math3.complex.Complex complex51 = new org.apache.commons.math3.complex.Complex((double) ' ');
        org.apache.commons.math3.complex.Complex complex53 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double54 = complex53.getReal();
        org.apache.commons.math3.complex.Complex complex56 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math3.complex.Complex complex58 = complex56.tanh();
        boolean boolean60 = complex58.equals((java.lang.Object) true);
        double double61 = complex58.getImaginary();
        org.apache.commons.math3.complex.Complex complex62 = complex58.sinh();
        org.apache.commons.math3.complex.Complex complex64 = complex58.multiply(0.0d);
        boolean boolean65 = org.apache.commons.math3.complex.Complex.equals(complex53, complex58);
        org.apache.commons.math3.complex.Complex complex66 = complex51.divide(complex58);
        org.apache.commons.math3.complex.Complex complex67 = complex58.cos();
        org.apache.commons.math3.complex.Complex complex68 = complex58.conjugate();
        boolean boolean70 = org.apache.commons.math3.complex.Complex.equals(complex1, complex68, (int) (byte) 0);
        double double71 = complex68.getReal();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1.0d) + "'", double29 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-1.0d) + "'", double32 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1.0d) + "'", double54 == (-1.0d));
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test256");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((-2.0d));
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt1z();
        org.apache.commons.math3.complex.Complex complex3 = complex2.tanh();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (short) 100, (double) (short) -1);
        org.apache.commons.math3.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math3.complex.Complex complex9 = complex7.multiply((int) (short) -1);
        org.apache.commons.math3.complex.Complex complex10 = complex9.acos();
        boolean boolean12 = org.apache.commons.math3.complex.Complex.equals(complex2, complex10, (-1.557407724654902d));
        double double13 = complex10.getArgument();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-0.7620216974073766d) + "'", double13 == (-0.7620216974073766d));
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test257");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf((-0.05714285714285714d), 0.03125d);
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        org.apache.commons.math3.complex.Complex complex7 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double8 = complex7.getReal();
        boolean boolean9 = org.apache.commons.math3.complex.Complex.equals(complex4, complex7);
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double15 = complex14.getReal();
        boolean boolean16 = org.apache.commons.math3.complex.Complex.equals(complex11, complex14);
        org.apache.commons.math3.complex.Complex complex17 = complex14.sqrt();
        org.apache.commons.math3.complex.Complex complex19 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double20 = complex19.getReal();
        org.apache.commons.math3.complex.Complex complex22 = complex19.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex23 = complex17.pow(complex22);
        org.apache.commons.math3.complex.Complex complex24 = complex7.multiply(complex23);
        org.apache.commons.math3.complex.Complex complex25 = complex23.sqrt1z();
        org.apache.commons.math3.complex.Complex complex27 = complex23.multiply((double) 0L);
        org.apache.commons.math3.complex.Complex complex29 = complex27.multiply((int) (byte) -1);
        double double30 = complex29.getArgument();
        double double31 = complex29.abs();
        boolean boolean33 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex2, complex29, 0.9999999958776927d);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1.0d) + "'", double20 == (-1.0d));
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test258");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex8 = complex3.sqrt1z();
        org.apache.commons.math3.complex.Complex complex9 = complex8.atan();
        org.apache.commons.math3.complex.Complex complex10 = complex9.cos();
        org.apache.commons.math3.complex.ComplexField complexField11 = complex10.getField();
        org.apache.commons.math3.complex.Complex complex13 = complex10.pow((-1.0d));
        org.apache.commons.math3.complex.Complex complex15 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex17 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double18 = complex17.getReal();
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double21 = complex20.getReal();
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex17, complex20);
        boolean boolean24 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex15, complex17, (double) 0.0f);
        double double25 = complex17.getReal();
        org.apache.commons.math3.complex.Complex complex26 = complex17.exp();
        double double27 = complex17.getImaginary();
        double double28 = complex17.getImaginary();
        org.apache.commons.math3.complex.Complex complex29 = complex17.cosh();
        double double30 = complex29.getReal();
        boolean boolean31 = complex10.equals((java.lang.Object) double30);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexField11);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.0d) + "'", double18 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1.0d) + "'", double21 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.5430806348152437d + "'", double30 == 1.5430806348152437d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test259");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf((double) (short) 10, (double) 100);
        java.lang.Class<?> wildcardClass3 = complex2.getClass();
        double double4 = complex2.getImaginary();
        org.apache.commons.math3.complex.Complex complex6 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math3.complex.Complex complex8 = complex6.tanh();
        double double9 = complex8.abs();
        org.apache.commons.math3.complex.Complex complex10 = complex8.exp();
        org.apache.commons.math3.complex.Complex complex11 = complex10.negate();
        org.apache.commons.math3.complex.Complex complex13 = complex11.pow((-0.0d));
        org.apache.commons.math3.complex.Complex complex14 = complex13.tan();
        org.apache.commons.math3.complex.Complex complex15 = complex2.multiply(complex13);
        org.apache.commons.math3.complex.Complex complex16 = complex13.asin();
        org.apache.commons.math3.complex.Complex complex17 = complex16.cos();
        org.apache.commons.math3.complex.Complex complex19 = complex16.subtract((-3.141592653589793d));
        org.apache.commons.math3.complex.Complex complex21 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex23 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double24 = complex23.getReal();
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double27 = complex26.getReal();
        boolean boolean28 = org.apache.commons.math3.complex.Complex.equals(complex23, complex26);
        boolean boolean30 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex21, complex23, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex31 = complex21.log();
        org.apache.commons.math3.complex.Complex complex33 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double34 = complex33.getReal();
        org.apache.commons.math3.complex.Complex complex36 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double37 = complex36.getReal();
        boolean boolean38 = org.apache.commons.math3.complex.Complex.equals(complex33, complex36);
        org.apache.commons.math3.complex.Complex complex40 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean42 = org.apache.commons.math3.complex.Complex.equals(complex33, complex40, 10);
        org.apache.commons.math3.complex.Complex complex44 = complex40.pow((double) (byte) 1);
        boolean boolean45 = org.apache.commons.math3.complex.Complex.equals(complex21, complex44);
        org.apache.commons.math3.complex.Complex complex47 = complex44.add((double) 100);
        org.apache.commons.math3.complex.Complex complex48 = complex19.subtract(complex47);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1.0d) + "'", double24 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1.0d) + "'", double27 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + (-1.0d) + "'", double37 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test260");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf((double) (-1));
        double double2 = complex1.getArgument();
        org.apache.commons.math3.complex.Complex complex4 = complex1.multiply((double) 10L);
        org.apache.commons.math3.complex.Complex complex5 = complex1.acos();
        org.apache.commons.math3.complex.Complex complex7 = complex5.divide((double) 10.0f);
        org.apache.commons.math3.complex.Complex complex9 = complex5.add(0.8778963166742729d);
        org.apache.commons.math3.complex.Complex complex10 = complex5.sqrt1z();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 3.141592653589793d + "'", double2 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test261");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex11 = complex1.log();
        org.apache.commons.math3.complex.Complex complex12 = complex11.asin();
        org.apache.commons.math3.complex.Complex complex13 = complex11.sin();
        org.apache.commons.math3.complex.Complex complex14 = complex13.exp();
        java.util.List<org.apache.commons.math3.complex.Complex> complexList16 = complex14.nthRoot((int) ' ');
        org.apache.commons.math3.complex.Complex complex17 = complex14.conjugate();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complexList16);
        org.junit.Assert.assertNotNull(complex17);
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test262");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equals(complex1, complex8, 10);
        org.apache.commons.math3.complex.Complex complex11 = complex8.sin();
        org.apache.commons.math3.complex.Complex complex13 = complex11.add((-3.141592653589793d));
        boolean boolean14 = complex13.isInfinite();
        boolean boolean15 = complex13.isNaN();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test263");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex9 = complex3.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double15 = complex14.getReal();
        boolean boolean16 = org.apache.commons.math3.complex.Complex.equals(complex11, complex14);
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean20 = org.apache.commons.math3.complex.Complex.equals(complex11, complex18, 10);
        org.apache.commons.math3.complex.Complex complex22 = complex18.pow((double) (byte) 1);
        boolean boolean24 = org.apache.commons.math3.complex.Complex.equals(complex3, complex22, (int) (short) -1);
        org.apache.commons.math3.complex.ComplexField complexField25 = complex3.getField();
        org.apache.commons.math3.complex.Complex complex26 = complex3.exp();
        org.apache.commons.math3.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math3.complex.Complex complex29 = complex27.multiply((int) (byte) 10);
        org.apache.commons.math3.complex.Complex complex30 = complex29.cosh();
        org.apache.commons.math3.complex.Complex complex31 = complex30.tan();
        double double32 = complex31.getArgument();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(complexField25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 3.141592653589793d + "'", double32 == 3.141592653589793d);
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test264");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.cos();
        org.apache.commons.math3.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math3.complex.Complex complex4 = complex2.reciprocal();
        org.apache.commons.math3.complex.Complex complex6 = complex4.add((double) (-1));
        org.apache.commons.math3.complex.Complex complex8 = complex6.multiply((double) 10.0f);
        org.apache.commons.math3.complex.Complex complex11 = org.apache.commons.math3.complex.Complex.valueOf(100.0d, (double) (short) 0);
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double21 = complex20.getReal();
        org.apache.commons.math3.complex.Complex complex23 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double24 = complex23.getReal();
        boolean boolean25 = org.apache.commons.math3.complex.Complex.equals(complex20, complex23);
        org.apache.commons.math3.complex.Complex complex26 = complex23.sqrt();
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double29 = complex28.getReal();
        org.apache.commons.math3.complex.Complex complex31 = complex28.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex32 = complex26.pow(complex31);
        org.apache.commons.math3.complex.Complex complex33 = complex16.multiply(complex32);
        org.apache.commons.math3.complex.Complex complex34 = complex32.sqrt1z();
        org.apache.commons.math3.complex.Complex complex35 = complex11.divide(complex32);
        org.apache.commons.math3.complex.Complex complex36 = complex35.log();
        org.apache.commons.math3.complex.Complex complex38 = complex36.divide(14142.842748188923d);
        boolean boolean40 = org.apache.commons.math3.complex.Complex.equals(complex8, complex38, (-1));
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1.0d) + "'", double21 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1.0d) + "'", double24 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1.0d) + "'", double29 == (-1.0d));
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test265");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex9 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double15 = complex14.getReal();
        boolean boolean16 = org.apache.commons.math3.complex.Complex.equals(complex11, complex14);
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex9, complex11, (double) 0.0f);
        java.lang.String str19 = complex9.toString();
        org.apache.commons.math3.complex.Complex complex21 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double22 = complex21.getReal();
        org.apache.commons.math3.complex.Complex complex24 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double25 = complex24.getReal();
        boolean boolean26 = org.apache.commons.math3.complex.Complex.equals(complex21, complex24);
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean30 = org.apache.commons.math3.complex.Complex.equals(complex21, complex28, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex31 = complex9.add(complex28);
        org.apache.commons.math3.complex.Complex complex32 = complex7.multiply(complex31);
        org.apache.commons.math3.complex.Complex complex33 = complex32.sin();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "(-1.0, 0.0)" + "'", str19.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test266");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex(3.136592820246461d);
        org.apache.commons.math3.complex.Complex complex3 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex4 = complex3.sqrt();
        org.apache.commons.math3.complex.Complex complex5 = complex3.tanh();
        boolean boolean7 = complex5.equals((java.lang.Object) true);
        double double8 = complex5.getImaginary();
        org.apache.commons.math3.complex.Complex complex9 = complex5.sinh();
        org.apache.commons.math3.complex.Complex complex11 = complex5.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, 10);
        org.apache.commons.math3.complex.Complex complex24 = complex20.pow((double) (byte) 1);
        boolean boolean26 = org.apache.commons.math3.complex.Complex.equals(complex5, complex24, (int) (short) -1);
        org.apache.commons.math3.complex.ComplexField complexField27 = complex5.getField();
        org.apache.commons.math3.complex.Complex complex28 = complex5.sinh();
        org.apache.commons.math3.complex.Complex complex30 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex32 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double33 = complex32.getReal();
        org.apache.commons.math3.complex.Complex complex35 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double36 = complex35.getReal();
        boolean boolean37 = org.apache.commons.math3.complex.Complex.equals(complex32, complex35);
        boolean boolean39 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex30, complex32, (double) 0.0f);
        java.lang.String str40 = complex30.toString();
        org.apache.commons.math3.complex.Complex complex42 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double43 = complex42.getReal();
        org.apache.commons.math3.complex.Complex complex45 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double46 = complex45.getReal();
        boolean boolean47 = org.apache.commons.math3.complex.Complex.equals(complex42, complex45);
        org.apache.commons.math3.complex.Complex complex49 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean51 = org.apache.commons.math3.complex.Complex.equals(complex42, complex49, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex52 = complex30.add(complex49);
        org.apache.commons.math3.complex.Complex complex53 = org.apache.commons.math3.complex.Complex.NaN;
        org.apache.commons.math3.complex.Complex complex54 = complex49.subtract(complex53);
        org.apache.commons.math3.complex.Complex complex56 = complex49.subtract((double) 100.0f);
        org.apache.commons.math3.complex.Complex complex58 = complex56.multiply((int) (byte) -1);
        boolean boolean59 = org.apache.commons.math3.complex.Complex.equals(complex5, complex58);
        boolean boolean60 = complex58.isNaN();
        org.apache.commons.math3.complex.Complex complex61 = complex1.multiply(complex58);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(complexField27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-1.0d) + "'", double33 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-1.0d) + "'", double36 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "(-1.0, 0.0)" + "'", str40.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-1.0d) + "'", double43 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1.0d) + "'", double46 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(complex61);
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test267");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex12 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double15 = complex14.getReal();
        org.apache.commons.math3.complex.Complex complex17 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double18 = complex17.getReal();
        boolean boolean19 = org.apache.commons.math3.complex.Complex.equals(complex14, complex17);
        boolean boolean21 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex12, complex14, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex22 = complex12.log();
        org.apache.commons.math3.complex.Complex complex24 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double25 = complex24.getReal();
        org.apache.commons.math3.complex.Complex complex27 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double28 = complex27.getReal();
        boolean boolean29 = org.apache.commons.math3.complex.Complex.equals(complex24, complex27);
        org.apache.commons.math3.complex.Complex complex31 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean33 = org.apache.commons.math3.complex.Complex.equals(complex24, complex31, 10);
        org.apache.commons.math3.complex.Complex complex35 = complex31.pow((double) (byte) 1);
        boolean boolean36 = org.apache.commons.math3.complex.Complex.equals(complex12, complex35);
        boolean boolean37 = complex3.equals((java.lang.Object) complex12);
        org.apache.commons.math3.complex.Complex complex38 = complex3.reciprocal();
        org.apache.commons.math3.complex.Complex complex39 = complex38.log();
        org.apache.commons.math3.complex.Complex complex40 = complex39.exp();
        org.apache.commons.math3.complex.Complex complex42 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math3.complex.Complex complex44 = complex42.tanh();
        boolean boolean46 = complex44.equals((java.lang.Object) true);
        double double47 = complex44.getImaginary();
        org.apache.commons.math3.complex.Complex complex48 = complex44.sinh();
        org.apache.commons.math3.complex.Complex complex49 = complex44.cosh();
        org.apache.commons.math3.complex.ComplexField complexField50 = complex49.getField();
        org.apache.commons.math3.complex.Complex complex51 = complex49.asin();
        org.apache.commons.math3.complex.Complex complex52 = complex39.subtract(complex51);
        org.apache.commons.math3.complex.Complex complex55 = org.apache.commons.math3.complex.Complex.valueOf((-10.0d), 0.0d);
        org.apache.commons.math3.complex.Complex complex56 = complex55.cos();
        org.apache.commons.math3.complex.Complex complex57 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex58 = complex57.asin();
        double double59 = complex58.getImaginary();
        org.apache.commons.math3.complex.Complex complex60 = complex58.atan();
        boolean boolean62 = org.apache.commons.math3.complex.Complex.equals(complex56, complex60, (int) (byte) 1);
        org.apache.commons.math3.complex.Complex complex64 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex65 = complex64.sqrt();
        org.apache.commons.math3.complex.Complex complex66 = complex64.tanh();
        boolean boolean68 = complex66.equals((java.lang.Object) true);
        double double69 = complex66.getImaginary();
        org.apache.commons.math3.complex.Complex complex71 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double72 = complex71.getReal();
        org.apache.commons.math3.complex.Complex complex74 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double75 = complex74.getReal();
        boolean boolean76 = org.apache.commons.math3.complex.Complex.equals(complex71, complex74);
        org.apache.commons.math3.complex.Complex complex78 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean80 = org.apache.commons.math3.complex.Complex.equals(complex71, complex78, 10);
        org.apache.commons.math3.complex.Complex complex82 = complex78.pow((double) (byte) 1);
        boolean boolean84 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex66, complex78, (double) (-1));
        org.apache.commons.math3.complex.Complex complex85 = complex66.sqrt();
        org.apache.commons.math3.complex.Complex complex86 = complex66.cosh();
        double double87 = complex86.getArgument();
        org.apache.commons.math3.complex.Complex complex88 = complex60.divide(complex86);
        org.apache.commons.math3.complex.Complex complex89 = complex88.asin();
        boolean boolean91 = org.apache.commons.math3.complex.Complex.equals(complex52, complex89, 3.1415926535897927d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.0d) + "'", double18 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-1.0d) + "'", double28 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complexField50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + (-0.0d) + "'", double59 == (-0.0d));
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + (-1.0d) + "'", double72 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + (-1.0d) + "'", double75 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test268");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        org.apache.commons.math3.complex.Complex complex7 = new org.apache.commons.math3.complex.Complex((double) (short) 0);
        org.apache.commons.math3.complex.Complex complex8 = complex3.divide(complex7);
        org.apache.commons.math3.complex.ComplexField complexField9 = complex8.getField();
        org.apache.commons.math3.complex.Complex complex11 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex12 = complex11.sqrt();
        org.apache.commons.math3.complex.Complex complex13 = complex11.tanh();
        double double14 = complex11.getImaginary();
        org.apache.commons.math3.complex.Complex complex15 = complex11.tanh();
        org.apache.commons.math3.complex.Complex complex16 = complex8.divide(complex15);
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double19 = complex18.getReal();
        org.apache.commons.math3.complex.Complex complex21 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double22 = complex21.getReal();
        boolean boolean23 = org.apache.commons.math3.complex.Complex.equals(complex18, complex21);
        org.apache.commons.math3.complex.Complex complex25 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double26 = complex25.getReal();
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double29 = complex28.getReal();
        boolean boolean30 = org.apache.commons.math3.complex.Complex.equals(complex25, complex28);
        org.apache.commons.math3.complex.Complex complex31 = complex28.sqrt();
        org.apache.commons.math3.complex.Complex complex33 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double34 = complex33.getReal();
        org.apache.commons.math3.complex.Complex complex36 = complex33.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex37 = complex31.pow(complex36);
        org.apache.commons.math3.complex.Complex complex38 = complex21.multiply(complex37);
        org.apache.commons.math3.complex.Complex complex39 = complex37.sqrt1z();
        org.apache.commons.math3.complex.Complex complex41 = complex37.multiply((double) 0L);
        org.apache.commons.math3.complex.Complex complex43 = complex41.multiply((int) (byte) -1);
        double double44 = complex43.getArgument();
        double double45 = complex43.getArgument();
        org.apache.commons.math3.complex.Complex complex47 = complex43.pow(2.718281828459045d);
        org.apache.commons.math3.complex.Complex complex48 = complex15.add(complex47);
        org.apache.commons.math3.complex.Complex complex50 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex51 = complex50.sqrt();
        org.apache.commons.math3.complex.Complex complex52 = complex50.tanh();
        boolean boolean54 = complex52.equals((java.lang.Object) true);
        double double55 = complex52.getImaginary();
        org.apache.commons.math3.complex.Complex complex56 = complex52.sinh();
        org.apache.commons.math3.complex.Complex complex58 = complex52.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex60 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double61 = complex60.getReal();
        org.apache.commons.math3.complex.Complex complex63 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double64 = complex63.getReal();
        boolean boolean65 = org.apache.commons.math3.complex.Complex.equals(complex60, complex63);
        org.apache.commons.math3.complex.Complex complex67 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean69 = org.apache.commons.math3.complex.Complex.equals(complex60, complex67, 10);
        org.apache.commons.math3.complex.Complex complex71 = complex67.pow((double) (byte) 1);
        boolean boolean73 = org.apache.commons.math3.complex.Complex.equals(complex52, complex71, (int) (short) -1);
        org.apache.commons.math3.complex.ComplexField complexField74 = complex52.getField();
        org.apache.commons.math3.complex.Complex complex75 = complex52.sinh();
        org.apache.commons.math3.complex.Complex complex76 = complex52.log();
        org.apache.commons.math3.complex.Complex complex77 = complex47.pow(complex52);
        org.apache.commons.math3.complex.Complex complex78 = complex47.sqrt1z();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complexField9);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.0d) + "'", double19 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-1.0d) + "'", double26 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1.0d) + "'", double29 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-1.0d) + "'", double61 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + (-1.0d) + "'", double64 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(complexField74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test269");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equals(complex1, complex8, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex12 = new org.apache.commons.math3.complex.Complex((double) (short) 10);
        double double13 = complex12.getReal();
        boolean boolean14 = complex1.equals((java.lang.Object) complex12);
        org.apache.commons.math3.complex.Complex complex15 = complex12.sqrt1z();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex15);
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test270");
        org.apache.commons.math3.complex.Complex complex0 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double3 = complex2.getReal();
        org.apache.commons.math3.complex.Complex complex5 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math3.complex.Complex complex7 = complex5.tanh();
        boolean boolean9 = complex7.equals((java.lang.Object) true);
        double double10 = complex7.getImaginary();
        org.apache.commons.math3.complex.Complex complex11 = complex7.sinh();
        org.apache.commons.math3.complex.Complex complex13 = complex7.multiply(0.0d);
        boolean boolean14 = org.apache.commons.math3.complex.Complex.equals(complex2, complex7);
        org.apache.commons.math3.complex.Complex complex16 = complex2.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex17 = complex0.subtract(complex16);
        org.apache.commons.math3.complex.Complex complex19 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double20 = complex19.getReal();
        double double21 = complex19.getReal();
        org.apache.commons.math3.complex.Complex complex22 = complex19.tan();
        org.apache.commons.math3.complex.Complex complex23 = complex16.pow(complex22);
        org.apache.commons.math3.complex.Complex complex24 = complex23.asin();
        org.apache.commons.math3.complex.Complex complex25 = complex23.sin();
        org.apache.commons.math3.complex.Complex complex26 = complex25.log();
        org.apache.commons.math3.complex.Complex complex27 = complex26.sin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1.0d) + "'", double20 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1.0d) + "'", double21 == (-1.0d));
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test271");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (short) 10);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = complex1.pow((double) (short) 1);
        double double5 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex7 = complex1.add(0.5403023058681398d);
        org.apache.commons.math3.complex.Complex complex8 = complex7.reciprocal();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 10.0d + "'", double2 == 10.0d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test272");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex8 = complex3.cosh();
        org.apache.commons.math3.complex.ComplexField complexField9 = complex8.getField();
        double double10 = complex8.getImaginary();
        boolean boolean12 = complex8.equals((java.lang.Object) "");
        org.apache.commons.math3.complex.Complex complex14 = complex8.multiply(0.8414709848078965d);
        org.apache.commons.math3.complex.Complex complex15 = complex14.reciprocal();
        org.apache.commons.math3.complex.Complex complex16 = complex15.tan();
        org.apache.commons.math3.complex.Complex complex18 = complex15.add((-0.7853981633974483d));
        org.apache.commons.math3.complex.Complex complex19 = complex15.conjugate();
        org.apache.commons.math3.complex.Complex complex21 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math3.complex.Complex complex23 = complex21.tanh();
        boolean boolean25 = complex23.equals((java.lang.Object) true);
        org.apache.commons.math3.complex.Complex complex27 = new org.apache.commons.math3.complex.Complex((double) (short) 0);
        org.apache.commons.math3.complex.Complex complex28 = complex23.divide(complex27);
        org.apache.commons.math3.complex.Complex complex30 = complex23.add((double) 10.0f);
        org.apache.commons.math3.complex.Complex complex32 = complex30.multiply(1.0d);
        org.apache.commons.math3.complex.ComplexField complexField33 = complex30.getField();
        boolean boolean34 = org.apache.commons.math3.complex.Complex.equals(complex15, complex30);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complexField9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complexField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test273");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.03125d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.asin();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test274");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(Double.POSITIVE_INFINITY);
        org.apache.commons.math3.complex.Complex complex2 = complex1.acos();
        org.apache.commons.math3.complex.Complex complex3 = complex1.negate();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test275");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf((double) 10.0f, (double) (-1));
        org.apache.commons.math3.complex.Complex complex3 = complex2.reciprocal();
        org.apache.commons.math3.complex.Complex complex4 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        org.apache.commons.math3.complex.Complex complex9 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math3.complex.Complex complex11 = complex9.tanh();
        boolean boolean13 = complex11.equals((java.lang.Object) true);
        double double14 = complex11.getImaginary();
        org.apache.commons.math3.complex.Complex complex15 = complex11.sinh();
        org.apache.commons.math3.complex.Complex complex17 = complex11.multiply(0.0d);
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex6, complex11);
        org.apache.commons.math3.complex.Complex complex20 = complex6.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex21 = complex4.subtract(complex20);
        org.apache.commons.math3.complex.Complex complex23 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double24 = complex23.getReal();
        double double25 = complex23.getReal();
        org.apache.commons.math3.complex.Complex complex26 = complex23.tan();
        org.apache.commons.math3.complex.Complex complex27 = complex20.pow(complex26);
        org.apache.commons.math3.complex.ComplexField complexField28 = complex20.getField();
        double double29 = complex20.abs();
        boolean boolean30 = complex2.equals((java.lang.Object) complex20);
        org.apache.commons.math3.complex.Complex complex31 = complex20.sqrt();
        org.apache.commons.math3.complex.Complex complex33 = complex20.add(0.8778963166742729d);
        double double34 = complex20.abs();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1.0d) + "'", double24 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complexField28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test276");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.cos();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        org.apache.commons.math3.complex.Complex complex9 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double10 = complex9.getReal();
        boolean boolean11 = org.apache.commons.math3.complex.Complex.equals(complex6, complex9);
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex4, complex6, (double) 0.0f);
        java.lang.String str14 = complex4.toString();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        org.apache.commons.math3.complex.Complex complex19 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double20 = complex19.getReal();
        boolean boolean21 = org.apache.commons.math3.complex.Complex.equals(complex16, complex19);
        org.apache.commons.math3.complex.Complex complex23 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean25 = org.apache.commons.math3.complex.Complex.equals(complex16, complex23, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex26 = complex4.add(complex23);
        java.lang.String str27 = complex23.toString();
        org.apache.commons.math3.complex.Complex complex29 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex30 = complex23.divide(complex29);
        org.apache.commons.math3.complex.ComplexField complexField31 = complex29.getField();
        boolean boolean33 = org.apache.commons.math3.complex.Complex.equals(complex1, complex29, (-1));
        boolean boolean34 = complex29.isInfinite();
        org.apache.commons.math3.complex.Complex complex35 = complex29.sqrt1z();
        org.apache.commons.math3.complex.Complex complex36 = complex35.sqrt();
        org.apache.commons.math3.complex.Complex complex37 = complex36.negate();
        org.apache.commons.math3.complex.Complex complex38 = complex37.cosh();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "(-1.0, 0.0)" + "'", str14.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1.0d) + "'", double20 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "(-1.0, 0.0)" + "'", str27.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexField31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test277");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equals(complex1, complex8, 10);
        org.apache.commons.math3.complex.Complex complex11 = complex8.sqrt1z();
        org.apache.commons.math3.complex.Complex complex12 = org.apache.commons.math3.complex.Complex.NaN;
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double15 = complex14.getReal();
        org.apache.commons.math3.complex.Complex complex17 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math3.complex.Complex complex19 = complex17.tanh();
        boolean boolean21 = complex19.equals((java.lang.Object) true);
        double double22 = complex19.getImaginary();
        org.apache.commons.math3.complex.Complex complex23 = complex19.sinh();
        org.apache.commons.math3.complex.Complex complex25 = complex19.multiply(0.0d);
        boolean boolean26 = org.apache.commons.math3.complex.Complex.equals(complex14, complex19);
        org.apache.commons.math3.complex.Complex complex28 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math3.complex.Complex complex30 = complex28.sqrt1z();
        org.apache.commons.math3.complex.Complex complex31 = complex19.subtract(complex28);
        org.apache.commons.math3.complex.Complex complex32 = complex31.acos();
        boolean boolean33 = org.apache.commons.math3.complex.Complex.equals(complex12, complex31);
        org.apache.commons.math3.complex.Complex complex34 = complex11.divide(complex31);
        org.apache.commons.math3.complex.Complex complex35 = complex31.exp();
        org.apache.commons.math3.complex.Complex complex37 = complex35.multiply((int) '4');
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex37);
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test278");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) ' ');
        java.lang.Class<?> wildcardClass2 = complex1.getClass();
        org.apache.commons.math3.complex.Complex complex4 = complex1.add(10.0d);
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        org.apache.commons.math3.complex.Complex complex9 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double10 = complex9.getReal();
        boolean boolean11 = org.apache.commons.math3.complex.Complex.equals(complex6, complex9);
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean15 = org.apache.commons.math3.complex.Complex.equals(complex6, complex13, 10);
        org.apache.commons.math3.complex.Complex complex17 = complex6.multiply(10);
        org.apache.commons.math3.complex.Complex complex18 = complex6.reciprocal();
        org.apache.commons.math3.complex.Complex complex20 = complex6.divide((double) (-1.0f));
        org.apache.commons.math3.complex.Complex complex21 = complex6.tan();
        org.apache.commons.math3.complex.Complex complex22 = complex1.add(complex6);
        org.apache.commons.math3.complex.Complex complex23 = complex22.reciprocal();
        org.apache.commons.math3.complex.Complex complex25 = complex22.add((double) 0.0f);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex25);
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test279");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) '#');
        org.apache.commons.math3.complex.Complex complex2 = complex1.acos();
        org.apache.commons.math3.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math3.complex.Complex complex4 = complex3.tanh();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test280");
        org.apache.commons.math3.complex.Complex complex0 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double3 = complex2.getReal();
        org.apache.commons.math3.complex.Complex complex5 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math3.complex.Complex complex7 = complex5.tanh();
        boolean boolean9 = complex7.equals((java.lang.Object) true);
        double double10 = complex7.getImaginary();
        org.apache.commons.math3.complex.Complex complex11 = complex7.sinh();
        org.apache.commons.math3.complex.Complex complex13 = complex7.multiply(0.0d);
        boolean boolean14 = org.apache.commons.math3.complex.Complex.equals(complex2, complex7);
        org.apache.commons.math3.complex.Complex complex16 = complex2.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex17 = complex0.subtract(complex16);
        org.apache.commons.math3.complex.Complex complex19 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double20 = complex19.getReal();
        double double21 = complex19.getReal();
        org.apache.commons.math3.complex.Complex complex22 = complex19.tan();
        org.apache.commons.math3.complex.Complex complex23 = complex16.pow(complex22);
        org.apache.commons.math3.complex.Complex complex24 = complex23.sinh();
        org.apache.commons.math3.complex.Complex complex25 = complex24.acos();
        org.apache.commons.math3.complex.Complex complex26 = complex24.exp();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1.0d) + "'", double20 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1.0d) + "'", double21 == (-1.0d));
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test281");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math3.complex.Complex complex4 = complex1.asin();
        org.apache.commons.math3.complex.Complex complex6 = complex4.pow(100.0d);
        org.apache.commons.math3.complex.Complex complex7 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex9 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double10 = complex9.getReal();
        org.apache.commons.math3.complex.Complex complex12 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math3.complex.Complex complex14 = complex12.tanh();
        boolean boolean16 = complex14.equals((java.lang.Object) true);
        double double17 = complex14.getImaginary();
        org.apache.commons.math3.complex.Complex complex18 = complex14.sinh();
        org.apache.commons.math3.complex.Complex complex20 = complex14.multiply(0.0d);
        boolean boolean21 = org.apache.commons.math3.complex.Complex.equals(complex9, complex14);
        org.apache.commons.math3.complex.Complex complex23 = complex9.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex24 = complex7.subtract(complex23);
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double27 = complex26.getReal();
        org.apache.commons.math3.complex.Complex complex29 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double30 = complex29.getReal();
        boolean boolean31 = org.apache.commons.math3.complex.Complex.equals(complex26, complex29);
        org.apache.commons.math3.complex.Complex complex33 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math3.complex.Complex complex35 = complex33.tanh();
        boolean boolean37 = complex35.equals((java.lang.Object) true);
        double double38 = complex35.getImaginary();
        org.apache.commons.math3.complex.Complex complex39 = complex35.sinh();
        org.apache.commons.math3.complex.Complex complex40 = complex35.cosh();
        double double41 = complex35.getImaginary();
        boolean boolean42 = complex29.equals((java.lang.Object) complex35);
        org.apache.commons.math3.complex.Complex complex43 = complex24.add(complex29);
        org.apache.commons.math3.complex.Complex complex44 = complex4.multiply(complex29);
        java.lang.Class<?> wildcardClass45 = complex44.getClass();
        java.lang.String str46 = complex44.toString();
        org.apache.commons.math3.complex.Complex complex48 = complex44.multiply(1.8414709848078965d);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1.0d) + "'", double27 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1.0d) + "'", double30 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + str46 + "' != '" + "(0.0, 0.0)" + "'", str46.equals("(0.0, 0.0)"));
        org.junit.Assert.assertNotNull(complex48);
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test282");
        org.apache.commons.math3.complex.Complex complex0 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double3 = complex2.getReal();
        org.apache.commons.math3.complex.Complex complex5 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math3.complex.Complex complex7 = complex5.tanh();
        boolean boolean9 = complex7.equals((java.lang.Object) true);
        double double10 = complex7.getImaginary();
        org.apache.commons.math3.complex.Complex complex11 = complex7.sinh();
        org.apache.commons.math3.complex.Complex complex13 = complex7.multiply(0.0d);
        boolean boolean14 = org.apache.commons.math3.complex.Complex.equals(complex2, complex7);
        org.apache.commons.math3.complex.Complex complex16 = complex2.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex17 = complex0.subtract(complex16);
        org.apache.commons.math3.complex.Complex complex19 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double20 = complex19.getReal();
        double double21 = complex19.getReal();
        org.apache.commons.math3.complex.Complex complex22 = complex19.tan();
        org.apache.commons.math3.complex.Complex complex23 = complex16.pow(complex22);
        org.apache.commons.math3.complex.Complex complex25 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex27 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double28 = complex27.getReal();
        org.apache.commons.math3.complex.Complex complex30 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double31 = complex30.getReal();
        boolean boolean32 = org.apache.commons.math3.complex.Complex.equals(complex27, complex30);
        boolean boolean34 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex25, complex27, (double) 0.0f);
        java.lang.String str35 = complex25.toString();
        org.apache.commons.math3.complex.Complex complex37 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double38 = complex37.getReal();
        org.apache.commons.math3.complex.Complex complex40 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double41 = complex40.getReal();
        boolean boolean42 = org.apache.commons.math3.complex.Complex.equals(complex37, complex40);
        org.apache.commons.math3.complex.Complex complex44 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean46 = org.apache.commons.math3.complex.Complex.equals(complex37, complex44, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex47 = complex25.add(complex44);
        java.lang.String str48 = complex44.toString();
        org.apache.commons.math3.complex.Complex complex50 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex51 = complex44.divide(complex50);
        org.apache.commons.math3.complex.Complex complex52 = complex44.tanh();
        org.apache.commons.math3.complex.Complex complex54 = complex52.multiply((double) '#');
        org.apache.commons.math3.complex.Complex complex55 = complex52.sinh();
        org.apache.commons.math3.complex.Complex complex56 = complex16.subtract(complex55);
        org.apache.commons.math3.complex.Complex complex57 = complex16.negate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1.0d) + "'", double20 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1.0d) + "'", double21 == (-1.0d));
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-1.0d) + "'", double28 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-1.0d) + "'", double31 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "(-1.0, 0.0)" + "'", str35.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-1.0d) + "'", double38 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-1.0d) + "'", double41 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "(-1.0, 0.0)" + "'", str48.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test283");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex(0.7071067811865476d, (-0.0d));
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test284");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        java.util.List<org.apache.commons.math3.complex.Complex> complexList4 = complex1.nthRoot(10);
        org.apache.commons.math3.complex.Complex complex6 = complex1.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex8 = complex1.pow((double) (-1L));
        org.apache.commons.math3.complex.Complex complex9 = complex1.negate();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertNotNull(complexList4);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test285");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (short) 10);
        org.apache.commons.math3.complex.Complex complex3 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex4 = complex3.sqrt();
        org.apache.commons.math3.complex.Complex complex5 = complex3.tanh();
        boolean boolean7 = complex5.equals((java.lang.Object) true);
        double double8 = complex5.getImaginary();
        org.apache.commons.math3.complex.Complex complex9 = complex5.sinh();
        org.apache.commons.math3.complex.Complex complex11 = complex5.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex15 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double16 = complex15.getReal();
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double19 = complex18.getReal();
        boolean boolean20 = org.apache.commons.math3.complex.Complex.equals(complex15, complex18);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex13, complex15, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex23 = complex13.log();
        org.apache.commons.math3.complex.Complex complex25 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double26 = complex25.getReal();
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double29 = complex28.getReal();
        boolean boolean30 = org.apache.commons.math3.complex.Complex.equals(complex25, complex28);
        org.apache.commons.math3.complex.Complex complex32 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean34 = org.apache.commons.math3.complex.Complex.equals(complex25, complex32, 10);
        org.apache.commons.math3.complex.Complex complex36 = complex32.pow((double) (byte) 1);
        boolean boolean37 = org.apache.commons.math3.complex.Complex.equals(complex13, complex36);
        org.apache.commons.math3.complex.Complex complex38 = complex13.reciprocal();
        boolean boolean40 = org.apache.commons.math3.complex.Complex.equals(complex11, complex13, (double) (byte) 1);
        org.apache.commons.math3.complex.Complex complex41 = complex1.divide(complex11);
        org.apache.commons.math3.complex.Complex complex42 = complex41.sinh();
        org.apache.commons.math3.complex.Complex complex43 = complex42.acos();
        boolean boolean44 = complex43.isNaN();
        boolean boolean45 = complex43.isInfinite();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1.0d) + "'", double16 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.0d) + "'", double19 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-1.0d) + "'", double26 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1.0d) + "'", double29 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test286");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math3.complex.Complex complex4 = complex1.asin();
        org.apache.commons.math3.complex.Complex complex5 = complex4.tan();
        org.apache.commons.math3.complex.Complex complex6 = complex5.exp();
        org.apache.commons.math3.complex.Complex complex8 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex9 = complex8.sqrt();
        org.apache.commons.math3.complex.Complex complex10 = complex8.tanh();
        boolean boolean12 = complex10.equals((java.lang.Object) true);
        double double13 = complex10.getImaginary();
        org.apache.commons.math3.complex.Complex complex15 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math3.complex.Complex complex17 = complex15.tanh();
        boolean boolean19 = complex17.equals((java.lang.Object) true);
        double double20 = complex17.getImaginary();
        org.apache.commons.math3.complex.Complex complex21 = complex17.sinh();
        org.apache.commons.math3.complex.Complex complex22 = complex17.cosh();
        double double23 = complex17.getImaginary();
        org.apache.commons.math3.complex.Complex complex24 = complex10.pow(complex17);
        boolean boolean25 = complex24.isNaN();
        org.apache.commons.math3.complex.Complex complex27 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double28 = complex27.getReal();
        double double29 = complex27.getReal();
        org.apache.commons.math3.complex.Complex complex30 = complex27.tan();
        org.apache.commons.math3.complex.Complex complex31 = complex27.exp();
        org.apache.commons.math3.complex.Complex complex33 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double34 = complex33.getReal();
        org.apache.commons.math3.complex.Complex complex36 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math3.complex.Complex complex38 = complex36.tanh();
        boolean boolean40 = complex38.equals((java.lang.Object) true);
        double double41 = complex38.getImaginary();
        org.apache.commons.math3.complex.Complex complex42 = complex38.sinh();
        org.apache.commons.math3.complex.Complex complex44 = complex38.multiply(0.0d);
        boolean boolean45 = org.apache.commons.math3.complex.Complex.equals(complex33, complex38);
        org.apache.commons.math3.complex.Complex complex47 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math3.complex.Complex complex49 = complex47.sqrt1z();
        org.apache.commons.math3.complex.Complex complex50 = complex38.subtract(complex47);
        org.apache.commons.math3.complex.Complex complex51 = complex31.divide(complex38);
        boolean boolean53 = org.apache.commons.math3.complex.Complex.equals(complex24, complex51, 0.5403023058681398d);
        org.apache.commons.math3.complex.Complex complex54 = complex6.add(complex51);
        org.apache.commons.math3.complex.Complex complex55 = complex54.negate();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-1.0d) + "'", double28 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1.0d) + "'", double29 == (-1.0d));
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test287");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math3.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math3.complex.Complex complex6 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex7 = complex6.sqrt();
        boolean boolean9 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6, (int) (byte) -1);
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        boolean boolean20 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex11, complex13, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex22 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex24 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double25 = complex24.getReal();
        org.apache.commons.math3.complex.Complex complex27 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double28 = complex27.getReal();
        boolean boolean29 = org.apache.commons.math3.complex.Complex.equals(complex24, complex27);
        boolean boolean31 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex22, complex24, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex32 = complex22.log();
        org.apache.commons.math3.complex.Complex complex34 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double35 = complex34.getReal();
        org.apache.commons.math3.complex.Complex complex37 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double38 = complex37.getReal();
        boolean boolean39 = org.apache.commons.math3.complex.Complex.equals(complex34, complex37);
        org.apache.commons.math3.complex.Complex complex41 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean43 = org.apache.commons.math3.complex.Complex.equals(complex34, complex41, 10);
        org.apache.commons.math3.complex.Complex complex45 = complex41.pow((double) (byte) 1);
        boolean boolean46 = org.apache.commons.math3.complex.Complex.equals(complex22, complex45);
        boolean boolean47 = complex13.equals((java.lang.Object) complex22);
        boolean boolean49 = org.apache.commons.math3.complex.Complex.equals(complex3, complex22, (double) 'a');
        boolean boolean50 = complex3.isNaN();
        org.apache.commons.math3.complex.Complex complex52 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex54 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double55 = complex54.getReal();
        org.apache.commons.math3.complex.Complex complex57 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double58 = complex57.getReal();
        boolean boolean59 = org.apache.commons.math3.complex.Complex.equals(complex54, complex57);
        boolean boolean61 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex52, complex54, (double) 0.0f);
        double double62 = complex54.getReal();
        org.apache.commons.math3.complex.Complex complex63 = complex54.exp();
        org.apache.commons.math3.complex.Complex complex64 = complex54.tan();
        boolean boolean65 = org.apache.commons.math3.complex.Complex.equals(complex3, complex54);
        org.apache.commons.math3.complex.Complex complex66 = complex3.reciprocal();
        org.apache.commons.math3.complex.Complex complex68 = complex3.multiply((int) (byte) 1);
        org.apache.commons.math3.complex.Complex complex69 = complex68.tanh();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-1.0d) + "'", double28 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-1.0d) + "'", double35 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-1.0d) + "'", double38 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-1.0d) + "'", double55 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + (-1.0d) + "'", double58 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-1.0d) + "'", double62 == (-1.0d));
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test288");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex11 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex12 = complex11.asin();
        org.apache.commons.math3.complex.Complex complex13 = complex11.tanh();
        org.apache.commons.math3.complex.Complex complex14 = complex13.sin();
        boolean boolean15 = complex3.equals((java.lang.Object) complex13);
        org.apache.commons.math3.complex.Complex complex17 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double18 = complex17.getReal();
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double21 = complex20.getReal();
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex17, complex20);
        org.apache.commons.math3.complex.Complex complex24 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean26 = org.apache.commons.math3.complex.Complex.equals(complex17, complex24, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (short) 10);
        double double29 = complex28.getReal();
        boolean boolean30 = complex17.equals((java.lang.Object) complex28);
        org.apache.commons.math3.complex.Complex complex32 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double33 = complex32.getReal();
        double double34 = complex32.getReal();
        boolean boolean35 = complex17.equals((java.lang.Object) complex32);
        org.apache.commons.math3.complex.Complex complex36 = complex3.pow(complex32);
        org.apache.commons.math3.complex.Complex complex38 = complex3.add((-10.0d));
        org.apache.commons.math3.complex.Complex complex41 = new org.apache.commons.math3.complex.Complex(100.0d, (double) (short) 100);
        org.apache.commons.math3.complex.Complex complex43 = complex41.multiply((double) 100);
        org.apache.commons.math3.complex.Complex complex46 = org.apache.commons.math3.complex.Complex.valueOf(100.0d, (double) (short) 0);
        org.apache.commons.math3.complex.Complex complex48 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double49 = complex48.getReal();
        org.apache.commons.math3.complex.Complex complex51 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double52 = complex51.getReal();
        boolean boolean53 = org.apache.commons.math3.complex.Complex.equals(complex48, complex51);
        org.apache.commons.math3.complex.Complex complex54 = complex51.sqrt();
        org.apache.commons.math3.complex.Complex complex56 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math3.complex.Complex complex58 = complex56.tanh();
        boolean boolean60 = complex58.equals((java.lang.Object) true);
        double double61 = complex58.getImaginary();
        org.apache.commons.math3.complex.Complex complex62 = complex58.sinh();
        org.apache.commons.math3.complex.Complex complex63 = complex58.cosh();
        double double64 = complex58.getImaginary();
        org.apache.commons.math3.complex.Complex complex65 = complex51.add(complex58);
        org.apache.commons.math3.complex.Complex complex66 = complex46.add(complex58);
        org.apache.commons.math3.complex.Complex complex68 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math3.complex.Complex complex70 = complex68.tanh();
        boolean boolean72 = complex70.equals((java.lang.Object) true);
        double double73 = complex70.getImaginary();
        org.apache.commons.math3.complex.Complex complex74 = complex70.sinh();
        org.apache.commons.math3.complex.Complex complex75 = complex66.multiply(complex74);
        boolean boolean77 = org.apache.commons.math3.complex.Complex.equals(complex43, complex66, (int) '4');
        double double78 = complex66.abs();
        org.apache.commons.math3.complex.Complex complex81 = org.apache.commons.math3.complex.Complex.valueOf((double) 10.0f, (double) (-1));
        org.apache.commons.math3.complex.Complex complex82 = complex66.subtract(complex81);
        boolean boolean83 = org.apache.commons.math3.complex.Complex.equals(complex38, complex81);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.0d) + "'", double18 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1.0d) + "'", double21 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-1.0d) + "'", double33 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-1.0d) + "'", double49 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-1.0d) + "'", double52 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 100.0d + "'", double78 == 100.0d);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test289");
        org.apache.commons.math3.complex.Complex complex0 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math3.complex.Complex complex4 = complex2.tanh();
        org.apache.commons.math3.complex.Complex complex5 = complex4.acos();
        org.apache.commons.math3.complex.ComplexField complexField6 = complex5.getField();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex0, complex5, (double) 10L);
        org.apache.commons.math3.complex.Complex complex9 = complex0.log();
        boolean boolean10 = complex0.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexField6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test290");
        org.apache.commons.math3.complex.Complex complex0 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex1 = complex0.asin();
        org.apache.commons.math3.complex.Complex complex2 = complex0.tanh();
        org.apache.commons.math3.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math3.complex.Complex complex5 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double6 = complex5.getReal();
        double double7 = complex5.getReal();
        org.apache.commons.math3.complex.Complex complex8 = complex5.tan();
        org.apache.commons.math3.complex.Complex complex9 = complex5.exp();
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        org.apache.commons.math3.complex.Complex complex14 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math3.complex.Complex complex16 = complex14.tanh();
        boolean boolean18 = complex16.equals((java.lang.Object) true);
        double double19 = complex16.getImaginary();
        org.apache.commons.math3.complex.Complex complex20 = complex16.sinh();
        org.apache.commons.math3.complex.Complex complex22 = complex16.multiply(0.0d);
        boolean boolean23 = org.apache.commons.math3.complex.Complex.equals(complex11, complex16);
        org.apache.commons.math3.complex.Complex complex25 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex26 = complex25.sqrt();
        org.apache.commons.math3.complex.Complex complex27 = complex25.sqrt1z();
        org.apache.commons.math3.complex.Complex complex28 = complex16.subtract(complex25);
        org.apache.commons.math3.complex.Complex complex29 = complex9.divide(complex16);
        org.apache.commons.math3.complex.Complex complex30 = complex2.pow(complex9);
        java.util.List<org.apache.commons.math3.complex.Complex> complexList32 = complex2.nthRoot(10);
        org.apache.commons.math3.complex.Complex complex33 = complex2.cosh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.0d) + "'", double6 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexList32);
        org.junit.Assert.assertNotNull(complex33);
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test291");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex8 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex9 = complex8.sqrt();
        org.apache.commons.math3.complex.Complex complex10 = complex8.tanh();
        boolean boolean12 = complex10.equals((java.lang.Object) true);
        double double13 = complex10.getImaginary();
        org.apache.commons.math3.complex.Complex complex14 = complex10.sinh();
        org.apache.commons.math3.complex.Complex complex15 = complex10.cosh();
        double double16 = complex10.getImaginary();
        org.apache.commons.math3.complex.Complex complex17 = complex3.pow(complex10);
        boolean boolean18 = complex17.isNaN();
        org.apache.commons.math3.complex.Complex complex19 = complex17.cos();
        org.apache.commons.math3.complex.Complex complex21 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double22 = complex21.getReal();
        org.apache.commons.math3.complex.Complex complex24 = complex21.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex25 = complex19.pow(complex24);
        double double26 = complex25.getArgument();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals((double) double26, Double.NaN, 0);
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test292");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf((double) (byte) 1, 1.1385792202387124d);
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        org.apache.commons.math3.complex.Complex complex9 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double10 = complex9.getReal();
        boolean boolean11 = org.apache.commons.math3.complex.Complex.equals(complex6, complex9);
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex4, complex6, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex14 = complex4.log();
        org.apache.commons.math3.complex.Complex complex15 = complex14.asin();
        org.apache.commons.math3.complex.Complex complex16 = complex14.sin();
        org.apache.commons.math3.complex.Complex complex17 = complex2.add(complex14);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test293");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        double double11 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex12 = complex3.exp();
        org.apache.commons.math3.complex.ComplexField complexField13 = complex12.getField();
        org.apache.commons.math3.complex.Complex complex14 = complex12.acos();
        org.apache.commons.math3.complex.Complex complex16 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex17 = complex16.sqrt();
        org.apache.commons.math3.complex.Complex complex18 = complex16.tanh();
        boolean boolean20 = complex18.equals((java.lang.Object) true);
        double double21 = complex18.getImaginary();
        org.apache.commons.math3.complex.Complex complex22 = complex18.sinh();
        org.apache.commons.math3.complex.Complex complex24 = complex18.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double29 = complex28.getReal();
        org.apache.commons.math3.complex.Complex complex31 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double32 = complex31.getReal();
        boolean boolean33 = org.apache.commons.math3.complex.Complex.equals(complex28, complex31);
        boolean boolean35 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex26, complex28, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex36 = complex26.log();
        org.apache.commons.math3.complex.Complex complex38 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double39 = complex38.getReal();
        org.apache.commons.math3.complex.Complex complex41 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double42 = complex41.getReal();
        boolean boolean43 = org.apache.commons.math3.complex.Complex.equals(complex38, complex41);
        org.apache.commons.math3.complex.Complex complex45 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean47 = org.apache.commons.math3.complex.Complex.equals(complex38, complex45, 10);
        org.apache.commons.math3.complex.Complex complex49 = complex45.pow((double) (byte) 1);
        boolean boolean50 = org.apache.commons.math3.complex.Complex.equals(complex26, complex49);
        org.apache.commons.math3.complex.Complex complex51 = complex26.reciprocal();
        boolean boolean53 = org.apache.commons.math3.complex.Complex.equals(complex24, complex26, (double) (byte) 1);
        org.apache.commons.math3.complex.Complex complex54 = complex26.acos();
        org.apache.commons.math3.complex.Complex complex55 = complex26.cos();
        org.apache.commons.math3.complex.Complex complex57 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double58 = complex57.getReal();
        org.apache.commons.math3.complex.Complex complex60 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double61 = complex60.getReal();
        boolean boolean62 = org.apache.commons.math3.complex.Complex.equals(complex57, complex60);
        org.apache.commons.math3.complex.Complex complex63 = complex60.sqrt();
        org.apache.commons.math3.complex.Complex complex65 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex66 = complex65.sqrt();
        org.apache.commons.math3.complex.Complex complex67 = complex65.tanh();
        boolean boolean69 = complex67.equals((java.lang.Object) true);
        double double70 = complex67.getImaginary();
        org.apache.commons.math3.complex.Complex complex71 = complex67.sinh();
        org.apache.commons.math3.complex.Complex complex72 = complex67.cosh();
        double double73 = complex67.getImaginary();
        org.apache.commons.math3.complex.Complex complex74 = complex60.add(complex67);
        boolean boolean76 = org.apache.commons.math3.complex.Complex.equals(complex26, complex74, (double) (short) 10);
        org.apache.commons.math3.complex.Complex complex77 = complex74.sqrt1z();
        org.apache.commons.math3.complex.ComplexField complexField78 = complex77.getField();
        boolean boolean79 = complex14.equals((java.lang.Object) complex77);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-1.0d) + "'", double11 == (-1.0d));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complexField13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1.0d) + "'", double29 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-1.0d) + "'", double32 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-1.0d) + "'", double39 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + (-1.0d) + "'", double42 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + (-1.0d) + "'", double58 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-1.0d) + "'", double61 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complexField78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test294");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double9 = complex8.getReal();
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex8, complex11);
        org.apache.commons.math3.complex.Complex complex14 = complex11.sqrt();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        org.apache.commons.math3.complex.Complex complex19 = complex16.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex20 = complex14.pow(complex19);
        org.apache.commons.math3.complex.Complex complex21 = complex4.multiply(complex20);
        org.apache.commons.math3.complex.Complex complex22 = complex20.sqrt1z();
        org.apache.commons.math3.complex.Complex complex24 = complex20.multiply((double) 0L);
        double double25 = complex24.getReal();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-0.0d) + "'", double25 == (-0.0d));
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test295");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        java.lang.String str11 = complex1.toString();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex23 = complex1.add(complex20);
        org.apache.commons.math3.complex.Complex complex24 = org.apache.commons.math3.complex.Complex.NaN;
        org.apache.commons.math3.complex.Complex complex25 = complex20.subtract(complex24);
        org.apache.commons.math3.complex.Complex complex27 = complex20.subtract((double) 100.0f);
        org.apache.commons.math3.complex.Complex complex29 = complex27.multiply((int) (byte) -1);
        org.apache.commons.math3.complex.Complex complex31 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex33 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double34 = complex33.getReal();
        org.apache.commons.math3.complex.Complex complex36 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double37 = complex36.getReal();
        boolean boolean38 = org.apache.commons.math3.complex.Complex.equals(complex33, complex36);
        boolean boolean40 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex31, complex33, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex41 = complex31.log();
        org.apache.commons.math3.complex.Complex complex42 = complex41.exp();
        org.apache.commons.math3.complex.Complex complex43 = complex41.reciprocal();
        org.apache.commons.math3.complex.Complex complex44 = complex29.subtract(complex43);
        org.apache.commons.math3.complex.Complex complex46 = complex29.multiply((int) (short) -1);
        org.apache.commons.math3.complex.Complex complex47 = complex46.cos();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "(-1.0, 0.0)" + "'", str11.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + (-1.0d) + "'", double37 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test296");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex9 = complex8.sqrt();
        org.apache.commons.math3.complex.Complex complex10 = complex8.sqrt1z();
        org.apache.commons.math3.complex.Complex complex11 = complex1.add(complex10);
        org.apache.commons.math3.complex.Complex complex12 = complex10.tanh();
        org.apache.commons.math3.complex.Complex complex13 = complex12.log();
        org.apache.commons.math3.complex.Complex complex15 = complex12.subtract(0.0d);
        double double16 = complex12.getImaginary();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test297");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex4 = complex1.subtract((double) (short) 100);
        org.apache.commons.math3.complex.Complex complex6 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math3.complex.Complex complex8 = complex6.tanh();
        org.apache.commons.math3.complex.Complex complex9 = complex6.asin();
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equals(complex4, complex6);
        org.apache.commons.math3.complex.Complex complex11 = complex6.conjugate();
        org.apache.commons.math3.complex.Complex complex12 = complex11.log();
        double double13 = complex11.abs();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test298");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex9 = complex3.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        boolean boolean20 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex11, complex13, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex21 = complex11.log();
        org.apache.commons.math3.complex.Complex complex23 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double24 = complex23.getReal();
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double27 = complex26.getReal();
        boolean boolean28 = org.apache.commons.math3.complex.Complex.equals(complex23, complex26);
        org.apache.commons.math3.complex.Complex complex30 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean32 = org.apache.commons.math3.complex.Complex.equals(complex23, complex30, 10);
        org.apache.commons.math3.complex.Complex complex34 = complex30.pow((double) (byte) 1);
        boolean boolean35 = org.apache.commons.math3.complex.Complex.equals(complex11, complex34);
        org.apache.commons.math3.complex.Complex complex36 = complex11.reciprocal();
        boolean boolean38 = org.apache.commons.math3.complex.Complex.equals(complex9, complex11, (double) (byte) 1);
        org.apache.commons.math3.complex.Complex complex40 = complex11.multiply(0);
        org.apache.commons.math3.complex.Complex complex42 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double43 = complex42.getReal();
        org.apache.commons.math3.complex.Complex complex45 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double46 = complex45.getReal();
        boolean boolean47 = org.apache.commons.math3.complex.Complex.equals(complex42, complex45);
        org.apache.commons.math3.complex.Complex complex50 = new org.apache.commons.math3.complex.Complex(100.0d, (double) (short) 100);
        org.apache.commons.math3.complex.Complex complex52 = complex50.multiply((double) 100);
        org.apache.commons.math3.complex.Complex complex53 = complex52.tanh();
        org.apache.commons.math3.complex.Complex complex54 = complex42.add(complex52);
        boolean boolean56 = org.apache.commons.math3.complex.Complex.equals(complex40, complex52, 1);
        org.apache.commons.math3.complex.Complex complex58 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex60 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double61 = complex60.getReal();
        org.apache.commons.math3.complex.Complex complex63 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double64 = complex63.getReal();
        boolean boolean65 = org.apache.commons.math3.complex.Complex.equals(complex60, complex63);
        boolean boolean67 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex58, complex60, (double) 0.0f);
        double double68 = complex60.getReal();
        org.apache.commons.math3.complex.Complex complex69 = complex60.exp();
        org.apache.commons.math3.complex.Complex complex70 = complex60.asin();
        org.apache.commons.math3.complex.Complex complex71 = complex40.add(complex60);
        double double72 = complex60.getReal();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1.0d) + "'", double24 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1.0d) + "'", double27 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-1.0d) + "'", double43 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1.0d) + "'", double46 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-1.0d) + "'", double61 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + (-1.0d) + "'", double64 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-1.0d) + "'", double68 == (-1.0d));
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + (-1.0d) + "'", double72 == (-1.0d));
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test299");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        org.apache.commons.math3.complex.Complex complex7 = new org.apache.commons.math3.complex.Complex((double) (short) 0);
        org.apache.commons.math3.complex.Complex complex8 = complex3.divide(complex7);
        org.apache.commons.math3.complex.Complex complex11 = org.apache.commons.math3.complex.Complex.valueOf(100.0d, (double) (short) 0);
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex19 = complex16.sqrt();
        org.apache.commons.math3.complex.Complex complex21 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math3.complex.Complex complex23 = complex21.tanh();
        boolean boolean25 = complex23.equals((java.lang.Object) true);
        double double26 = complex23.getImaginary();
        org.apache.commons.math3.complex.Complex complex27 = complex23.sinh();
        org.apache.commons.math3.complex.Complex complex28 = complex23.cosh();
        double double29 = complex23.getImaginary();
        org.apache.commons.math3.complex.Complex complex30 = complex16.add(complex23);
        org.apache.commons.math3.complex.Complex complex31 = complex11.add(complex23);
        org.apache.commons.math3.complex.Complex complex33 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math3.complex.Complex complex35 = complex33.tanh();
        boolean boolean37 = complex35.equals((java.lang.Object) true);
        double double38 = complex35.getImaginary();
        org.apache.commons.math3.complex.Complex complex39 = complex35.sinh();
        org.apache.commons.math3.complex.Complex complex40 = complex31.multiply(complex39);
        org.apache.commons.math3.complex.Complex complex41 = complex3.add(complex31);
        org.apache.commons.math3.complex.Complex complex43 = complex41.multiply((int) '#');
        org.apache.commons.math3.complex.Complex complex46 = new org.apache.commons.math3.complex.Complex((double) (short) 100, (double) (short) -1);
        org.apache.commons.math3.complex.Complex complex47 = complex46.sqrt();
        double double48 = complex47.getReal();
        org.apache.commons.math3.complex.Complex complex50 = complex47.add((double) (-1L));
        org.apache.commons.math3.complex.Complex complex52 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex54 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double55 = complex54.getReal();
        org.apache.commons.math3.complex.Complex complex57 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double58 = complex57.getReal();
        boolean boolean59 = org.apache.commons.math3.complex.Complex.equals(complex54, complex57);
        boolean boolean61 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex52, complex54, (double) 0.0f);
        double double62 = complex54.getReal();
        org.apache.commons.math3.complex.Complex complex63 = complex54.exp();
        org.apache.commons.math3.complex.Complex complex65 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double66 = complex65.getReal();
        org.apache.commons.math3.complex.Complex complex68 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex69 = complex68.sqrt();
        org.apache.commons.math3.complex.Complex complex70 = complex68.tanh();
        boolean boolean72 = complex70.equals((java.lang.Object) true);
        double double73 = complex70.getImaginary();
        org.apache.commons.math3.complex.Complex complex74 = complex70.sinh();
        org.apache.commons.math3.complex.Complex complex76 = complex70.multiply(0.0d);
        boolean boolean77 = org.apache.commons.math3.complex.Complex.equals(complex65, complex70);
        org.apache.commons.math3.complex.Complex complex79 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex80 = complex79.sqrt();
        org.apache.commons.math3.complex.Complex complex81 = complex79.sqrt1z();
        org.apache.commons.math3.complex.Complex complex82 = complex70.subtract(complex79);
        org.apache.commons.math3.complex.Complex complex83 = complex82.acos();
        org.apache.commons.math3.complex.Complex complex84 = complex63.divide(complex82);
        org.apache.commons.math3.complex.Complex complex85 = complex50.subtract(complex84);
        org.apache.commons.math3.complex.Complex complex86 = complex50.log();
        boolean boolean88 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex43, complex86, 0.8778963166742729d);
        org.apache.commons.math3.complex.Complex complex91 = new org.apache.commons.math3.complex.Complex(100.0d, (double) (short) 100);
        double double92 = complex91.getReal();
        org.apache.commons.math3.complex.Complex complex95 = org.apache.commons.math3.complex.Complex.valueOf(1.9643867237284715E-15d, (double) (byte) 1);
        org.apache.commons.math3.complex.Complex complex96 = complex91.pow(complex95);
        boolean boolean98 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex43, complex91, 2.718281828459045d);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10.000124996093955d + "'", double48 == 10.000124996093955d);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-1.0d) + "'", double55 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + (-1.0d) + "'", double58 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-1.0d) + "'", double62 == (-1.0d));
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + (-1.0d) + "'", double66 == (-1.0d));
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 100.0d + "'", double92 == 100.0d);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test300");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.cos();
        org.apache.commons.math3.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math3.complex.Complex complex4 = complex2.reciprocal();
        org.apache.commons.math3.complex.Complex complex6 = complex4.add((double) (-1));
        java.lang.Class<?> wildcardClass7 = complex6.getClass();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test301");
        org.apache.commons.math3.complex.Complex complex0 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex1 = complex0.asin();
        double double2 = complex1.getImaginary();
        org.apache.commons.math3.complex.Complex complex4 = complex1.add(3.1415926535897927d);
        org.apache.commons.math3.complex.Complex complex5 = complex1.sin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-0.0d) + "'", double2 == (-0.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test302");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        java.lang.String str11 = complex1.toString();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex23 = complex1.add(complex20);
        org.apache.commons.math3.complex.Complex complex24 = org.apache.commons.math3.complex.Complex.NaN;
        org.apache.commons.math3.complex.Complex complex25 = complex20.subtract(complex24);
        org.apache.commons.math3.complex.Complex complex27 = complex20.multiply((int) (byte) -1);
        org.apache.commons.math3.complex.Complex complex28 = complex20.tan();
        org.apache.commons.math3.complex.ComplexField complexField29 = complex28.getField();
        org.apache.commons.math3.complex.Complex complex30 = complex28.atan();
        org.apache.commons.math3.complex.Complex complex33 = org.apache.commons.math3.complex.Complex.valueOf((double) (byte) 100, (double) 0L);
        org.apache.commons.math3.complex.Complex complex35 = complex33.multiply((double) (short) 10);
        boolean boolean36 = org.apache.commons.math3.complex.Complex.equals(complex30, complex35);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "(-1.0, 0.0)" + "'", str11.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complexField29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test303");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex9 = complex3.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double15 = complex14.getReal();
        boolean boolean16 = org.apache.commons.math3.complex.Complex.equals(complex11, complex14);
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean20 = org.apache.commons.math3.complex.Complex.equals(complex11, complex18, 10);
        org.apache.commons.math3.complex.Complex complex22 = complex18.pow((double) (byte) 1);
        boolean boolean24 = org.apache.commons.math3.complex.Complex.equals(complex3, complex22, (int) (short) -1);
        org.apache.commons.math3.complex.ComplexField complexField25 = complex3.getField();
        org.apache.commons.math3.complex.Complex complex26 = complex3.exp();
        org.apache.commons.math3.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math3.complex.Complex complex29 = complex27.multiply((int) (byte) 10);
        org.apache.commons.math3.complex.Complex complex30 = complex29.cosh();
        org.apache.commons.math3.complex.Complex complex31 = complex30.sqrt1z();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(complexField25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test304");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equals(complex1, complex8, 10);
        org.apache.commons.math3.complex.Complex complex12 = complex1.multiply(10);
        org.apache.commons.math3.complex.Complex complex13 = complex1.cosh();
        org.apache.commons.math3.complex.Complex complex15 = complex13.add((double) (-1));
        org.apache.commons.math3.complex.Complex complex17 = complex13.pow((double) 10);
        org.apache.commons.math3.complex.Complex complex18 = complex17.cosh();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test305");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex8 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex10 = complex3.multiply((-2.0d));
        org.apache.commons.math3.complex.Complex complex11 = complex3.tan();
        org.apache.commons.math3.complex.Complex complex13 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math3.complex.Complex complex15 = complex13.tanh();
        boolean boolean17 = complex15.equals((java.lang.Object) true);
        double double18 = complex15.getImaginary();
        org.apache.commons.math3.complex.Complex complex19 = complex15.sinh();
        org.apache.commons.math3.complex.Complex complex21 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex23 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double24 = complex23.getReal();
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double27 = complex26.getReal();
        boolean boolean28 = org.apache.commons.math3.complex.Complex.equals(complex23, complex26);
        boolean boolean30 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex21, complex23, (double) 0.0f);
        java.lang.String str31 = complex21.toString();
        org.apache.commons.math3.complex.Complex complex33 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double34 = complex33.getReal();
        org.apache.commons.math3.complex.Complex complex36 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double37 = complex36.getReal();
        boolean boolean38 = org.apache.commons.math3.complex.Complex.equals(complex33, complex36);
        org.apache.commons.math3.complex.Complex complex40 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean42 = org.apache.commons.math3.complex.Complex.equals(complex33, complex40, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex43 = complex21.add(complex40);
        org.apache.commons.math3.complex.Complex complex44 = complex19.multiply(complex43);
        java.lang.Class<?> wildcardClass45 = complex43.getClass();
        org.apache.commons.math3.complex.Complex complex47 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double48 = complex47.getReal();
        org.apache.commons.math3.complex.Complex complex50 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double51 = complex50.getReal();
        boolean boolean52 = org.apache.commons.math3.complex.Complex.equals(complex47, complex50);
        org.apache.commons.math3.complex.Complex complex55 = new org.apache.commons.math3.complex.Complex(100.0d, (double) (short) 100);
        org.apache.commons.math3.complex.Complex complex57 = complex55.multiply((double) 100);
        org.apache.commons.math3.complex.Complex complex58 = complex57.tanh();
        org.apache.commons.math3.complex.Complex complex59 = complex47.add(complex57);
        double double60 = complex57.getArgument();
        boolean boolean62 = org.apache.commons.math3.complex.Complex.equals(complex43, complex57, (double) 1.0f);
        org.apache.commons.math3.complex.Complex complex63 = complex3.multiply(complex57);
        org.apache.commons.math3.complex.Complex complex65 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double66 = complex65.getReal();
        org.apache.commons.math3.complex.Complex complex68 = complex65.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex69 = complex65.log();
        org.apache.commons.math3.complex.Complex complex71 = complex65.divide((double) 100L);
        org.apache.commons.math3.complex.Complex complex72 = complex65.atan();
        org.apache.commons.math3.complex.Complex complex73 = complex3.multiply(complex72);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1.0d) + "'", double24 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1.0d) + "'", double27 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "(-1.0, 0.0)" + "'", str31.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + (-1.0d) + "'", double37 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-1.0d) + "'", double48 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-1.0d) + "'", double51 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.7853981633974483d + "'", double60 == 0.7853981633974483d);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + (-1.0d) + "'", double66 == (-1.0d));
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test306");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        double double4 = complex3.abs();
        org.apache.commons.math3.complex.Complex complex5 = complex3.cosh();
        org.apache.commons.math3.complex.Complex complex6 = complex3.cos();
        org.apache.commons.math3.complex.Complex complex8 = complex6.add((double) 0L);
        double double9 = complex8.getArgument();
        org.apache.commons.math3.complex.Complex complex10 = complex8.cos();
        org.apache.commons.math3.complex.Complex complex11 = complex8.reciprocal();
        org.apache.commons.math3.complex.Complex complex12 = complex8.atan();
        org.apache.commons.math3.complex.Complex complex13 = complex12.sinh();
        org.apache.commons.math3.complex.Complex complex14 = complex13.acos();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-0.0d) + "'", double9 == (-0.0d));
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test307");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex8 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex9 = complex8.sqrt();
        org.apache.commons.math3.complex.Complex complex10 = complex8.tanh();
        boolean boolean12 = complex10.equals((java.lang.Object) true);
        double double13 = complex10.getImaginary();
        org.apache.commons.math3.complex.Complex complex14 = complex10.sinh();
        org.apache.commons.math3.complex.Complex complex15 = complex10.cosh();
        double double16 = complex10.getImaginary();
        org.apache.commons.math3.complex.Complex complex17 = complex3.pow(complex10);
        double double18 = complex17.abs();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertEquals((double) double18, Double.NaN, 0);
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test308");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) ' ');
        org.apache.commons.math3.complex.Complex complex2 = complex1.cosh();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        double double6 = complex4.getReal();
        org.apache.commons.math3.complex.Complex complex7 = complex4.tan();
        org.apache.commons.math3.complex.Complex complex8 = complex4.exp();
        org.apache.commons.math3.complex.Complex complex10 = complex4.multiply((double) 10);
        org.apache.commons.math3.complex.Complex complex12 = complex4.multiply((int) (short) 100);
        boolean boolean14 = org.apache.commons.math3.complex.Complex.equals(complex2, complex12, (double) 100.0f);
        org.apache.commons.math3.complex.ComplexField complexField15 = complex12.getField();
        org.apache.commons.math3.complex.Complex complex17 = complex12.multiply((int) 'a');
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.0d) + "'", double6 == (-1.0d));
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complexField15);
        org.junit.Assert.assertNotNull(complex17);
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test309");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex9 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double15 = complex14.getReal();
        boolean boolean16 = org.apache.commons.math3.complex.Complex.equals(complex11, complex14);
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex9, complex11, (double) 0.0f);
        java.lang.String str19 = complex9.toString();
        org.apache.commons.math3.complex.Complex complex21 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double22 = complex21.getReal();
        org.apache.commons.math3.complex.Complex complex24 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double25 = complex24.getReal();
        boolean boolean26 = org.apache.commons.math3.complex.Complex.equals(complex21, complex24);
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean30 = org.apache.commons.math3.complex.Complex.equals(complex21, complex28, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex31 = complex9.add(complex28);
        org.apache.commons.math3.complex.Complex complex32 = complex7.multiply(complex31);
        org.apache.commons.math3.complex.Complex complex34 = complex32.divide((double) 1L);
        org.apache.commons.math3.complex.Complex complex35 = complex32.reciprocal();
        org.apache.commons.math3.complex.Complex complex36 = complex35.conjugate();
        boolean boolean37 = complex35.isInfinite();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "(-1.0, 0.0)" + "'", str19.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test310");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex9 = complex8.sqrt();
        org.apache.commons.math3.complex.Complex complex10 = complex8.sqrt1z();
        org.apache.commons.math3.complex.Complex complex11 = complex1.add(complex10);
        org.apache.commons.math3.complex.Complex complex12 = complex10.tanh();
        org.apache.commons.math3.complex.Complex complex13 = complex12.log();
        org.apache.commons.math3.complex.Complex complex15 = complex12.subtract(0.0d);
        java.lang.Class<?> wildcardClass16 = complex15.getClass();
        org.apache.commons.math3.complex.Complex complex17 = complex15.tanh();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(complex17);
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test311");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf((-2.0d), (double) 'a');
        boolean boolean3 = complex2.isNaN();
        org.apache.commons.math3.complex.Complex complex4 = complex2.cos();
        org.apache.commons.math3.complex.Complex complex6 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex7 = complex6.cos();
        org.apache.commons.math3.complex.Complex complex9 = complex7.subtract(1.0d);
        org.apache.commons.math3.complex.Complex complex11 = complex7.add((-0.0d));
        org.apache.commons.math3.complex.Complex complex12 = complex4.subtract(complex11);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test312");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) 1.0f);
        org.apache.commons.math3.complex.Complex complex3 = complex1.divide(0.0d);
        org.apache.commons.math3.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        org.apache.commons.math3.complex.Complex complex9 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math3.complex.Complex complex11 = complex9.tanh();
        boolean boolean13 = complex11.equals((java.lang.Object) true);
        double double14 = complex11.getImaginary();
        org.apache.commons.math3.complex.Complex complex15 = complex11.sinh();
        org.apache.commons.math3.complex.Complex complex17 = complex11.multiply(0.0d);
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex6, complex11);
        org.apache.commons.math3.complex.Complex complex20 = complex6.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex21 = complex20.log();
        org.apache.commons.math3.complex.Complex complex23 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex24 = complex23.cos();
        org.apache.commons.math3.complex.Complex complex25 = complex20.multiply(complex23);
        double double26 = complex25.abs();
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex30 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double31 = complex30.getReal();
        org.apache.commons.math3.complex.Complex complex33 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double34 = complex33.getReal();
        boolean boolean35 = org.apache.commons.math3.complex.Complex.equals(complex30, complex33);
        boolean boolean37 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex28, complex30, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex39 = complex30.multiply(1);
        org.apache.commons.math3.complex.Complex complex40 = complex30.conjugate();
        org.apache.commons.math3.complex.Complex complex41 = complex25.pow(complex40);
        org.apache.commons.math3.complex.Complex complex42 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex44 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double45 = complex44.getReal();
        org.apache.commons.math3.complex.Complex complex47 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math3.complex.Complex complex49 = complex47.tanh();
        boolean boolean51 = complex49.equals((java.lang.Object) true);
        double double52 = complex49.getImaginary();
        org.apache.commons.math3.complex.Complex complex53 = complex49.sinh();
        org.apache.commons.math3.complex.Complex complex55 = complex49.multiply(0.0d);
        boolean boolean56 = org.apache.commons.math3.complex.Complex.equals(complex44, complex49);
        org.apache.commons.math3.complex.Complex complex58 = complex44.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex59 = complex42.subtract(complex58);
        org.apache.commons.math3.complex.Complex complex60 = complex59.exp();
        double double61 = complex60.abs();
        org.apache.commons.math3.complex.Complex complex62 = complex25.add(complex60);
        org.apache.commons.math3.complex.Complex complex63 = complex4.add(complex25);
        boolean boolean64 = complex63.isInfinite();
        double double65 = complex63.getArgument();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-1.0d) + "'", double31 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1.0d) + "'", double45 == (-1.0d));
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.0d + "'", double61 == 1.0d);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals((double) double65, Double.NaN, 0);
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test313");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        java.lang.String str11 = complex1.toString();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex23 = complex1.add(complex20);
        org.apache.commons.math3.complex.Complex complex24 = org.apache.commons.math3.complex.Complex.NaN;
        org.apache.commons.math3.complex.Complex complex25 = complex20.subtract(complex24);
        org.apache.commons.math3.complex.Complex complex27 = complex20.subtract((double) 100.0f);
        org.apache.commons.math3.complex.Complex complex29 = complex27.multiply((int) (byte) -1);
        org.apache.commons.math3.complex.Complex complex30 = complex27.asin();
        org.apache.commons.math3.complex.Complex complex31 = complex30.sinh();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "(-1.0, 0.0)" + "'", str11.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test314");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex(100.0d, (double) (short) 100);
        org.apache.commons.math3.complex.Complex complex4 = complex2.multiply((double) 100);
        org.apache.commons.math3.complex.Complex complex6 = complex4.multiply((double) (byte) 10);
        org.apache.commons.math3.complex.ComplexField complexField7 = complex4.getField();
        boolean boolean8 = complex4.isNaN();
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complexField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test315");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((-10.0d));
        org.apache.commons.math3.complex.Complex complex2 = complex1.reciprocal();
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test316");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (short) 10);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = complex1.pow((double) (short) 1);
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double9 = complex8.getReal();
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex8, complex11);
        boolean boolean15 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex6, complex8, (double) 0.0f);
        java.lang.String str16 = complex6.toString();
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double19 = complex18.getReal();
        org.apache.commons.math3.complex.Complex complex21 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double22 = complex21.getReal();
        boolean boolean23 = org.apache.commons.math3.complex.Complex.equals(complex18, complex21);
        org.apache.commons.math3.complex.Complex complex25 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean27 = org.apache.commons.math3.complex.Complex.equals(complex18, complex25, 10);
        boolean boolean28 = org.apache.commons.math3.complex.Complex.equals(complex6, complex25);
        org.apache.commons.math3.complex.Complex complex29 = complex1.pow(complex25);
        org.apache.commons.math3.complex.Complex complex31 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double32 = complex31.getReal();
        org.apache.commons.math3.complex.Complex complex34 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math3.complex.Complex complex36 = complex34.tanh();
        boolean boolean38 = complex36.equals((java.lang.Object) true);
        double double39 = complex36.getImaginary();
        org.apache.commons.math3.complex.Complex complex40 = complex36.sinh();
        org.apache.commons.math3.complex.Complex complex42 = complex36.multiply(0.0d);
        boolean boolean43 = org.apache.commons.math3.complex.Complex.equals(complex31, complex36);
        org.apache.commons.math3.complex.Complex complex45 = complex31.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex47 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math3.complex.Complex complex49 = complex47.tanh();
        boolean boolean51 = complex49.equals((java.lang.Object) true);
        double double52 = complex49.getImaginary();
        org.apache.commons.math3.complex.Complex complex53 = complex45.add(complex49);
        org.apache.commons.math3.complex.Complex complex54 = complex25.add(complex45);
        org.apache.commons.math3.complex.Complex complex55 = complex25.sin();
        org.apache.commons.math3.complex.Complex complex56 = complex55.cosh();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 10.0d + "'", double2 == 10.0d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "(-1.0, 0.0)" + "'", str16.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.0d) + "'", double19 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-1.0d) + "'", double32 == (-1.0d));
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test317");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex((double) 1, 0.43107595064559234d);
        org.apache.commons.math3.complex.Complex complex4 = complex2.pow(10000.0d);
        org.junit.Assert.assertNotNull(complex4);
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test318");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex4 = complex1.subtract((double) (short) 100);
        org.apache.commons.math3.complex.Complex complex5 = complex4.sqrt1z();
        org.apache.commons.math3.complex.ComplexField complexField6 = complex4.getField();
        boolean boolean7 = complex4.isNaN();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test319");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math3.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math3.complex.Complex complex6 = complex4.subtract((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex7 = complex4.log();
        org.apache.commons.math3.complex.Complex complex8 = complex7.sqrt1z();
        org.apache.commons.math3.complex.Complex complex10 = complex7.divide(100.00499987500623d);
        org.apache.commons.math3.complex.ComplexField complexField11 = complex7.getField();
        boolean boolean12 = complex7.isNaN();
        org.apache.commons.math3.complex.Complex complex14 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math3.complex.Complex complex16 = complex14.tanh();
        boolean boolean18 = complex16.equals((java.lang.Object) true);
        double double19 = complex16.getImaginary();
        org.apache.commons.math3.complex.Complex complex20 = complex16.sinh();
        org.apache.commons.math3.complex.Complex complex22 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex24 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double25 = complex24.getReal();
        org.apache.commons.math3.complex.Complex complex27 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double28 = complex27.getReal();
        boolean boolean29 = org.apache.commons.math3.complex.Complex.equals(complex24, complex27);
        boolean boolean31 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex22, complex24, (double) 0.0f);
        java.lang.String str32 = complex22.toString();
        org.apache.commons.math3.complex.Complex complex34 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double35 = complex34.getReal();
        org.apache.commons.math3.complex.Complex complex37 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double38 = complex37.getReal();
        boolean boolean39 = org.apache.commons.math3.complex.Complex.equals(complex34, complex37);
        org.apache.commons.math3.complex.Complex complex41 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean43 = org.apache.commons.math3.complex.Complex.equals(complex34, complex41, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex44 = complex22.add(complex41);
        org.apache.commons.math3.complex.Complex complex45 = complex20.multiply(complex44);
        org.apache.commons.math3.complex.Complex complex47 = complex45.divide((double) 1L);
        org.apache.commons.math3.complex.Complex complex48 = complex45.reciprocal();
        boolean boolean50 = org.apache.commons.math3.complex.Complex.equals(complex7, complex48, (int) (byte) 1);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-1.0d) + "'", double28 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "(-1.0, 0.0)" + "'", str32.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-1.0d) + "'", double35 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-1.0d) + "'", double38 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test320");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equals(complex1, complex8, 10);
        org.apache.commons.math3.complex.Complex complex11 = complex8.sin();
        org.apache.commons.math3.complex.Complex complex12 = complex8.atan();
        org.apache.commons.math3.complex.Complex complex13 = complex8.log();
        org.apache.commons.math3.complex.Complex complex14 = complex13.negate();
        org.apache.commons.math3.complex.Complex complex15 = complex14.asin();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test321");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        double double4 = complex3.abs();
        org.apache.commons.math3.complex.Complex complex5 = complex3.cosh();
        org.apache.commons.math3.complex.Complex complex6 = complex3.cos();
        org.apache.commons.math3.complex.Complex complex8 = complex6.add((double) 0L);
        double double9 = complex8.getArgument();
        org.apache.commons.math3.complex.Complex complex10 = complex8.cos();
        org.apache.commons.math3.complex.Complex complex11 = complex10.negate();
        java.lang.String str12 = complex11.toString();
        org.apache.commons.math3.complex.Complex complex13 = complex11.sqrt1z();
        org.apache.commons.math3.complex.Complex complex14 = complex11.cos();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-0.0d) + "'", double9 == (-0.0d));
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "(-0.5403023058681398, -0.0)" + "'", str12.equals("(-0.5403023058681398, -0.0)"));
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test322");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        java.lang.String str11 = complex1.toString();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex23 = complex1.add(complex20);
        org.apache.commons.math3.complex.Complex complex24 = org.apache.commons.math3.complex.Complex.NaN;
        org.apache.commons.math3.complex.Complex complex25 = complex20.subtract(complex24);
        org.apache.commons.math3.complex.Complex complex27 = complex20.subtract((double) 100.0f);
        org.apache.commons.math3.complex.Complex complex29 = complex27.multiply((int) (byte) -1);
        org.apache.commons.math3.complex.Complex complex32 = new org.apache.commons.math3.complex.Complex(0.0d, (double) ' ');
        org.apache.commons.math3.complex.Complex complex33 = complex32.asin();
        boolean boolean34 = complex29.equals((java.lang.Object) complex33);
        org.apache.commons.math3.complex.Complex complex36 = complex29.pow(0.0d);
        org.apache.commons.math3.complex.Complex complex38 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math3.complex.Complex complex40 = complex38.tanh();
        double double41 = complex40.abs();
        org.apache.commons.math3.complex.Complex complex42 = complex40.exp();
        org.apache.commons.math3.complex.Complex complex43 = complex42.negate();
        org.apache.commons.math3.complex.Complex complex44 = complex43.sin();
        org.apache.commons.math3.complex.Complex complex47 = org.apache.commons.math3.complex.Complex.valueOf(100.0d, (double) (short) 0);
        org.apache.commons.math3.complex.Complex complex49 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double50 = complex49.getReal();
        org.apache.commons.math3.complex.Complex complex52 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double53 = complex52.getReal();
        boolean boolean54 = org.apache.commons.math3.complex.Complex.equals(complex49, complex52);
        org.apache.commons.math3.complex.Complex complex55 = complex52.sqrt();
        org.apache.commons.math3.complex.Complex complex57 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex58 = complex57.sqrt();
        org.apache.commons.math3.complex.Complex complex59 = complex57.tanh();
        boolean boolean61 = complex59.equals((java.lang.Object) true);
        double double62 = complex59.getImaginary();
        org.apache.commons.math3.complex.Complex complex63 = complex59.sinh();
        org.apache.commons.math3.complex.Complex complex64 = complex59.cosh();
        double double65 = complex59.getImaginary();
        org.apache.commons.math3.complex.Complex complex66 = complex52.add(complex59);
        org.apache.commons.math3.complex.Complex complex67 = complex47.add(complex59);
        org.apache.commons.math3.complex.Complex complex69 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex70 = complex69.sqrt();
        org.apache.commons.math3.complex.Complex complex71 = complex69.tanh();
        boolean boolean73 = complex71.equals((java.lang.Object) true);
        double double74 = complex71.getImaginary();
        org.apache.commons.math3.complex.Complex complex75 = complex71.sinh();
        org.apache.commons.math3.complex.Complex complex76 = complex67.multiply(complex75);
        org.apache.commons.math3.complex.Complex complex77 = complex44.pow(complex67);
        org.apache.commons.math3.complex.Complex complex78 = complex77.sin();
        org.apache.commons.math3.complex.Complex complex79 = complex77.reciprocal();
        boolean boolean81 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex36, complex77, 0.5872139151569291d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "(-1.0, 0.0)" + "'", str11.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-1.0d) + "'", double50 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-1.0d) + "'", double53 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test323");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex(100.0d, (double) (short) 100);
        org.apache.commons.math3.complex.Complex complex4 = complex2.multiply(3.1415926535897927d);
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        org.apache.commons.math3.complex.Complex complex9 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double10 = complex9.getReal();
        boolean boolean11 = org.apache.commons.math3.complex.Complex.equals(complex6, complex9);
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean15 = org.apache.commons.math3.complex.Complex.equals(complex6, complex13, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex17 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex19 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double20 = complex19.getReal();
        org.apache.commons.math3.complex.Complex complex22 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double23 = complex22.getReal();
        boolean boolean24 = org.apache.commons.math3.complex.Complex.equals(complex19, complex22);
        boolean boolean26 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex17, complex19, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex30 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double31 = complex30.getReal();
        org.apache.commons.math3.complex.Complex complex33 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double34 = complex33.getReal();
        boolean boolean35 = org.apache.commons.math3.complex.Complex.equals(complex30, complex33);
        boolean boolean37 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex28, complex30, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex38 = complex28.log();
        org.apache.commons.math3.complex.Complex complex40 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double41 = complex40.getReal();
        org.apache.commons.math3.complex.Complex complex43 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double44 = complex43.getReal();
        boolean boolean45 = org.apache.commons.math3.complex.Complex.equals(complex40, complex43);
        org.apache.commons.math3.complex.Complex complex47 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean49 = org.apache.commons.math3.complex.Complex.equals(complex40, complex47, 10);
        org.apache.commons.math3.complex.Complex complex51 = complex47.pow((double) (byte) 1);
        boolean boolean52 = org.apache.commons.math3.complex.Complex.equals(complex28, complex51);
        boolean boolean53 = complex19.equals((java.lang.Object) complex28);
        boolean boolean55 = org.apache.commons.math3.complex.Complex.equals(complex6, complex28, (int) (byte) 100);
        org.apache.commons.math3.complex.Complex complex56 = complex6.cos();
        org.apache.commons.math3.complex.Complex complex58 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex59 = complex58.cos();
        org.apache.commons.math3.complex.Complex complex61 = complex59.subtract(1.0d);
        org.apache.commons.math3.complex.Complex complex63 = complex59.subtract((double) 0);
        org.apache.commons.math3.complex.Complex complex64 = complex59.cosh();
        org.apache.commons.math3.complex.Complex complex65 = complex6.pow(complex64);
        org.apache.commons.math3.complex.Complex complex66 = complex2.divide(complex6);
        org.apache.commons.math3.complex.Complex complex68 = complex2.pow(10.000124996093955d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1.0d) + "'", double20 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-1.0d) + "'", double23 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-1.0d) + "'", double31 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-1.0d) + "'", double41 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1.0d) + "'", double44 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex68);
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test324");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex9 = complex3.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double15 = complex14.getReal();
        boolean boolean16 = org.apache.commons.math3.complex.Complex.equals(complex11, complex14);
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean20 = org.apache.commons.math3.complex.Complex.equals(complex11, complex18, 10);
        org.apache.commons.math3.complex.Complex complex22 = complex18.pow((double) (byte) 1);
        boolean boolean24 = org.apache.commons.math3.complex.Complex.equals(complex3, complex22, (int) (short) -1);
        org.apache.commons.math3.complex.ComplexField complexField25 = complex3.getField();
        org.apache.commons.math3.complex.Complex complex26 = complex3.exp();
        org.apache.commons.math3.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math3.complex.Complex complex29 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math3.complex.Complex complex31 = complex29.tanh();
        boolean boolean33 = complex31.equals((java.lang.Object) true);
        double double34 = complex31.getImaginary();
        org.apache.commons.math3.complex.Complex complex35 = complex31.sinh();
        org.apache.commons.math3.complex.Complex complex36 = complex31.cosh();
        org.apache.commons.math3.complex.Complex complex38 = complex36.subtract((double) 0L);
        boolean boolean39 = complex26.equals((java.lang.Object) 0L);
        org.apache.commons.math3.complex.Complex complex40 = complex26.log();
        org.apache.commons.math3.complex.Complex complex41 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex43 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double44 = complex43.getReal();
        org.apache.commons.math3.complex.Complex complex46 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math3.complex.Complex complex48 = complex46.tanh();
        boolean boolean50 = complex48.equals((java.lang.Object) true);
        double double51 = complex48.getImaginary();
        org.apache.commons.math3.complex.Complex complex52 = complex48.sinh();
        org.apache.commons.math3.complex.Complex complex54 = complex48.multiply(0.0d);
        boolean boolean55 = org.apache.commons.math3.complex.Complex.equals(complex43, complex48);
        org.apache.commons.math3.complex.Complex complex57 = complex43.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex58 = complex41.subtract(complex57);
        org.apache.commons.math3.complex.Complex complex59 = complex41.tan();
        org.apache.commons.math3.complex.Complex complex60 = complex26.multiply(complex59);
        double double61 = complex26.getReal();
        org.apache.commons.math3.complex.Complex complex64 = new org.apache.commons.math3.complex.Complex((double) (short) -1, (double) 1.0f);
        org.apache.commons.math3.complex.Complex complex66 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double67 = complex66.getReal();
        org.apache.commons.math3.complex.Complex complex69 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double70 = complex69.getReal();
        boolean boolean71 = org.apache.commons.math3.complex.Complex.equals(complex66, complex69);
        org.apache.commons.math3.complex.Complex complex73 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex74 = complex73.sqrt();
        org.apache.commons.math3.complex.Complex complex75 = complex73.tanh();
        boolean boolean77 = complex75.equals((java.lang.Object) true);
        double double78 = complex75.getImaginary();
        org.apache.commons.math3.complex.Complex complex79 = complex75.sinh();
        org.apache.commons.math3.complex.Complex complex80 = complex75.cosh();
        double double81 = complex75.getImaginary();
        boolean boolean82 = complex69.equals((java.lang.Object) complex75);
        org.apache.commons.math3.complex.Complex complex83 = complex69.acos();
        org.apache.commons.math3.complex.Complex complex84 = complex64.pow(complex83);
        org.apache.commons.math3.complex.Complex complex86 = new org.apache.commons.math3.complex.Complex((-2.0d));
        org.apache.commons.math3.complex.Complex complex87 = complex86.acos();
        boolean boolean89 = org.apache.commons.math3.complex.Complex.equals(complex84, complex86, (double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex90 = complex26.pow(complex86);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(complexField25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1.0d) + "'", double44 == (-1.0d));
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.0d + "'", double61 == 1.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + (-1.0d) + "'", double67 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + (-1.0d) + "'", double70 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(complex90);
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test325");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf((double) (byte) 1, (double) (byte) 10);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test326");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math3.complex.Complex complex4 = complex1.asin();
        org.apache.commons.math3.complex.Complex complex6 = complex4.pow(100.0d);
        org.apache.commons.math3.complex.Complex complex8 = complex6.divide(0.03125d);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex8);
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test327");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.acos();
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test328");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex12 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double15 = complex14.getReal();
        org.apache.commons.math3.complex.Complex complex17 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double18 = complex17.getReal();
        boolean boolean19 = org.apache.commons.math3.complex.Complex.equals(complex14, complex17);
        boolean boolean21 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex12, complex14, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex22 = complex12.log();
        org.apache.commons.math3.complex.Complex complex24 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double25 = complex24.getReal();
        org.apache.commons.math3.complex.Complex complex27 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double28 = complex27.getReal();
        boolean boolean29 = org.apache.commons.math3.complex.Complex.equals(complex24, complex27);
        org.apache.commons.math3.complex.Complex complex31 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean33 = org.apache.commons.math3.complex.Complex.equals(complex24, complex31, 10);
        org.apache.commons.math3.complex.Complex complex35 = complex31.pow((double) (byte) 1);
        boolean boolean36 = org.apache.commons.math3.complex.Complex.equals(complex12, complex35);
        boolean boolean37 = complex3.equals((java.lang.Object) complex12);
        org.apache.commons.math3.complex.Complex complex38 = complex3.reciprocal();
        org.apache.commons.math3.complex.Complex complex39 = complex3.cosh();
        org.apache.commons.math3.complex.Complex complex41 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math3.complex.Complex complex43 = complex41.tanh();
        boolean boolean45 = complex43.equals((java.lang.Object) true);
        double double46 = complex43.getImaginary();
        org.apache.commons.math3.complex.Complex complex48 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double49 = complex48.getReal();
        org.apache.commons.math3.complex.Complex complex51 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double52 = complex51.getReal();
        boolean boolean53 = org.apache.commons.math3.complex.Complex.equals(complex48, complex51);
        org.apache.commons.math3.complex.Complex complex55 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean57 = org.apache.commons.math3.complex.Complex.equals(complex48, complex55, 10);
        org.apache.commons.math3.complex.Complex complex59 = complex55.pow((double) (byte) 1);
        boolean boolean61 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex43, complex55, (double) (-1));
        org.apache.commons.math3.complex.Complex complex63 = complex55.multiply((double) (byte) 0);
        org.apache.commons.math3.complex.Complex complex65 = complex55.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex66 = complex55.cos();
        org.apache.commons.math3.complex.Complex complex67 = complex39.multiply(complex66);
        double double68 = complex67.getArgument();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.0d) + "'", double18 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-1.0d) + "'", double28 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-1.0d) + "'", double49 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-1.0d) + "'", double52 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test329");
        org.apache.commons.math3.complex.Complex complex0 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double3 = complex2.getReal();
        org.apache.commons.math3.complex.Complex complex5 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math3.complex.Complex complex7 = complex5.tanh();
        boolean boolean9 = complex7.equals((java.lang.Object) true);
        double double10 = complex7.getImaginary();
        org.apache.commons.math3.complex.Complex complex11 = complex7.sinh();
        org.apache.commons.math3.complex.Complex complex13 = complex7.multiply(0.0d);
        boolean boolean14 = org.apache.commons.math3.complex.Complex.equals(complex2, complex7);
        org.apache.commons.math3.complex.Complex complex16 = complex2.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex17 = complex0.subtract(complex16);
        org.apache.commons.math3.complex.Complex complex19 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double20 = complex19.getReal();
        double double21 = complex19.getReal();
        org.apache.commons.math3.complex.Complex complex22 = complex19.tan();
        org.apache.commons.math3.complex.Complex complex23 = complex16.pow(complex22);
        org.apache.commons.math3.complex.Complex complex25 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex27 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double28 = complex27.getReal();
        org.apache.commons.math3.complex.Complex complex30 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double31 = complex30.getReal();
        boolean boolean32 = org.apache.commons.math3.complex.Complex.equals(complex27, complex30);
        boolean boolean34 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex25, complex27, (double) 0.0f);
        java.lang.String str35 = complex25.toString();
        org.apache.commons.math3.complex.Complex complex37 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double38 = complex37.getReal();
        org.apache.commons.math3.complex.Complex complex40 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double41 = complex40.getReal();
        boolean boolean42 = org.apache.commons.math3.complex.Complex.equals(complex37, complex40);
        org.apache.commons.math3.complex.Complex complex44 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean46 = org.apache.commons.math3.complex.Complex.equals(complex37, complex44, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex47 = complex25.add(complex44);
        java.lang.String str48 = complex44.toString();
        org.apache.commons.math3.complex.Complex complex50 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex51 = complex44.divide(complex50);
        org.apache.commons.math3.complex.Complex complex52 = complex44.tanh();
        org.apache.commons.math3.complex.Complex complex54 = complex52.multiply((double) '#');
        org.apache.commons.math3.complex.Complex complex55 = complex52.sinh();
        org.apache.commons.math3.complex.Complex complex56 = complex16.subtract(complex55);
        org.apache.commons.math3.complex.Complex complex58 = complex16.subtract(100.0d);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1.0d) + "'", double20 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1.0d) + "'", double21 == (-1.0d));
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-1.0d) + "'", double28 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-1.0d) + "'", double31 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "(-1.0, 0.0)" + "'", str35.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-1.0d) + "'", double38 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-1.0d) + "'", double41 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "(-1.0, 0.0)" + "'", str48.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex58);
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test330");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex(32.0d, (-0.8414709848078965d));
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test331");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        java.lang.String str11 = complex1.toString();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex23 = complex1.add(complex20);
        org.apache.commons.math3.complex.Complex complex24 = org.apache.commons.math3.complex.Complex.NaN;
        org.apache.commons.math3.complex.Complex complex25 = complex20.subtract(complex24);
        double double26 = complex24.getArgument();
        org.apache.commons.math3.complex.Complex complex27 = complex24.sin();
        org.apache.commons.math3.complex.Complex complex28 = complex27.sqrt();
        org.apache.commons.math3.complex.Complex complex30 = complex28.pow(11013.232920103323d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "(-1.0, 0.0)" + "'", str11.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals((double) double26, Double.NaN, 0);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex30);
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test332");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = complex1.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex5 = complex1.log();
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) 10, (-2.0d));
        org.apache.commons.math3.complex.Complex complex9 = complex5.subtract(complex8);
        org.apache.commons.math3.complex.Complex complex10 = complex5.sqrt1z();
        org.apache.commons.math3.complex.Complex complex11 = complex5.sqrt();
        org.apache.commons.math3.complex.Complex complex13 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math3.complex.Complex complex15 = complex13.sqrt1z();
        org.apache.commons.math3.complex.Complex complex16 = complex15.reciprocal();
        org.apache.commons.math3.complex.Complex complex17 = complex11.multiply(complex16);
        org.apache.commons.math3.complex.Complex complex18 = complex16.acos();
        org.apache.commons.math3.complex.Complex complex19 = complex16.cos();
        org.apache.commons.math3.complex.Complex complex21 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double22 = complex21.getReal();
        double double23 = complex21.getReal();
        org.apache.commons.math3.complex.Complex complex24 = complex21.tan();
        org.apache.commons.math3.complex.Complex complex25 = complex21.exp();
        org.apache.commons.math3.complex.Complex complex27 = complex21.multiply((double) 10);
        org.apache.commons.math3.complex.Complex complex29 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math3.complex.Complex complex31 = complex29.tanh();
        boolean boolean33 = complex31.equals((java.lang.Object) true);
        double double34 = complex31.getImaginary();
        org.apache.commons.math3.complex.Complex complex35 = complex31.sinh();
        org.apache.commons.math3.complex.Complex complex37 = complex31.multiply(10);
        org.apache.commons.math3.complex.Complex complex38 = complex37.sqrt1z();
        boolean boolean40 = org.apache.commons.math3.complex.Complex.equals(complex21, complex37, 0.0d);
        boolean boolean42 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex16, complex37, (double) (byte) -1);
        java.util.List<org.apache.commons.math3.complex.Complex> complexList44 = complex37.nthRoot((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-1.0d) + "'", double23 == (-1.0d));
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(complexList44);
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test333");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double9 = complex8.getReal();
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex8, complex11);
        org.apache.commons.math3.complex.Complex complex15 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean17 = org.apache.commons.math3.complex.Complex.equals(complex8, complex15, 10);
        org.apache.commons.math3.complex.Complex complex19 = complex15.pow((double) (byte) 1);
        boolean boolean21 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex3, complex15, (double) (-1));
        org.apache.commons.math3.complex.Complex complex22 = complex15.negate();
        org.apache.commons.math3.complex.Complex complex24 = complex22.pow(1.557407724654902d);
        org.apache.commons.math3.complex.Complex complex26 = complex22.add(142.13022197970423d);
        java.lang.String str27 = complex26.toString();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "(143.13022197970423, -0.0)" + "'", str27.equals("(143.13022197970423, -0.0)"));
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test334");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        double double11 = complex3.abs();
        org.apache.commons.math3.complex.Complex complex12 = complex3.cos();
        org.apache.commons.math3.complex.Complex complex13 = complex3.atan();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test335");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex12 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double15 = complex14.getReal();
        org.apache.commons.math3.complex.Complex complex17 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double18 = complex17.getReal();
        boolean boolean19 = org.apache.commons.math3.complex.Complex.equals(complex14, complex17);
        boolean boolean21 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex12, complex14, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex22 = complex12.log();
        org.apache.commons.math3.complex.Complex complex24 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double25 = complex24.getReal();
        org.apache.commons.math3.complex.Complex complex27 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double28 = complex27.getReal();
        boolean boolean29 = org.apache.commons.math3.complex.Complex.equals(complex24, complex27);
        org.apache.commons.math3.complex.Complex complex31 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean33 = org.apache.commons.math3.complex.Complex.equals(complex24, complex31, 10);
        org.apache.commons.math3.complex.Complex complex35 = complex31.pow((double) (byte) 1);
        boolean boolean36 = org.apache.commons.math3.complex.Complex.equals(complex12, complex35);
        boolean boolean37 = complex3.equals((java.lang.Object) complex12);
        org.apache.commons.math3.complex.Complex complex39 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double40 = complex39.getReal();
        org.apache.commons.math3.complex.Complex complex42 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math3.complex.Complex complex44 = complex42.tanh();
        boolean boolean46 = complex44.equals((java.lang.Object) true);
        double double47 = complex44.getImaginary();
        org.apache.commons.math3.complex.Complex complex48 = complex44.sinh();
        org.apache.commons.math3.complex.Complex complex50 = complex44.multiply(0.0d);
        boolean boolean51 = org.apache.commons.math3.complex.Complex.equals(complex39, complex44);
        org.apache.commons.math3.complex.Complex complex53 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math3.complex.Complex complex55 = complex53.tanh();
        boolean boolean57 = complex55.equals((java.lang.Object) true);
        double double58 = complex55.getImaginary();
        org.apache.commons.math3.complex.Complex complex60 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double61 = complex60.getReal();
        org.apache.commons.math3.complex.Complex complex63 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double64 = complex63.getReal();
        boolean boolean65 = org.apache.commons.math3.complex.Complex.equals(complex60, complex63);
        org.apache.commons.math3.complex.Complex complex67 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean69 = org.apache.commons.math3.complex.Complex.equals(complex60, complex67, 10);
        org.apache.commons.math3.complex.Complex complex71 = complex67.pow((double) (byte) 1);
        boolean boolean73 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex55, complex67, (double) (-1));
        org.apache.commons.math3.complex.Complex complex74 = complex44.subtract(complex67);
        org.apache.commons.math3.complex.Complex complex75 = complex3.multiply(complex67);
        org.apache.commons.math3.complex.Complex complex77 = complex75.multiply((double) (byte) 0);
        org.apache.commons.math3.complex.Complex complex78 = complex75.negate();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.0d) + "'", double18 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-1.0d) + "'", double28 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-1.0d) + "'", double40 == (-1.0d));
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-1.0d) + "'", double61 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + (-1.0d) + "'", double64 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test336");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.cos();
        org.apache.commons.math3.complex.Complex complex3 = complex2.exp();
        org.apache.commons.math3.complex.Complex complex4 = complex2.reciprocal();
        org.apache.commons.math3.complex.Complex complex6 = complex4.add((double) (-1));
        org.apache.commons.math3.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math3.complex.Complex complex8 = complex7.sin();
        org.apache.commons.math3.complex.Complex complex10 = complex7.add((double) 10L);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex10);
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test337");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math3.complex.Complex complex6 = complex4.tanh();
        boolean boolean8 = complex6.equals((java.lang.Object) true);
        double double9 = complex6.getImaginary();
        org.apache.commons.math3.complex.Complex complex10 = complex6.sinh();
        org.apache.commons.math3.complex.Complex complex12 = complex6.multiply(0.0d);
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex1, complex6);
        org.apache.commons.math3.complex.Complex complex15 = complex1.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex16 = complex15.log();
        double double17 = complex15.getArgument();
        org.apache.commons.math3.complex.Complex complex18 = complex15.sin();
        org.apache.commons.math3.complex.Complex complex19 = complex18.cosh();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.9643867237284715E-15d + "'", double17 == 1.9643867237284715E-15d);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test338");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex11 = complex1.log();
        org.apache.commons.math3.complex.Complex complex12 = complex1.atan();
        org.apache.commons.math3.complex.Complex complex14 = complex12.multiply((-0.09966865249116202d));
        org.apache.commons.math3.complex.Complex complex15 = complex14.atan();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test339");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(1.2645189576252271d);
        org.junit.Assert.assertNotNull(complex1);
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test340");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex11 = complex1.log();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, 10);
        org.apache.commons.math3.complex.Complex complex24 = complex20.pow((double) (byte) 1);
        boolean boolean25 = org.apache.commons.math3.complex.Complex.equals(complex1, complex24);
        org.apache.commons.math3.complex.Complex complex27 = complex24.add((double) 100);
        org.apache.commons.math3.complex.Complex complex29 = complex27.subtract((-1.557407724654902d));
        org.apache.commons.math3.complex.Complex complex32 = org.apache.commons.math3.complex.Complex.valueOf((-2.0d), (double) 'a');
        org.apache.commons.math3.complex.Complex complex34 = complex32.multiply((int) (byte) 0);
        org.apache.commons.math3.complex.Complex complex35 = complex32.conjugate();
        org.apache.commons.math3.complex.Complex complex36 = complex29.add(complex32);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test341");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        double double11 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex12 = complex3.exp();
        org.apache.commons.math3.complex.ComplexField complexField13 = complex12.getField();
        org.apache.commons.math3.complex.Complex complex14 = complex12.log();
        org.apache.commons.math3.complex.Complex complex15 = complex12.asin();
        org.apache.commons.math3.complex.Complex complex16 = complex15.acos();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-1.0d) + "'", double11 == (-1.0d));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complexField13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test342");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex9 = complex3.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        boolean boolean20 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex11, complex13, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex21 = complex11.log();
        org.apache.commons.math3.complex.Complex complex23 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double24 = complex23.getReal();
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double27 = complex26.getReal();
        boolean boolean28 = org.apache.commons.math3.complex.Complex.equals(complex23, complex26);
        org.apache.commons.math3.complex.Complex complex30 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean32 = org.apache.commons.math3.complex.Complex.equals(complex23, complex30, 10);
        org.apache.commons.math3.complex.Complex complex34 = complex30.pow((double) (byte) 1);
        boolean boolean35 = org.apache.commons.math3.complex.Complex.equals(complex11, complex34);
        org.apache.commons.math3.complex.Complex complex36 = complex11.reciprocal();
        boolean boolean38 = org.apache.commons.math3.complex.Complex.equals(complex9, complex11, (double) (byte) 1);
        org.apache.commons.math3.complex.Complex complex39 = complex11.acos();
        org.apache.commons.math3.complex.Complex complex41 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex43 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double44 = complex43.getReal();
        org.apache.commons.math3.complex.Complex complex46 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double47 = complex46.getReal();
        boolean boolean48 = org.apache.commons.math3.complex.Complex.equals(complex43, complex46);
        boolean boolean50 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex41, complex43, (double) 0.0f);
        double double51 = complex43.getReal();
        org.apache.commons.math3.complex.Complex complex52 = complex43.exp();
        org.apache.commons.math3.complex.Complex complex53 = complex43.sqrt();
        double double54 = complex43.getReal();
        org.apache.commons.math3.complex.Complex complex55 = complex39.add(complex43);
        org.apache.commons.math3.complex.Complex complex56 = complex43.reciprocal();
        org.apache.commons.math3.complex.Complex complex57 = complex56.tanh();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1.0d) + "'", double24 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1.0d) + "'", double27 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1.0d) + "'", double44 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-1.0d) + "'", double47 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-1.0d) + "'", double51 == (-1.0d));
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1.0d) + "'", double54 == (-1.0d));
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test343");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equals(complex1, complex8, 10);
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (short) 100, (double) (short) -1);
        boolean boolean14 = complex1.equals((java.lang.Object) complex13);
        org.apache.commons.math3.complex.Complex complex15 = complex1.log();
        org.apache.commons.math3.complex.Complex complex16 = complex1.sqrt1z();
        org.apache.commons.math3.complex.Complex complex17 = complex1.sin();
        org.apache.commons.math3.complex.Complex complex19 = complex1.multiply((int) '#');
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex19);
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test344");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        double double11 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex12 = complex3.exp();
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        org.apache.commons.math3.complex.Complex complex19 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double20 = complex19.getReal();
        boolean boolean21 = org.apache.commons.math3.complex.Complex.equals(complex16, complex19);
        boolean boolean23 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex14, complex16, (double) 0.0f);
        java.lang.String str24 = complex14.toString();
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double27 = complex26.getReal();
        org.apache.commons.math3.complex.Complex complex29 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double30 = complex29.getReal();
        boolean boolean31 = org.apache.commons.math3.complex.Complex.equals(complex26, complex29);
        org.apache.commons.math3.complex.Complex complex33 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean35 = org.apache.commons.math3.complex.Complex.equals(complex26, complex33, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex36 = complex14.add(complex33);
        org.apache.commons.math3.complex.Complex complex37 = org.apache.commons.math3.complex.Complex.NaN;
        org.apache.commons.math3.complex.Complex complex38 = complex33.subtract(complex37);
        org.apache.commons.math3.complex.Complex complex40 = complex33.subtract((double) 100.0f);
        org.apache.commons.math3.complex.Complex complex41 = complex12.subtract(complex33);
        org.apache.commons.math3.complex.Complex complex43 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex45 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double46 = complex45.getReal();
        org.apache.commons.math3.complex.Complex complex48 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double49 = complex48.getReal();
        boolean boolean50 = org.apache.commons.math3.complex.Complex.equals(complex45, complex48);
        boolean boolean52 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex43, complex45, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex53 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex55 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double56 = complex55.getReal();
        org.apache.commons.math3.complex.Complex complex58 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex59 = complex58.sqrt();
        org.apache.commons.math3.complex.Complex complex60 = complex58.tanh();
        boolean boolean62 = complex60.equals((java.lang.Object) true);
        double double63 = complex60.getImaginary();
        org.apache.commons.math3.complex.Complex complex64 = complex60.sinh();
        org.apache.commons.math3.complex.Complex complex66 = complex60.multiply(0.0d);
        boolean boolean67 = org.apache.commons.math3.complex.Complex.equals(complex55, complex60);
        org.apache.commons.math3.complex.Complex complex69 = complex55.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex70 = complex53.subtract(complex69);
        org.apache.commons.math3.complex.Complex complex72 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double73 = complex72.getReal();
        org.apache.commons.math3.complex.Complex complex75 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double76 = complex75.getReal();
        boolean boolean77 = org.apache.commons.math3.complex.Complex.equals(complex72, complex75);
        org.apache.commons.math3.complex.Complex complex79 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex80 = complex79.sqrt();
        org.apache.commons.math3.complex.Complex complex81 = complex79.tanh();
        boolean boolean83 = complex81.equals((java.lang.Object) true);
        double double84 = complex81.getImaginary();
        org.apache.commons.math3.complex.Complex complex85 = complex81.sinh();
        org.apache.commons.math3.complex.Complex complex86 = complex81.cosh();
        double double87 = complex81.getImaginary();
        boolean boolean88 = complex75.equals((java.lang.Object) complex81);
        org.apache.commons.math3.complex.Complex complex89 = complex70.add(complex75);
        org.apache.commons.math3.complex.Complex complex90 = complex45.divide(complex70);
        org.apache.commons.math3.complex.Complex complex91 = complex41.pow(complex70);
        java.lang.String str92 = complex70.toString();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-1.0d) + "'", double11 == (-1.0d));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1.0d) + "'", double20 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "(-1.0, 0.0)" + "'", str24.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1.0d) + "'", double27 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1.0d) + "'", double30 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1.0d) + "'", double46 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-1.0d) + "'", double49 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + (-1.0d) + "'", double56 == (-1.0d));
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + (-1.0d) + "'", double73 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + (-1.0d) + "'", double76 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertTrue("'" + str92 + "' != '" + "(0.0, -1.9643867237284715E-15)" + "'", str92.equals("(0.0, -1.9643867237284715E-15)"));
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test345");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex8 = complex3.sqrt1z();
        org.apache.commons.math3.complex.Complex complex9 = complex8.atan();
        org.apache.commons.math3.complex.Complex complex10 = complex8.atan();
        org.apache.commons.math3.complex.Complex complex11 = complex8.sinh();
        org.apache.commons.math3.complex.Complex complex12 = complex8.sin();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test346");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex11 = complex3.tan();
        org.apache.commons.math3.complex.Complex complex13 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math3.complex.Complex complex15 = complex13.tanh();
        boolean boolean17 = complex15.equals((java.lang.Object) true);
        double double18 = complex15.getImaginary();
        org.apache.commons.math3.complex.Complex complex19 = complex15.sinh();
        org.apache.commons.math3.complex.Complex complex20 = complex15.cosh();
        org.apache.commons.math3.complex.ComplexField complexField21 = complex20.getField();
        double double22 = complex20.getImaginary();
        boolean boolean24 = complex20.equals((java.lang.Object) "");
        org.apache.commons.math3.complex.Complex complex26 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math3.complex.Complex complex28 = complex26.tanh();
        boolean boolean30 = complex28.equals((java.lang.Object) true);
        double double31 = complex28.getImaginary();
        org.apache.commons.math3.complex.Complex complex33 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math3.complex.Complex complex35 = complex33.tanh();
        boolean boolean37 = complex35.equals((java.lang.Object) true);
        double double38 = complex35.getImaginary();
        org.apache.commons.math3.complex.Complex complex39 = complex35.sinh();
        org.apache.commons.math3.complex.Complex complex40 = complex35.cosh();
        double double41 = complex35.getImaginary();
        org.apache.commons.math3.complex.Complex complex42 = complex28.pow(complex35);
        org.apache.commons.math3.complex.Complex complex43 = complex20.pow(complex35);
        boolean boolean45 = org.apache.commons.math3.complex.Complex.equals(complex11, complex35, 0);
        org.apache.commons.math3.complex.Complex complex47 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double48 = complex47.getReal();
        org.apache.commons.math3.complex.Complex complex50 = complex47.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex51 = complex47.log();
        org.apache.commons.math3.complex.Complex complex53 = complex47.divide((double) 100L);
        org.apache.commons.math3.complex.Complex complex54 = complex47.atan();
        org.apache.commons.math3.complex.Complex complex55 = complex35.add(complex47);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complexField21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-1.0d) + "'", double48 == (-1.0d));
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test347");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf((-10.0d), 0.0d);
        org.apache.commons.math3.complex.Complex complex3 = complex2.cos();
        org.apache.commons.math3.complex.Complex complex4 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex5 = complex4.asin();
        double double6 = complex5.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex5.atan();
        boolean boolean9 = org.apache.commons.math3.complex.Complex.equals(complex3, complex7, (int) (byte) 1);
        org.apache.commons.math3.complex.Complex complex10 = complex3.acos();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-0.0d) + "'", double6 == (-0.0d));
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(complex10);
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test348");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equals(complex1, complex8, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex11 = complex8.sin();
        org.apache.commons.math3.complex.Complex complex12 = complex11.log();
        org.apache.commons.math3.complex.Complex complex13 = complex11.reciprocal();
        org.apache.commons.math3.complex.Complex complex14 = complex13.cos();
        org.apache.commons.math3.complex.Complex complex15 = complex14.conjugate();
        org.apache.commons.math3.complex.Complex complex17 = complex14.add(1.8414709848078965d);
        org.apache.commons.math3.complex.Complex complex18 = complex14.cos();
        org.apache.commons.math3.complex.Complex complex20 = complex14.add(4.277655727379682d);
        org.apache.commons.math3.complex.Complex complex22 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math3.complex.Complex complex24 = complex22.tanh();
        org.apache.commons.math3.complex.Complex complex25 = complex22.asin();
        double double26 = complex22.abs();
        org.apache.commons.math3.complex.Complex complex28 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math3.complex.Complex complex30 = complex28.tanh();
        org.apache.commons.math3.complex.Complex complex31 = complex30.sin();
        org.apache.commons.math3.complex.Complex complex33 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex34 = complex33.sqrt();
        boolean boolean36 = org.apache.commons.math3.complex.Complex.equals(complex30, complex33, (int) (byte) -1);
        org.apache.commons.math3.complex.ComplexField complexField37 = complex33.getField();
        org.apache.commons.math3.complex.Complex complex38 = complex22.divide(complex33);
        java.lang.String str39 = complex33.toString();
        org.apache.commons.math3.complex.Complex complex40 = complex20.pow(complex33);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(complexField37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "(0.0, 0.0)" + "'", str39.equals("(0.0, 0.0)"));
        org.junit.Assert.assertNotNull(complex40);
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test349");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        java.lang.String str11 = complex1.toString();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex23 = complex1.add(complex20);
        java.lang.String str24 = complex20.toString();
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex27 = complex20.divide(complex26);
        org.apache.commons.math3.complex.Complex complex28 = complex20.tanh();
        org.apache.commons.math3.complex.Complex complex29 = complex20.tan();
        org.apache.commons.math3.complex.Complex complex31 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex32 = complex31.cos();
        boolean boolean34 = org.apache.commons.math3.complex.Complex.equals(complex20, complex31, (-1.557407724654902d));
        org.apache.commons.math3.complex.Complex complex35 = complex31.tanh();
        org.apache.commons.math3.complex.Complex complex36 = complex31.tan();
        org.apache.commons.math3.complex.Complex complex38 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double39 = complex38.getReal();
        org.apache.commons.math3.complex.Complex complex41 = complex38.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex42 = complex38.log();
        org.apache.commons.math3.complex.Complex complex45 = new org.apache.commons.math3.complex.Complex((double) (byte) 10, (-2.0d));
        org.apache.commons.math3.complex.Complex complex46 = complex42.subtract(complex45);
        org.apache.commons.math3.complex.Complex complex48 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex49 = complex48.cos();
        org.apache.commons.math3.complex.Complex complex50 = complex49.exp();
        org.apache.commons.math3.complex.Complex complex51 = complex49.reciprocal();
        boolean boolean52 = org.apache.commons.math3.complex.Complex.equals(complex42, complex49);
        boolean boolean53 = org.apache.commons.math3.complex.Complex.equals(complex36, complex49);
        org.apache.commons.math3.complex.Complex complex55 = complex36.subtract((double) 10.0f);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "(-1.0, 0.0)" + "'", str11.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "(-1.0, 0.0)" + "'", str24.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-1.0d) + "'", double39 == (-1.0d));
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(complex55);
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test350");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf((double) 1.0f);
        org.apache.commons.math3.complex.Complex complex2 = complex1.conjugate();
        org.apache.commons.math3.complex.Complex complex3 = complex2.acos();
        org.apache.commons.math3.complex.Complex complex4 = complex2.reciprocal();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test351");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) ' ');
        org.apache.commons.math3.complex.Complex complex5 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double6 = complex5.getReal();
        org.apache.commons.math3.complex.Complex complex8 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex9 = complex8.sqrt();
        org.apache.commons.math3.complex.Complex complex10 = complex8.tanh();
        boolean boolean12 = complex10.equals((java.lang.Object) true);
        double double13 = complex10.getImaginary();
        org.apache.commons.math3.complex.Complex complex14 = complex10.sinh();
        org.apache.commons.math3.complex.Complex complex16 = complex10.multiply(0.0d);
        boolean boolean17 = org.apache.commons.math3.complex.Complex.equals(complex5, complex10);
        org.apache.commons.math3.complex.Complex complex18 = complex3.divide(complex10);
        org.apache.commons.math3.complex.Complex complex19 = complex1.pow(complex3);
        org.apache.commons.math3.complex.Complex complex21 = org.apache.commons.math3.complex.Complex.valueOf(0.03125d);
        org.apache.commons.math3.complex.Complex complex22 = complex1.subtract(complex21);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.0d) + "'", double6 == (-1.0d));
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test352");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(Double.POSITIVE_INFINITY);
        org.apache.commons.math3.complex.Complex complex2 = complex1.acos();
        org.apache.commons.math3.complex.Complex complex4 = complex2.multiply((int) (short) 10);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex4);
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test353");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math3.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math3.complex.Complex complex6 = complex4.subtract((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex7 = complex4.log();
        org.apache.commons.math3.complex.Complex complex8 = complex7.sqrt1z();
        org.apache.commons.math3.complex.Complex complex9 = complex8.conjugate();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test354");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex8 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex9 = complex8.sqrt();
        org.apache.commons.math3.complex.Complex complex10 = complex8.tanh();
        boolean boolean12 = complex10.equals((java.lang.Object) true);
        double double13 = complex10.getImaginary();
        org.apache.commons.math3.complex.Complex complex14 = complex10.sinh();
        org.apache.commons.math3.complex.Complex complex15 = complex10.cosh();
        double double16 = complex10.getImaginary();
        org.apache.commons.math3.complex.Complex complex17 = complex3.pow(complex10);
        boolean boolean18 = complex17.isNaN();
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double21 = complex20.getReal();
        double double22 = complex20.getReal();
        org.apache.commons.math3.complex.Complex complex23 = complex20.tan();
        org.apache.commons.math3.complex.Complex complex24 = complex20.exp();
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double27 = complex26.getReal();
        org.apache.commons.math3.complex.Complex complex29 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math3.complex.Complex complex31 = complex29.tanh();
        boolean boolean33 = complex31.equals((java.lang.Object) true);
        double double34 = complex31.getImaginary();
        org.apache.commons.math3.complex.Complex complex35 = complex31.sinh();
        org.apache.commons.math3.complex.Complex complex37 = complex31.multiply(0.0d);
        boolean boolean38 = org.apache.commons.math3.complex.Complex.equals(complex26, complex31);
        org.apache.commons.math3.complex.Complex complex40 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex41 = complex40.sqrt();
        org.apache.commons.math3.complex.Complex complex42 = complex40.sqrt1z();
        org.apache.commons.math3.complex.Complex complex43 = complex31.subtract(complex40);
        org.apache.commons.math3.complex.Complex complex44 = complex24.divide(complex31);
        boolean boolean46 = org.apache.commons.math3.complex.Complex.equals(complex17, complex44, 0.5403023058681398d);
        org.apache.commons.math3.complex.Complex complex47 = complex17.log();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1.0d) + "'", double21 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1.0d) + "'", double27 == (-1.0d));
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(complex47);
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test355");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (short) 10);
        org.apache.commons.math3.complex.Complex complex3 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex4 = complex3.sqrt();
        org.apache.commons.math3.complex.Complex complex5 = complex3.tanh();
        boolean boolean7 = complex5.equals((java.lang.Object) true);
        double double8 = complex5.getImaginary();
        org.apache.commons.math3.complex.Complex complex9 = complex5.sinh();
        org.apache.commons.math3.complex.Complex complex11 = complex5.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex15 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double16 = complex15.getReal();
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double19 = complex18.getReal();
        boolean boolean20 = org.apache.commons.math3.complex.Complex.equals(complex15, complex18);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex13, complex15, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex23 = complex13.log();
        org.apache.commons.math3.complex.Complex complex25 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double26 = complex25.getReal();
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double29 = complex28.getReal();
        boolean boolean30 = org.apache.commons.math3.complex.Complex.equals(complex25, complex28);
        org.apache.commons.math3.complex.Complex complex32 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean34 = org.apache.commons.math3.complex.Complex.equals(complex25, complex32, 10);
        org.apache.commons.math3.complex.Complex complex36 = complex32.pow((double) (byte) 1);
        boolean boolean37 = org.apache.commons.math3.complex.Complex.equals(complex13, complex36);
        org.apache.commons.math3.complex.Complex complex38 = complex13.reciprocal();
        boolean boolean40 = org.apache.commons.math3.complex.Complex.equals(complex11, complex13, (double) (byte) 1);
        org.apache.commons.math3.complex.Complex complex41 = complex1.divide(complex11);
        org.apache.commons.math3.complex.Complex complex43 = complex1.multiply(0);
        org.apache.commons.math3.complex.Complex complex45 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math3.complex.Complex complex47 = complex45.tanh();
        org.apache.commons.math3.complex.Complex complex48 = complex47.acos();
        org.apache.commons.math3.complex.Complex complex50 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex52 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double53 = complex52.getReal();
        org.apache.commons.math3.complex.Complex complex55 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double56 = complex55.getReal();
        boolean boolean57 = org.apache.commons.math3.complex.Complex.equals(complex52, complex55);
        boolean boolean59 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex50, complex52, (double) 0.0f);
        java.lang.String str60 = complex50.toString();
        org.apache.commons.math3.complex.Complex complex62 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double63 = complex62.getReal();
        org.apache.commons.math3.complex.Complex complex65 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double66 = complex65.getReal();
        boolean boolean67 = org.apache.commons.math3.complex.Complex.equals(complex62, complex65);
        org.apache.commons.math3.complex.Complex complex69 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean71 = org.apache.commons.math3.complex.Complex.equals(complex62, complex69, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex72 = complex50.add(complex69);
        org.apache.commons.math3.complex.Complex complex73 = org.apache.commons.math3.complex.Complex.NaN;
        org.apache.commons.math3.complex.Complex complex74 = complex69.subtract(complex73);
        double double75 = complex73.getArgument();
        boolean boolean77 = org.apache.commons.math3.complex.Complex.equals(complex48, complex73, (int) (short) 100);
        org.apache.commons.math3.complex.Complex complex78 = complex48.atan();
        org.apache.commons.math3.complex.Complex complex79 = complex48.cosh();
        org.apache.commons.math3.complex.Complex complex80 = complex1.add(complex79);
        org.apache.commons.math3.complex.Complex complex83 = org.apache.commons.math3.complex.Complex.valueOf((double) (byte) 100, (double) 0L);
        double double84 = complex83.getImaginary();
        org.apache.commons.math3.complex.Complex complex87 = new org.apache.commons.math3.complex.Complex(100.0d, (double) (short) 100);
        double double88 = complex87.getReal();
        org.apache.commons.math3.complex.Complex complex89 = complex87.cosh();
        double double90 = complex87.getArgument();
        org.apache.commons.math3.complex.Complex complex91 = complex83.divide(complex87);
        org.apache.commons.math3.complex.Complex complex92 = complex87.tanh();
        org.apache.commons.math3.complex.Complex complex93 = complex92.reciprocal();
        org.apache.commons.math3.complex.Complex complex95 = complex92.pow((double) '#');
        boolean boolean97 = org.apache.commons.math3.complex.Complex.equals(complex79, complex92, (double) 1.0f);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1.0d) + "'", double16 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.0d) + "'", double19 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-1.0d) + "'", double26 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1.0d) + "'", double29 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-1.0d) + "'", double53 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + (-1.0d) + "'", double56 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + str60 + "' != '" + "(-1.0, 0.0)" + "'", str60.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + (-1.0d) + "'", double63 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + (-1.0d) + "'", double66 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertEquals((double) double75, Double.NaN, 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 100.0d + "'", double88 == 100.0d);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.7853981633974483d + "'", double90 == 0.7853981633974483d);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test356");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math3.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math3.complex.Complex complex5 = complex3.log();
        org.apache.commons.math3.complex.Complex complex7 = complex3.pow((-1.9643867237284715E-15d));
        boolean boolean8 = complex3.isInfinite();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test357");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf((-2.0d), (double) (short) 100);
        org.apache.commons.math3.complex.Complex complex3 = complex2.sin();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test358");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        boolean boolean3 = complex1.isInfinite();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (short) 100, (double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex7 = complex1.subtract(complex6);
        org.apache.commons.math3.complex.Complex complex9 = complex7.add((-3.141592653589793d));
        org.apache.commons.math3.complex.Complex complex10 = complex7.log();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test359");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex(0.0d, (double) (-1.0f));
        boolean boolean3 = complex2.isNaN();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test360");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math3.complex.Complex complex6 = complex4.tanh();
        boolean boolean8 = complex6.equals((java.lang.Object) true);
        double double9 = complex6.getImaginary();
        org.apache.commons.math3.complex.Complex complex10 = complex6.sinh();
        org.apache.commons.math3.complex.Complex complex12 = complex6.multiply(0.0d);
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex1, complex6);
        org.apache.commons.math3.complex.Complex complex15 = complex1.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex16 = complex15.log();
        org.apache.commons.math3.complex.Complex complex18 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex19 = complex18.cos();
        org.apache.commons.math3.complex.Complex complex20 = complex15.multiply(complex18);
        double double21 = complex20.abs();
        org.apache.commons.math3.complex.Complex complex23 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex25 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double26 = complex25.getReal();
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double29 = complex28.getReal();
        boolean boolean30 = org.apache.commons.math3.complex.Complex.equals(complex25, complex28);
        boolean boolean32 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex23, complex25, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex34 = complex25.multiply(1);
        org.apache.commons.math3.complex.Complex complex35 = complex25.conjugate();
        org.apache.commons.math3.complex.Complex complex36 = complex20.pow(complex35);
        org.apache.commons.math3.complex.Complex complex38 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double39 = complex38.getReal();
        org.apache.commons.math3.complex.Complex complex41 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double42 = complex41.getReal();
        boolean boolean43 = org.apache.commons.math3.complex.Complex.equals(complex38, complex41);
        org.apache.commons.math3.complex.Complex complex45 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math3.complex.Complex complex47 = complex45.tanh();
        boolean boolean49 = complex47.equals((java.lang.Object) true);
        double double50 = complex47.getImaginary();
        org.apache.commons.math3.complex.Complex complex51 = complex47.sinh();
        org.apache.commons.math3.complex.Complex complex52 = complex47.cosh();
        double double53 = complex47.getImaginary();
        boolean boolean54 = complex41.equals((java.lang.Object) complex47);
        org.apache.commons.math3.complex.Complex complex55 = complex47.log();
        org.apache.commons.math3.complex.Complex complex56 = complex55.conjugate();
        org.apache.commons.math3.complex.Complex complex57 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex58 = complex57.asin();
        org.apache.commons.math3.complex.Complex complex59 = complex57.tanh();
        org.apache.commons.math3.complex.Complex complex60 = complex59.sin();
        org.apache.commons.math3.complex.Complex complex62 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double63 = complex62.getReal();
        double double64 = complex62.getReal();
        org.apache.commons.math3.complex.Complex complex65 = complex62.tan();
        org.apache.commons.math3.complex.Complex complex66 = complex62.exp();
        org.apache.commons.math3.complex.Complex complex68 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double69 = complex68.getReal();
        org.apache.commons.math3.complex.Complex complex71 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math3.complex.Complex complex73 = complex71.tanh();
        boolean boolean75 = complex73.equals((java.lang.Object) true);
        double double76 = complex73.getImaginary();
        org.apache.commons.math3.complex.Complex complex77 = complex73.sinh();
        org.apache.commons.math3.complex.Complex complex79 = complex73.multiply(0.0d);
        boolean boolean80 = org.apache.commons.math3.complex.Complex.equals(complex68, complex73);
        org.apache.commons.math3.complex.Complex complex82 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex83 = complex82.sqrt();
        org.apache.commons.math3.complex.Complex complex84 = complex82.sqrt1z();
        org.apache.commons.math3.complex.Complex complex85 = complex73.subtract(complex82);
        org.apache.commons.math3.complex.Complex complex86 = complex66.divide(complex73);
        org.apache.commons.math3.complex.Complex complex87 = complex59.pow(complex66);
        boolean boolean89 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex56, complex59, (double) 0L);
        boolean boolean90 = complex56.isNaN();
        org.apache.commons.math3.complex.Complex complex91 = complex35.subtract(complex56);
        org.apache.commons.math3.complex.Complex complex92 = complex91.asin();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-1.0d) + "'", double26 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1.0d) + "'", double29 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-1.0d) + "'", double39 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + (-1.0d) + "'", double42 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + (-1.0d) + "'", double63 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + (-1.0d) + "'", double64 == (-1.0d));
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + (-1.0d) + "'", double69 == (-1.0d));
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
    }

    @Test
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test361");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        double double11 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex12 = complex3.exp();
        org.apache.commons.math3.complex.ComplexField complexField13 = complex12.getField();
        double double14 = complex12.abs();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-1.0d) + "'", double11 == (-1.0d));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complexField13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.36787944117144233d + "'", double14 == 0.36787944117144233d);
    }

    @Test
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test362");
        org.apache.commons.math3.complex.Complex complex0 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double3 = complex2.getReal();
        org.apache.commons.math3.complex.Complex complex5 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math3.complex.Complex complex7 = complex5.tanh();
        boolean boolean9 = complex7.equals((java.lang.Object) true);
        double double10 = complex7.getImaginary();
        org.apache.commons.math3.complex.Complex complex11 = complex7.sinh();
        org.apache.commons.math3.complex.Complex complex13 = complex7.multiply(0.0d);
        boolean boolean14 = org.apache.commons.math3.complex.Complex.equals(complex2, complex7);
        org.apache.commons.math3.complex.Complex complex16 = complex2.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex17 = complex0.subtract(complex16);
        org.apache.commons.math3.complex.Complex complex19 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double20 = complex19.getReal();
        double double21 = complex19.getReal();
        org.apache.commons.math3.complex.Complex complex22 = complex19.tan();
        org.apache.commons.math3.complex.Complex complex23 = complex16.pow(complex22);
        org.apache.commons.math3.complex.Complex complex24 = complex23.asin();
        org.apache.commons.math3.complex.Complex complex25 = complex23.sin();
        org.apache.commons.math3.complex.Complex complex27 = complex25.divide(0.8414709848078965d);
        org.apache.commons.math3.complex.Complex complex29 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double30 = complex29.getReal();
        double double31 = complex29.getReal();
        org.apache.commons.math3.complex.Complex complex32 = complex29.tan();
        org.apache.commons.math3.complex.Complex complex33 = complex29.exp();
        org.apache.commons.math3.complex.Complex complex35 = complex29.multiply((double) 10);
        org.apache.commons.math3.complex.Complex complex37 = complex29.multiply((int) (short) 100);
        org.apache.commons.math3.complex.Complex complex39 = complex29.add(32.0d);
        boolean boolean40 = complex25.equals((java.lang.Object) 32.0d);
        org.apache.commons.math3.complex.Complex complex42 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex43 = complex42.acos();
        org.apache.commons.math3.complex.Complex complex44 = complex43.cos();
        org.apache.commons.math3.complex.Complex complex45 = complex25.pow(complex44);
        org.apache.commons.math3.complex.Complex complex47 = complex45.multiply(3.141592653589793d);
        boolean boolean48 = complex47.isNaN();
        org.apache.commons.math3.complex.Complex complex50 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex51 = complex50.sqrt();
        org.apache.commons.math3.complex.Complex complex52 = complex50.tanh();
        double double53 = complex52.abs();
        org.apache.commons.math3.complex.Complex complex54 = complex52.cosh();
        org.apache.commons.math3.complex.Complex complex55 = complex54.sinh();
        boolean boolean57 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex47, complex55, (double) (byte) 0);
        org.apache.commons.math3.complex.Complex complex59 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double60 = complex59.getReal();
        org.apache.commons.math3.complex.Complex complex62 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double63 = complex62.getReal();
        boolean boolean64 = org.apache.commons.math3.complex.Complex.equals(complex59, complex62);
        org.apache.commons.math3.complex.Complex complex66 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean68 = org.apache.commons.math3.complex.Complex.equals(complex59, complex66, 10);
        org.apache.commons.math3.complex.Complex complex71 = new org.apache.commons.math3.complex.Complex((double) (short) 100, (double) (short) -1);
        boolean boolean72 = complex59.equals((java.lang.Object) complex71);
        org.apache.commons.math3.complex.Complex complex73 = complex71.exp();
        double double74 = complex71.getArgument();
        boolean boolean76 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex47, complex71, 10.0d);
        org.apache.commons.math3.complex.Complex complex77 = complex47.sqrt1z();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1.0d) + "'", double20 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1.0d) + "'", double21 == (-1.0d));
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1.0d) + "'", double30 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-1.0d) + "'", double31 == (-1.0d));
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + (-1.0d) + "'", double60 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + (-1.0d) + "'", double63 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + (-0.009999666686665238d) + "'", double74 == (-0.009999666686665238d));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(complex77);
    }

    @Test
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test363");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double9 = complex8.getReal();
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex8, complex11);
        org.apache.commons.math3.complex.Complex complex15 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean17 = org.apache.commons.math3.complex.Complex.equals(complex8, complex15, 10);
        org.apache.commons.math3.complex.Complex complex19 = complex15.pow((double) (byte) 1);
        boolean boolean21 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex3, complex15, (double) (-1));
        org.apache.commons.math3.complex.Complex complex23 = complex15.multiply((double) (byte) 0);
        org.apache.commons.math3.complex.Complex complex25 = complex15.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex26 = complex15.cos();
        org.apache.commons.math3.complex.Complex complex27 = complex15.sin();
        org.apache.commons.math3.complex.Complex complex29 = complex27.add(1.0374725181979223d);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex29);
    }

    @Test
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test364");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex9 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double15 = complex14.getReal();
        boolean boolean16 = org.apache.commons.math3.complex.Complex.equals(complex11, complex14);
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex9, complex11, (double) 0.0f);
        java.lang.String str19 = complex9.toString();
        org.apache.commons.math3.complex.Complex complex21 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double22 = complex21.getReal();
        org.apache.commons.math3.complex.Complex complex24 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double25 = complex24.getReal();
        boolean boolean26 = org.apache.commons.math3.complex.Complex.equals(complex21, complex24);
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean30 = org.apache.commons.math3.complex.Complex.equals(complex21, complex28, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex31 = complex9.add(complex28);
        org.apache.commons.math3.complex.Complex complex32 = complex7.multiply(complex31);
        org.apache.commons.math3.complex.Complex complex34 = complex32.divide((double) 1L);
        double double35 = complex32.abs();
        org.apache.commons.math3.complex.Complex complex36 = complex32.sinh();
        org.apache.commons.math3.complex.Complex complex38 = complex32.divide(14142.135623730952d);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "(-1.0, 0.0)" + "'", str19.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex38);
    }

    @Test
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test365");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf(0.0d, (-0.00555535180776387d));
        org.apache.commons.math3.complex.ComplexField complexField3 = complex2.getField();
        org.apache.commons.math3.complex.Complex complex4 = complex2.sqrt1z();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complexField3);
        org.junit.Assert.assertNotNull(complex4);
    }

    @Test
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test366");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex9 = complex3.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex10 = complex3.acos();
        java.lang.Class<?> wildcardClass11 = complex10.getClass();
        org.apache.commons.math3.complex.Complex complex12 = complex10.negate();
        org.apache.commons.math3.complex.Complex complex13 = complex10.cos();
        org.apache.commons.math3.complex.Complex complex15 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double16 = complex15.getReal();
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double19 = complex18.getReal();
        boolean boolean20 = org.apache.commons.math3.complex.Complex.equals(complex15, complex18);
        org.apache.commons.math3.complex.Complex complex22 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean24 = org.apache.commons.math3.complex.Complex.equals(complex15, complex22, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double29 = complex28.getReal();
        org.apache.commons.math3.complex.Complex complex31 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double32 = complex31.getReal();
        boolean boolean33 = org.apache.commons.math3.complex.Complex.equals(complex28, complex31);
        boolean boolean35 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex26, complex28, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex37 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex39 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double40 = complex39.getReal();
        org.apache.commons.math3.complex.Complex complex42 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double43 = complex42.getReal();
        boolean boolean44 = org.apache.commons.math3.complex.Complex.equals(complex39, complex42);
        boolean boolean46 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex37, complex39, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex47 = complex37.log();
        org.apache.commons.math3.complex.Complex complex49 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double50 = complex49.getReal();
        org.apache.commons.math3.complex.Complex complex52 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double53 = complex52.getReal();
        boolean boolean54 = org.apache.commons.math3.complex.Complex.equals(complex49, complex52);
        org.apache.commons.math3.complex.Complex complex56 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean58 = org.apache.commons.math3.complex.Complex.equals(complex49, complex56, 10);
        org.apache.commons.math3.complex.Complex complex60 = complex56.pow((double) (byte) 1);
        boolean boolean61 = org.apache.commons.math3.complex.Complex.equals(complex37, complex60);
        boolean boolean62 = complex28.equals((java.lang.Object) complex37);
        boolean boolean64 = org.apache.commons.math3.complex.Complex.equals(complex15, complex37, (int) (byte) 100);
        org.apache.commons.math3.complex.Complex complex65 = complex10.subtract(complex15);
        org.apache.commons.math3.complex.Complex complex67 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex69 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double70 = complex69.getReal();
        org.apache.commons.math3.complex.Complex complex72 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double73 = complex72.getReal();
        boolean boolean74 = org.apache.commons.math3.complex.Complex.equals(complex69, complex72);
        boolean boolean76 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex67, complex69, (double) 0.0f);
        java.lang.String str77 = complex67.toString();
        org.apache.commons.math3.complex.Complex complex79 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double80 = complex79.getReal();
        org.apache.commons.math3.complex.Complex complex82 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double83 = complex82.getReal();
        boolean boolean84 = org.apache.commons.math3.complex.Complex.equals(complex79, complex82);
        org.apache.commons.math3.complex.Complex complex86 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean88 = org.apache.commons.math3.complex.Complex.equals(complex79, complex86, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex89 = complex67.add(complex86);
        double double90 = complex89.getReal();
        org.apache.commons.math3.complex.Complex complex91 = complex15.divide(complex89);
        org.apache.commons.math3.complex.Complex complex92 = complex15.tanh();
        org.apache.commons.math3.complex.Complex complex94 = complex15.multiply((int) (short) 1);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1.0d) + "'", double16 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.0d) + "'", double19 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1.0d) + "'", double29 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-1.0d) + "'", double32 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-1.0d) + "'", double40 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-1.0d) + "'", double43 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-1.0d) + "'", double50 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-1.0d) + "'", double53 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + (-1.0d) + "'", double70 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + (-1.0d) + "'", double73 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + str77 + "' != '" + "(-1.0, 0.0)" + "'", str77.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + (-1.0d) + "'", double80 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + (-1.0d) + "'", double83 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-2.0d) + "'", double90 == (-2.0d));
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex94);
    }

    @Test
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test367");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex12 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double13 = complex12.getReal();
        org.apache.commons.math3.complex.Complex complex15 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math3.complex.Complex complex17 = complex15.tanh();
        boolean boolean19 = complex17.equals((java.lang.Object) true);
        double double20 = complex17.getImaginary();
        org.apache.commons.math3.complex.Complex complex21 = complex17.sinh();
        org.apache.commons.math3.complex.Complex complex23 = complex17.multiply(0.0d);
        boolean boolean24 = org.apache.commons.math3.complex.Complex.equals(complex12, complex17);
        org.apache.commons.math3.complex.Complex complex26 = complex12.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex28 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math3.complex.Complex complex30 = complex28.tanh();
        boolean boolean32 = complex30.equals((java.lang.Object) true);
        double double33 = complex30.getImaginary();
        org.apache.commons.math3.complex.Complex complex34 = complex26.add(complex30);
        boolean boolean36 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex3, complex34, (double) 10);
        org.apache.commons.math3.complex.Complex complex38 = complex34.pow(0.0d);
        org.apache.commons.math3.complex.Complex complex40 = complex34.add(Double.NaN);
        org.apache.commons.math3.complex.Complex complex42 = complex40.multiply(1.9643867237284715E-15d);
        boolean boolean43 = complex40.isNaN();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1.0d) + "'", double13 == (-1.0d));
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test368");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = complex1.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex5 = complex1.log();
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) 10, (-2.0d));
        org.apache.commons.math3.complex.Complex complex9 = complex5.subtract(complex8);
        org.apache.commons.math3.complex.Complex complex10 = complex5.sqrt1z();
        org.apache.commons.math3.complex.Complex complex11 = complex5.sqrt();
        org.apache.commons.math3.complex.Complex complex14 = org.apache.commons.math3.complex.Complex.valueOf(100.0d, (double) (short) 0);
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        org.apache.commons.math3.complex.Complex complex19 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double20 = complex19.getReal();
        boolean boolean21 = org.apache.commons.math3.complex.Complex.equals(complex16, complex19);
        org.apache.commons.math3.complex.Complex complex23 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double24 = complex23.getReal();
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double27 = complex26.getReal();
        boolean boolean28 = org.apache.commons.math3.complex.Complex.equals(complex23, complex26);
        org.apache.commons.math3.complex.Complex complex29 = complex26.sqrt();
        org.apache.commons.math3.complex.Complex complex31 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double32 = complex31.getReal();
        org.apache.commons.math3.complex.Complex complex34 = complex31.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex35 = complex29.pow(complex34);
        org.apache.commons.math3.complex.Complex complex36 = complex19.multiply(complex35);
        org.apache.commons.math3.complex.Complex complex37 = complex35.sqrt1z();
        org.apache.commons.math3.complex.Complex complex38 = complex14.divide(complex35);
        org.apache.commons.math3.complex.Complex complex39 = complex38.log();
        org.apache.commons.math3.complex.Complex complex40 = complex5.pow(complex38);
        org.apache.commons.math3.complex.Complex complex42 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex44 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double45 = complex44.getReal();
        org.apache.commons.math3.complex.Complex complex47 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double48 = complex47.getReal();
        boolean boolean49 = org.apache.commons.math3.complex.Complex.equals(complex44, complex47);
        boolean boolean51 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex42, complex44, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex53 = complex44.multiply(1);
        double double54 = complex53.getArgument();
        org.apache.commons.math3.complex.Complex complex55 = complex38.multiply(complex53);
        org.apache.commons.math3.complex.Complex complex56 = complex55.sqrt1z();
        org.apache.commons.math3.complex.Complex complex58 = complex55.multiply(10.0d);
        org.apache.commons.math3.complex.Complex complex60 = complex58.subtract((-2.0d));
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1.0d) + "'", double20 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1.0d) + "'", double24 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1.0d) + "'", double27 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-1.0d) + "'", double32 == (-1.0d));
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1.0d) + "'", double45 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-1.0d) + "'", double48 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 3.141592653589793d + "'", double54 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex60);
    }

    @Test
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test369");
        org.apache.commons.math3.complex.Complex complex0 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double3 = complex2.getReal();
        org.apache.commons.math3.complex.Complex complex5 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math3.complex.Complex complex7 = complex5.tanh();
        boolean boolean9 = complex7.equals((java.lang.Object) true);
        double double10 = complex7.getImaginary();
        org.apache.commons.math3.complex.Complex complex11 = complex7.sinh();
        org.apache.commons.math3.complex.Complex complex13 = complex7.multiply(0.0d);
        boolean boolean14 = org.apache.commons.math3.complex.Complex.equals(complex2, complex7);
        org.apache.commons.math3.complex.Complex complex16 = complex2.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex17 = complex0.subtract(complex16);
        org.apache.commons.math3.complex.Complex complex19 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math3.complex.Complex complex21 = complex0.add(complex19);
        org.apache.commons.math3.complex.Complex complex22 = complex19.cosh();
        org.apache.commons.math3.complex.Complex complex23 = complex22.sin();
        org.apache.commons.math3.complex.Complex complex24 = complex23.tan();
        org.apache.commons.math3.complex.Complex complex25 = complex23.tanh();
        org.apache.commons.math3.complex.Complex complex27 = complex23.multiply(1.772453850905516d);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex27);
    }

    @Test
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test370");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = complex1.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex5 = complex1.log();
        org.apache.commons.math3.complex.Complex complex6 = complex5.reciprocal();
        boolean boolean7 = complex5.isNaN();
        org.apache.commons.math3.complex.Complex complex8 = complex5.sqrt();
        org.apache.commons.math3.complex.Complex complex10 = complex5.multiply(0.0d);
        java.lang.Class<?> wildcardClass11 = complex5.getClass();
        org.apache.commons.math3.complex.Complex complex14 = org.apache.commons.math3.complex.Complex.valueOf((double) 1.0f, (double) 1L);
        org.apache.commons.math3.complex.Complex complex15 = complex14.sqrt1z();
        org.apache.commons.math3.complex.Complex complex16 = complex5.multiply(complex15);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
    }

    @Test
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test371");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = complex1.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        org.apache.commons.math3.complex.Complex complex8 = complex4.divide(complex6);
        org.apache.commons.math3.complex.Complex complex10 = complex8.multiply(10.0d);
        boolean boolean11 = complex8.isInfinite();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test372");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf((-1.5227865933864404d));
        boolean boolean2 = complex1.isNaN();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test373");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex(1.0374725181979223d);
    }

    @Test
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test374");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = complex1.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex5 = complex1.log();
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) 10, (-2.0d));
        org.apache.commons.math3.complex.Complex complex9 = complex5.subtract(complex8);
        org.apache.commons.math3.complex.Complex complex10 = complex5.sqrt1z();
        org.apache.commons.math3.complex.Complex complex11 = complex5.sqrt();
        org.apache.commons.math3.complex.Complex complex12 = complex5.sinh();
        org.apache.commons.math3.complex.Complex complex13 = complex12.tanh();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
    }

    @Test
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test375");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf((double) (-1.0f), (double) 1.0f);
        org.apache.commons.math3.complex.Complex complex3 = complex2.log();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
    }

    @Test
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test376");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex(0.0d, 3.296908309475615d);
        org.apache.commons.math3.complex.Complex complex3 = complex2.atan();
        org.apache.commons.math3.complex.Complex complex5 = complex3.subtract(32.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex5);
    }

    @Test
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test377");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.cos();
        org.apache.commons.math3.complex.Complex complex4 = complex2.subtract(1.0d);
        org.apache.commons.math3.complex.Complex complex6 = complex2.subtract((double) 0);
        org.apache.commons.math3.complex.Complex complex7 = complex2.cosh();
        org.apache.commons.math3.complex.Complex complex8 = complex2.tanh();
        java.lang.String str9 = complex8.toString();
        org.apache.commons.math3.complex.Complex complex11 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex12 = complex11.conjugate();
        boolean boolean13 = complex12.isInfinite();
        org.apache.commons.math3.complex.Complex complex15 = complex12.add((double) 1L);
        org.apache.commons.math3.complex.Complex complex16 = complex8.add(complex15);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(0.7615941559557649, -0.0)" + "'", str9.equals("(0.7615941559557649, -0.0)"));
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
    }

    @Test
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test378");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        org.apache.commons.math3.complex.Complex complex7 = new org.apache.commons.math3.complex.Complex((double) (short) 0);
        org.apache.commons.math3.complex.Complex complex8 = complex3.divide(complex7);
        org.apache.commons.math3.complex.Complex complex10 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex11 = complex10.cos();
        double double12 = complex11.getImaginary();
        org.apache.commons.math3.complex.Complex complex13 = complex11.sin();
        org.apache.commons.math3.complex.Complex complex14 = complex3.add(complex11);
        org.apache.commons.math3.complex.Complex complex15 = complex11.exp();
        org.apache.commons.math3.complex.Complex complex17 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double18 = complex17.getReal();
        boolean boolean19 = complex17.isInfinite();
        org.apache.commons.math3.complex.Complex complex22 = new org.apache.commons.math3.complex.Complex((double) (short) 100, (double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex23 = complex17.subtract(complex22);
        org.apache.commons.math3.complex.Complex complex24 = complex17.tan();
        org.apache.commons.math3.complex.Complex complex25 = complex15.subtract(complex17);
        org.apache.commons.math3.complex.Complex complex26 = complex15.negate();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-0.0d) + "'", double12 == (-0.0d));
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.0d) + "'", double18 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
    }

    @Test
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test379");
        org.apache.commons.math3.complex.Complex complex0 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double3 = complex2.getReal();
        org.apache.commons.math3.complex.Complex complex5 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math3.complex.Complex complex7 = complex5.tanh();
        boolean boolean9 = complex7.equals((java.lang.Object) true);
        double double10 = complex7.getImaginary();
        org.apache.commons.math3.complex.Complex complex11 = complex7.sinh();
        org.apache.commons.math3.complex.Complex complex13 = complex7.multiply(0.0d);
        boolean boolean14 = org.apache.commons.math3.complex.Complex.equals(complex2, complex7);
        org.apache.commons.math3.complex.Complex complex16 = complex2.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex17 = complex0.subtract(complex16);
        org.apache.commons.math3.complex.Complex complex19 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double20 = complex19.getReal();
        double double21 = complex19.getReal();
        org.apache.commons.math3.complex.Complex complex22 = complex19.tan();
        org.apache.commons.math3.complex.Complex complex23 = complex16.pow(complex22);
        org.apache.commons.math3.complex.Complex complex24 = complex23.sinh();
        org.apache.commons.math3.complex.Complex complex25 = complex24.acos();
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) 100L, (double) (-1L));
        org.apache.commons.math3.complex.Complex complex30 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double31 = complex30.getReal();
        org.apache.commons.math3.complex.Complex complex33 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double34 = complex33.getReal();
        boolean boolean35 = org.apache.commons.math3.complex.Complex.equals(complex30, complex33);
        org.apache.commons.math3.complex.Complex complex37 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean39 = org.apache.commons.math3.complex.Complex.equals(complex30, complex37, 10);
        org.apache.commons.math3.complex.Complex complex41 = complex30.multiply(10);
        boolean boolean43 = org.apache.commons.math3.complex.Complex.equals(complex28, complex41, 10.0d);
        org.apache.commons.math3.complex.Complex complex45 = complex28.multiply((double) 1.0f);
        org.apache.commons.math3.complex.Complex complex46 = complex28.cosh();
        boolean boolean48 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex24, complex28, 0.8414709848078965d);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1.0d) + "'", double20 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1.0d) + "'", double21 == (-1.0d));
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-1.0d) + "'", double31 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test380");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf(142.13022197970423d, 0.8778963166742729d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test381");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf((double) 1.0f);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex5 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double6 = complex5.getReal();
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double9 = complex8.getReal();
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equals(complex5, complex8);
        boolean boolean12 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex3, complex5, (double) 0.0f);
        java.lang.String str13 = complex3.toString();
        org.apache.commons.math3.complex.Complex complex15 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double16 = complex15.getReal();
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double19 = complex18.getReal();
        boolean boolean20 = org.apache.commons.math3.complex.Complex.equals(complex15, complex18);
        org.apache.commons.math3.complex.Complex complex22 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean24 = org.apache.commons.math3.complex.Complex.equals(complex15, complex22, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex25 = complex3.add(complex22);
        java.lang.String str26 = complex22.toString();
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex29 = complex22.divide(complex28);
        org.apache.commons.math3.complex.Complex complex30 = complex29.exp();
        org.apache.commons.math3.complex.Complex complex31 = complex1.multiply(complex30);
        org.apache.commons.math3.complex.Complex complex32 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex34 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double35 = complex34.getReal();
        org.apache.commons.math3.complex.Complex complex37 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex38 = complex37.sqrt();
        org.apache.commons.math3.complex.Complex complex39 = complex37.tanh();
        boolean boolean41 = complex39.equals((java.lang.Object) true);
        double double42 = complex39.getImaginary();
        org.apache.commons.math3.complex.Complex complex43 = complex39.sinh();
        org.apache.commons.math3.complex.Complex complex45 = complex39.multiply(0.0d);
        boolean boolean46 = org.apache.commons.math3.complex.Complex.equals(complex34, complex39);
        org.apache.commons.math3.complex.Complex complex48 = complex34.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex49 = complex32.subtract(complex48);
        org.apache.commons.math3.complex.Complex complex50 = complex49.exp();
        org.apache.commons.math3.complex.Complex complex51 = complex30.subtract(complex50);
        org.apache.commons.math3.complex.Complex complex52 = complex51.negate();
        org.apache.commons.math3.complex.Complex complex53 = complex51.negate();
        java.lang.Class<?> wildcardClass54 = complex51.getClass();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.0d) + "'", double6 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "(-1.0, 0.0)" + "'", str13.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1.0d) + "'", double16 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.0d) + "'", double19 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "(-1.0, 0.0)" + "'", str26.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-1.0d) + "'", double35 == (-1.0d));
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test382");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex8 = complex3.cosh();
        double double9 = complex3.getImaginary();
        double double10 = complex3.abs();
        org.apache.commons.math3.complex.Complex complex12 = complex3.multiply((-1));
        org.apache.commons.math3.complex.Complex complex13 = complex12.sinh();
        double double14 = complex13.abs();
        org.apache.commons.math3.complex.Complex complex16 = complex13.divide(1.2645189576252271d);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(complex16);
    }

    @Test
    public void test383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test383");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex((double) (short) 100, (double) (short) -1);
        org.apache.commons.math3.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math3.complex.Complex complex5 = complex3.multiply((int) (short) -1);
        java.lang.Class<?> wildcardClass6 = complex5.getClass();
        org.apache.commons.math3.complex.Complex complex7 = complex5.sqrt();
        org.apache.commons.math3.complex.Complex complex8 = complex7.cos();
        org.apache.commons.math3.complex.Complex complex9 = complex8.asin();
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) 1.0f);
        org.apache.commons.math3.complex.Complex complex13 = complex11.divide(0.0d);
        org.apache.commons.math3.complex.Complex complex14 = complex13.negate();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        org.apache.commons.math3.complex.Complex complex19 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math3.complex.Complex complex21 = complex19.tanh();
        boolean boolean23 = complex21.equals((java.lang.Object) true);
        double double24 = complex21.getImaginary();
        org.apache.commons.math3.complex.Complex complex25 = complex21.sinh();
        org.apache.commons.math3.complex.Complex complex27 = complex21.multiply(0.0d);
        boolean boolean28 = org.apache.commons.math3.complex.Complex.equals(complex16, complex21);
        org.apache.commons.math3.complex.Complex complex30 = complex16.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex31 = complex30.log();
        org.apache.commons.math3.complex.Complex complex33 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex34 = complex33.cos();
        org.apache.commons.math3.complex.Complex complex35 = complex30.multiply(complex33);
        double double36 = complex35.abs();
        org.apache.commons.math3.complex.Complex complex38 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex40 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double41 = complex40.getReal();
        org.apache.commons.math3.complex.Complex complex43 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double44 = complex43.getReal();
        boolean boolean45 = org.apache.commons.math3.complex.Complex.equals(complex40, complex43);
        boolean boolean47 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex38, complex40, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex49 = complex40.multiply(1);
        org.apache.commons.math3.complex.Complex complex50 = complex40.conjugate();
        org.apache.commons.math3.complex.Complex complex51 = complex35.pow(complex50);
        org.apache.commons.math3.complex.Complex complex52 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex54 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double55 = complex54.getReal();
        org.apache.commons.math3.complex.Complex complex57 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex58 = complex57.sqrt();
        org.apache.commons.math3.complex.Complex complex59 = complex57.tanh();
        boolean boolean61 = complex59.equals((java.lang.Object) true);
        double double62 = complex59.getImaginary();
        org.apache.commons.math3.complex.Complex complex63 = complex59.sinh();
        org.apache.commons.math3.complex.Complex complex65 = complex59.multiply(0.0d);
        boolean boolean66 = org.apache.commons.math3.complex.Complex.equals(complex54, complex59);
        org.apache.commons.math3.complex.Complex complex68 = complex54.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex69 = complex52.subtract(complex68);
        org.apache.commons.math3.complex.Complex complex70 = complex69.exp();
        double double71 = complex70.abs();
        org.apache.commons.math3.complex.Complex complex72 = complex35.add(complex70);
        org.apache.commons.math3.complex.Complex complex73 = complex14.add(complex35);
        org.apache.commons.math3.complex.Complex complex75 = complex73.pow((-1.9643867237284715E-15d));
        org.apache.commons.math3.complex.Complex complex76 = complex75.atan();
        boolean boolean77 = complex9.equals((java.lang.Object) complex76);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-1.0d) + "'", double41 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1.0d) + "'", double44 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-1.0d) + "'", double55 == (-1.0d));
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.0d + "'", double71 == 1.0d);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test384");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf((-0.004999833343332619d));
        org.junit.Assert.assertNotNull(complex1);
    }

    @Test
    public void test385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test385");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        double double3 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = complex1.tan();
        org.apache.commons.math3.complex.Complex complex5 = complex1.exp();
        org.apache.commons.math3.complex.Complex complex7 = complex1.multiply((double) 10);
        org.apache.commons.math3.complex.Complex complex9 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math3.complex.Complex complex11 = complex9.tanh();
        boolean boolean13 = complex11.equals((java.lang.Object) true);
        double double14 = complex11.getImaginary();
        org.apache.commons.math3.complex.Complex complex15 = complex11.sinh();
        org.apache.commons.math3.complex.Complex complex17 = complex11.multiply(10);
        org.apache.commons.math3.complex.Complex complex18 = complex17.sqrt1z();
        boolean boolean20 = org.apache.commons.math3.complex.Complex.equals(complex1, complex17, 0.0d);
        org.apache.commons.math3.complex.Complex complex22 = complex1.add((double) 100.0f);
        org.apache.commons.math3.complex.Complex complex24 = complex1.subtract(10.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex24);
    }

    @Test
    public void test386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test386");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        org.apache.commons.math3.complex.Complex complex7 = new org.apache.commons.math3.complex.Complex((double) (short) 0);
        org.apache.commons.math3.complex.Complex complex8 = complex3.divide(complex7);
        org.apache.commons.math3.complex.Complex complex10 = complex7.add((double) 100.0f);
        org.apache.commons.math3.complex.Complex complex12 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math3.complex.Complex complex14 = complex12.tanh();
        org.apache.commons.math3.complex.Complex complex15 = complex14.sin();
        org.apache.commons.math3.complex.ComplexField complexField16 = complex14.getField();
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double19 = complex18.getReal();
        org.apache.commons.math3.complex.Complex complex21 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double22 = complex21.getReal();
        boolean boolean23 = org.apache.commons.math3.complex.Complex.equals(complex18, complex21);
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex(100.0d, (double) (short) 100);
        org.apache.commons.math3.complex.Complex complex28 = complex26.multiply((double) 100);
        org.apache.commons.math3.complex.Complex complex29 = complex28.tanh();
        org.apache.commons.math3.complex.Complex complex30 = complex18.add(complex28);
        org.apache.commons.math3.complex.Complex complex31 = complex18.sqrt1z();
        boolean boolean32 = complex14.equals((java.lang.Object) complex31);
        org.apache.commons.math3.complex.Complex complex34 = new org.apache.commons.math3.complex.Complex((-0.0d));
        boolean boolean35 = complex14.equals((java.lang.Object) complex34);
        org.apache.commons.math3.complex.Complex complex36 = complex10.multiply(complex34);
        org.apache.commons.math3.complex.Complex complex37 = complex10.exp();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexField16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.0d) + "'", double19 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
    }

    @Test
    public void test387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test387");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.cos();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        org.apache.commons.math3.complex.Complex complex9 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double10 = complex9.getReal();
        boolean boolean11 = org.apache.commons.math3.complex.Complex.equals(complex6, complex9);
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex4, complex6, (double) 0.0f);
        java.lang.String str14 = complex4.toString();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        org.apache.commons.math3.complex.Complex complex19 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double20 = complex19.getReal();
        boolean boolean21 = org.apache.commons.math3.complex.Complex.equals(complex16, complex19);
        org.apache.commons.math3.complex.Complex complex23 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean25 = org.apache.commons.math3.complex.Complex.equals(complex16, complex23, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex26 = complex4.add(complex23);
        java.lang.String str27 = complex23.toString();
        org.apache.commons.math3.complex.Complex complex29 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex30 = complex23.divide(complex29);
        org.apache.commons.math3.complex.ComplexField complexField31 = complex29.getField();
        boolean boolean33 = org.apache.commons.math3.complex.Complex.equals(complex1, complex29, (-1));
        boolean boolean34 = complex29.isInfinite();
        org.apache.commons.math3.complex.Complex complex35 = complex29.sqrt1z();
        org.apache.commons.math3.complex.Complex complex36 = complex35.sqrt();
        org.apache.commons.math3.complex.Complex complex37 = complex36.atan();
        org.apache.commons.math3.complex.Complex complex38 = complex36.tan();
        java.lang.String str39 = complex36.toString();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "(-1.0, 0.0)" + "'", str14.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1.0d) + "'", double20 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "(-1.0, 0.0)" + "'", str27.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexField31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "(0.0, 0.0)" + "'", str39.equals("(0.0, 0.0)"));
    }

    @Test
    public void test388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test388");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        double double4 = complex3.abs();
        org.apache.commons.math3.complex.Complex complex5 = complex3.exp();
        org.apache.commons.math3.complex.Complex complex6 = complex5.negate();
        org.apache.commons.math3.complex.Complex complex8 = complex6.pow((-0.0d));
        org.apache.commons.math3.complex.Complex complex9 = complex8.acos();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
    }

    @Test
    public void test389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test389");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        java.lang.String str11 = complex1.toString();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex23 = complex1.add(complex20);
        org.apache.commons.math3.complex.Complex complex24 = org.apache.commons.math3.complex.Complex.NaN;
        org.apache.commons.math3.complex.Complex complex25 = complex20.subtract(complex24);
        double double26 = complex24.getArgument();
        org.apache.commons.math3.complex.Complex complex27 = complex24.sin();
        org.apache.commons.math3.complex.Complex complex28 = complex27.sqrt();
        org.apache.commons.math3.complex.Complex complex29 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex31 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double32 = complex31.getReal();
        org.apache.commons.math3.complex.Complex complex34 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math3.complex.Complex complex36 = complex34.tanh();
        boolean boolean38 = complex36.equals((java.lang.Object) true);
        double double39 = complex36.getImaginary();
        org.apache.commons.math3.complex.Complex complex40 = complex36.sinh();
        org.apache.commons.math3.complex.Complex complex42 = complex36.multiply(0.0d);
        boolean boolean43 = org.apache.commons.math3.complex.Complex.equals(complex31, complex36);
        org.apache.commons.math3.complex.Complex complex45 = complex31.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex46 = complex29.subtract(complex45);
        org.apache.commons.math3.complex.Complex complex48 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex49 = complex48.sqrt();
        org.apache.commons.math3.complex.Complex complex50 = complex29.add(complex48);
        org.apache.commons.math3.complex.Complex complex51 = complex28.multiply(complex29);
        org.apache.commons.math3.complex.Complex complex52 = complex29.tan();
        org.apache.commons.math3.complex.Complex complex53 = complex29.log();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "(-1.0, 0.0)" + "'", str11.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals((double) double26, Double.NaN, 0);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-1.0d) + "'", double32 == (-1.0d));
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
    }

    @Test
    public void test390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test390");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex(100.0d, (double) (short) 100);
        org.apache.commons.math3.complex.Complex complex4 = complex2.multiply((double) 100);
        org.apache.commons.math3.complex.Complex complex7 = org.apache.commons.math3.complex.Complex.valueOf(100.0d, (double) (short) 0);
        org.apache.commons.math3.complex.Complex complex9 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double10 = complex9.getReal();
        org.apache.commons.math3.complex.Complex complex12 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double13 = complex12.getReal();
        boolean boolean14 = org.apache.commons.math3.complex.Complex.equals(complex9, complex12);
        org.apache.commons.math3.complex.Complex complex15 = complex12.sqrt();
        org.apache.commons.math3.complex.Complex complex17 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math3.complex.Complex complex19 = complex17.tanh();
        boolean boolean21 = complex19.equals((java.lang.Object) true);
        double double22 = complex19.getImaginary();
        org.apache.commons.math3.complex.Complex complex23 = complex19.sinh();
        org.apache.commons.math3.complex.Complex complex24 = complex19.cosh();
        double double25 = complex19.getImaginary();
        org.apache.commons.math3.complex.Complex complex26 = complex12.add(complex19);
        org.apache.commons.math3.complex.Complex complex27 = complex7.add(complex19);
        org.apache.commons.math3.complex.Complex complex29 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math3.complex.Complex complex31 = complex29.tanh();
        boolean boolean33 = complex31.equals((java.lang.Object) true);
        double double34 = complex31.getImaginary();
        org.apache.commons.math3.complex.Complex complex35 = complex31.sinh();
        org.apache.commons.math3.complex.Complex complex36 = complex27.multiply(complex35);
        boolean boolean38 = org.apache.commons.math3.complex.Complex.equals(complex4, complex27, (int) '4');
        double double39 = complex27.abs();
        org.apache.commons.math3.complex.Complex complex42 = org.apache.commons.math3.complex.Complex.valueOf((double) 10.0f, (double) (-1));
        org.apache.commons.math3.complex.Complex complex43 = complex27.subtract(complex42);
        org.apache.commons.math3.complex.Complex complex45 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double46 = complex45.getReal();
        org.apache.commons.math3.complex.Complex complex48 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex49 = complex48.sqrt();
        org.apache.commons.math3.complex.Complex complex50 = complex48.tanh();
        boolean boolean52 = complex50.equals((java.lang.Object) true);
        double double53 = complex50.getImaginary();
        org.apache.commons.math3.complex.Complex complex54 = complex50.sinh();
        org.apache.commons.math3.complex.Complex complex56 = complex50.multiply(0.0d);
        boolean boolean57 = org.apache.commons.math3.complex.Complex.equals(complex45, complex50);
        org.apache.commons.math3.complex.Complex complex59 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex60 = complex59.sqrt();
        org.apache.commons.math3.complex.Complex complex61 = complex59.sqrt1z();
        org.apache.commons.math3.complex.Complex complex62 = complex50.subtract(complex59);
        org.apache.commons.math3.complex.Complex complex63 = complex62.reciprocal();
        org.apache.commons.math3.complex.Complex complex64 = complex63.acos();
        double double65 = complex64.getArgument();
        org.apache.commons.math3.complex.Complex complex67 = complex64.multiply((double) (byte) 1);
        org.apache.commons.math3.complex.Complex complex68 = complex64.acos();
        double double69 = complex64.getReal();
        org.apache.commons.math3.complex.Complex complex70 = complex42.subtract(complex64);
        org.apache.commons.math3.complex.Complex complex71 = complex70.sqrt1z();
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1.0d) + "'", double13 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1.0d) + "'", double46 == (-1.0d));
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertEquals((double) double65, Double.NaN, 0);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertEquals((double) double69, Double.NaN, 0);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
    }

    @Test
    public void test391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test391");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex(4.277655727379682d, 97.51410154434075d);
    }

    @Test
    public void test392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test392");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        java.lang.String str11 = complex1.toString();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, 10);
        boolean boolean23 = org.apache.commons.math3.complex.Complex.equals(complex1, complex20);
        org.apache.commons.math3.complex.Complex complex24 = complex1.log();
        java.lang.Class<?> wildcardClass25 = complex1.getClass();
        org.apache.commons.math3.complex.Complex complex26 = complex1.sinh();
        org.apache.commons.math3.complex.Complex complex27 = complex1.tan();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "(-1.0, 0.0)" + "'", str11.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
    }

    @Test
    public void test393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test393");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf((-2.0d), (double) 'a');
        org.apache.commons.math3.complex.Complex complex4 = complex2.multiply((int) (byte) 0);
        org.apache.commons.math3.complex.Complex complex5 = complex4.sqrt();
        double double6 = complex5.getArgument();
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double9 = complex8.getReal();
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex8, complex11);
        org.apache.commons.math3.complex.Complex complex15 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean17 = org.apache.commons.math3.complex.Complex.equals(complex8, complex15, 10);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (short) 100, (double) (short) -1);
        boolean boolean21 = complex8.equals((java.lang.Object) complex20);
        org.apache.commons.math3.complex.Complex complex22 = complex8.log();
        org.apache.commons.math3.complex.Complex complex23 = complex22.conjugate();
        double double24 = complex23.getArgument();
        org.apache.commons.math3.complex.Complex complex25 = complex5.subtract(complex23);
        org.apache.commons.math3.complex.Complex complex26 = complex5.sinh();
        org.apache.commons.math3.complex.Complex complex27 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex29 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double30 = complex29.getReal();
        org.apache.commons.math3.complex.Complex complex32 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex33 = complex32.sqrt();
        org.apache.commons.math3.complex.Complex complex34 = complex32.tanh();
        boolean boolean36 = complex34.equals((java.lang.Object) true);
        double double37 = complex34.getImaginary();
        org.apache.commons.math3.complex.Complex complex38 = complex34.sinh();
        org.apache.commons.math3.complex.Complex complex40 = complex34.multiply(0.0d);
        boolean boolean41 = org.apache.commons.math3.complex.Complex.equals(complex29, complex34);
        org.apache.commons.math3.complex.Complex complex43 = complex29.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex44 = complex27.subtract(complex43);
        org.apache.commons.math3.complex.Complex complex46 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math3.complex.Complex complex48 = complex27.add(complex46);
        org.apache.commons.math3.complex.Complex complex49 = complex48.negate();
        org.apache.commons.math3.complex.Complex complex51 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex53 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double54 = complex53.getReal();
        org.apache.commons.math3.complex.Complex complex56 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double57 = complex56.getReal();
        boolean boolean58 = org.apache.commons.math3.complex.Complex.equals(complex53, complex56);
        boolean boolean60 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex51, complex53, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex61 = complex51.log();
        boolean boolean63 = org.apache.commons.math3.complex.Complex.equals(complex48, complex61, (int) (byte) 100);
        org.apache.commons.math3.complex.Complex complex65 = complex61.multiply(0);
        boolean boolean66 = org.apache.commons.math3.complex.Complex.equals(complex5, complex65);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1.5707963267948966d) + "'", double24 == (-1.5707963267948966d));
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1.0d) + "'", double30 == (-1.0d));
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1.0d) + "'", double54 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-1.0d) + "'", double57 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test394");
        org.apache.commons.math3.complex.Complex complex0 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double3 = complex2.getReal();
        org.apache.commons.math3.complex.Complex complex5 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math3.complex.Complex complex7 = complex5.tanh();
        boolean boolean9 = complex7.equals((java.lang.Object) true);
        double double10 = complex7.getImaginary();
        org.apache.commons.math3.complex.Complex complex11 = complex7.sinh();
        org.apache.commons.math3.complex.Complex complex13 = complex7.multiply(0.0d);
        boolean boolean14 = org.apache.commons.math3.complex.Complex.equals(complex2, complex7);
        org.apache.commons.math3.complex.Complex complex16 = complex2.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex17 = complex0.subtract(complex16);
        org.apache.commons.math3.complex.Complex complex19 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math3.complex.Complex complex21 = complex0.add(complex19);
        org.apache.commons.math3.complex.Complex complex22 = complex21.negate();
        org.apache.commons.math3.complex.Complex complex23 = complex22.conjugate();
        org.apache.commons.math3.complex.ComplexField complexField24 = complex22.getField();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complexField24);
    }

    @Test
    public void test395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test395");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex11 = complex1.log();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, 10);
        org.apache.commons.math3.complex.Complex complex24 = complex20.pow((double) (byte) 1);
        boolean boolean25 = org.apache.commons.math3.complex.Complex.equals(complex1, complex24);
        double double26 = complex24.abs();
        org.apache.commons.math3.complex.ComplexField complexField27 = complex24.getField();
        org.apache.commons.math3.complex.Complex complex29 = complex24.pow((-3.141592653589793d));
        org.apache.commons.math3.complex.Complex complex31 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double32 = complex31.getReal();
        org.apache.commons.math3.complex.Complex complex34 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math3.complex.Complex complex36 = complex34.tanh();
        boolean boolean38 = complex36.equals((java.lang.Object) true);
        double double39 = complex36.getImaginary();
        org.apache.commons.math3.complex.Complex complex40 = complex36.sinh();
        org.apache.commons.math3.complex.Complex complex42 = complex36.multiply(0.0d);
        boolean boolean43 = org.apache.commons.math3.complex.Complex.equals(complex31, complex36);
        org.apache.commons.math3.complex.Complex complex44 = complex31.sqrt1z();
        java.util.List<org.apache.commons.math3.complex.Complex> complexList46 = complex44.nthRoot((int) '4');
        org.apache.commons.math3.complex.Complex complex47 = complex44.asin();
        boolean boolean49 = org.apache.commons.math3.complex.Complex.equals(complex24, complex44, (int) (byte) 10);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(complexField27);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-1.0d) + "'", double32 == (-1.0d));
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complexList46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test396");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equals(complex1, complex8, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex11 = complex8.sin();
        org.apache.commons.math3.complex.Complex complex12 = complex11.log();
        org.apache.commons.math3.complex.Complex complex14 = complex11.multiply((int) (byte) 100);
        org.apache.commons.math3.complex.Complex complex16 = complex14.pow(3.1415926535897927d);
        org.apache.commons.math3.complex.Complex complex17 = complex16.negate();
        org.apache.commons.math3.complex.Complex complex18 = complex16.log();
        double double19 = complex16.getReal();
        org.apache.commons.math3.complex.Complex complex21 = complex16.multiply(3.14159265358979d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1007454.0268957694d) + "'", double19 == (-1007454.0268957694d));
        org.junit.Assert.assertNotNull(complex21);
    }

    @Test
    public void test397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test397");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        java.lang.String str11 = complex1.toString();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex23 = complex1.add(complex20);
        org.apache.commons.math3.complex.Complex complex24 = org.apache.commons.math3.complex.Complex.NaN;
        org.apache.commons.math3.complex.Complex complex25 = complex20.subtract(complex24);
        org.apache.commons.math3.complex.Complex complex27 = complex20.multiply((int) (byte) -1);
        org.apache.commons.math3.complex.Complex complex28 = complex20.tan();
        org.apache.commons.math3.complex.Complex complex29 = complex28.conjugate();
        try {
            java.util.List<org.apache.commons.math3.complex.Complex> complexList31 = complex29.nthRoot(0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotPositiveException; message: cannot compute nth root for null or negative n: 0");
        } catch (org.apache.commons.math3.exception.NotPositiveException e) {
        }
    }

    @Test
    public void test398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test398");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex4 = complex1.subtract((double) (short) 100);
        org.apache.commons.math3.complex.Complex complex6 = complex1.subtract((double) 1.0f);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex10 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double11 = complex10.getReal();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        boolean boolean15 = org.apache.commons.math3.complex.Complex.equals(complex10, complex13);
        boolean boolean17 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex8, complex10, (double) 0.0f);
        double double18 = complex10.getReal();
        org.apache.commons.math3.complex.Complex complex19 = complex10.exp();
        org.apache.commons.math3.complex.Complex complex21 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double22 = complex21.getReal();
        org.apache.commons.math3.complex.Complex complex24 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex25 = complex24.sqrt();
        org.apache.commons.math3.complex.Complex complex26 = complex24.tanh();
        boolean boolean28 = complex26.equals((java.lang.Object) true);
        double double29 = complex26.getImaginary();
        org.apache.commons.math3.complex.Complex complex30 = complex26.sinh();
        org.apache.commons.math3.complex.Complex complex32 = complex26.multiply(0.0d);
        boolean boolean33 = org.apache.commons.math3.complex.Complex.equals(complex21, complex26);
        org.apache.commons.math3.complex.Complex complex35 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex36 = complex35.sqrt();
        org.apache.commons.math3.complex.Complex complex37 = complex35.sqrt1z();
        org.apache.commons.math3.complex.Complex complex38 = complex26.subtract(complex35);
        org.apache.commons.math3.complex.Complex complex39 = complex38.acos();
        org.apache.commons.math3.complex.Complex complex40 = complex19.divide(complex38);
        org.apache.commons.math3.complex.Complex complex41 = complex40.log();
        org.apache.commons.math3.complex.Complex complex43 = complex40.divide((double) ' ');
        boolean boolean44 = complex1.equals((java.lang.Object) ' ');
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-1.0d) + "'", double11 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.0d) + "'", double18 == (-1.0d));
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test399");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex(1.2645189576252271d, 0.8778963166742729d);
    }

    @Test
    public void test400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test400");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex9 = complex3.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double15 = complex14.getReal();
        boolean boolean16 = org.apache.commons.math3.complex.Complex.equals(complex11, complex14);
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean20 = org.apache.commons.math3.complex.Complex.equals(complex11, complex18, 10);
        org.apache.commons.math3.complex.Complex complex22 = complex18.pow((double) (byte) 1);
        boolean boolean24 = org.apache.commons.math3.complex.Complex.equals(complex3, complex22, (int) (short) -1);
        org.apache.commons.math3.complex.ComplexField complexField25 = complex3.getField();
        org.apache.commons.math3.complex.Complex complex26 = complex3.exp();
        org.apache.commons.math3.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math3.complex.Complex complex28 = complex27.reciprocal();
        org.apache.commons.math3.complex.Complex complex30 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double31 = complex30.getReal();
        org.apache.commons.math3.complex.Complex complex33 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math3.complex.Complex complex35 = complex33.tanh();
        boolean boolean37 = complex35.equals((java.lang.Object) true);
        double double38 = complex35.getImaginary();
        org.apache.commons.math3.complex.Complex complex39 = complex35.sinh();
        org.apache.commons.math3.complex.Complex complex41 = complex35.multiply(0.0d);
        boolean boolean42 = org.apache.commons.math3.complex.Complex.equals(complex30, complex35);
        org.apache.commons.math3.complex.Complex complex44 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math3.complex.Complex complex46 = complex44.sqrt1z();
        org.apache.commons.math3.complex.Complex complex47 = complex35.subtract(complex44);
        org.apache.commons.math3.complex.Complex complex48 = complex47.reciprocal();
        org.apache.commons.math3.complex.Complex complex49 = complex48.negate();
        org.apache.commons.math3.complex.Complex complex51 = complex48.multiply((double) (byte) 10);
        org.apache.commons.math3.complex.Complex complex52 = complex28.add(complex48);
        org.apache.commons.math3.complex.Complex complex54 = complex48.multiply(0.7615941559557649d);
        org.apache.commons.math3.complex.Complex complex55 = complex48.atan();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(complexField25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-1.0d) + "'", double31 == (-1.0d));
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
    }

    @Test
    public void test401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test401");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math3.complex.Complex complex6 = complex4.tanh();
        boolean boolean8 = complex6.equals((java.lang.Object) true);
        double double9 = complex6.getImaginary();
        org.apache.commons.math3.complex.Complex complex10 = complex6.sinh();
        org.apache.commons.math3.complex.Complex complex12 = complex6.multiply(0.0d);
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex1, complex6);
        org.apache.commons.math3.complex.Complex complex15 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math3.complex.Complex complex17 = complex15.sqrt1z();
        org.apache.commons.math3.complex.Complex complex18 = complex6.subtract(complex15);
        org.apache.commons.math3.complex.Complex complex19 = complex18.reciprocal();
        org.apache.commons.math3.complex.Complex complex21 = complex19.multiply(1.772453850905516d);
        boolean boolean22 = complex19.isNaN();
        org.apache.commons.math3.complex.Complex complex23 = complex19.log();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
    }

    @Test
    public void test402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test402");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        java.lang.String str11 = complex1.toString();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex23 = complex1.add(complex20);
        org.apache.commons.math3.complex.Complex complex24 = org.apache.commons.math3.complex.Complex.NaN;
        org.apache.commons.math3.complex.Complex complex25 = complex20.subtract(complex24);
        org.apache.commons.math3.complex.Complex complex27 = complex20.multiply((int) (byte) -1);
        org.apache.commons.math3.complex.Complex complex29 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex30 = complex29.conjugate();
        boolean boolean32 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex27, complex29, 0.8414709848078965d);
        org.apache.commons.math3.complex.Complex complex33 = complex27.acos();
        org.apache.commons.math3.complex.Complex complex34 = complex27.cosh();
        boolean boolean35 = complex34.isInfinite();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "(-1.0, 0.0)" + "'", str11.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test403");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equals(complex1, complex8, 10);
        org.apache.commons.math3.complex.Complex complex12 = complex8.add(0.0d);
        double double13 = complex12.getImaginary();
        org.apache.commons.math3.complex.Complex complex14 = complex12.sinh();
        org.apache.commons.math3.complex.Complex complex16 = complex14.multiply((int) (short) -1);
        org.apache.commons.math3.complex.Complex complex18 = complex14.multiply((int) (short) 10);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex18);
    }

    @Test
    public void test404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test404");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equals(complex1, complex8, 10);
        org.apache.commons.math3.complex.Complex complex12 = complex1.multiply(10);
        org.apache.commons.math3.complex.Complex complex13 = complex1.reciprocal();
        org.apache.commons.math3.complex.Complex complex15 = complex1.divide((double) (-1.0f));
        org.apache.commons.math3.complex.Complex complex17 = complex15.subtract((double) 100.0f);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex17);
    }

    @Test
    public void test405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test405");
        org.apache.commons.math3.complex.Complex complex0 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double3 = complex2.getReal();
        org.apache.commons.math3.complex.Complex complex5 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math3.complex.Complex complex7 = complex5.tanh();
        boolean boolean9 = complex7.equals((java.lang.Object) true);
        double double10 = complex7.getImaginary();
        org.apache.commons.math3.complex.Complex complex11 = complex7.sinh();
        org.apache.commons.math3.complex.Complex complex13 = complex7.multiply(0.0d);
        boolean boolean14 = org.apache.commons.math3.complex.Complex.equals(complex2, complex7);
        org.apache.commons.math3.complex.Complex complex16 = complex2.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex17 = complex0.subtract(complex16);
        org.apache.commons.math3.complex.Complex complex19 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double20 = complex19.getReal();
        double double21 = complex19.getReal();
        org.apache.commons.math3.complex.Complex complex22 = complex19.tan();
        org.apache.commons.math3.complex.Complex complex23 = complex16.pow(complex22);
        org.apache.commons.math3.complex.Complex complex24 = complex23.asin();
        org.apache.commons.math3.complex.Complex complex25 = complex23.sin();
        org.apache.commons.math3.complex.Complex complex26 = complex23.sin();
        org.apache.commons.math3.complex.Complex complex28 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math3.complex.Complex complex30 = complex28.tanh();
        boolean boolean32 = complex30.equals((java.lang.Object) true);
        double double33 = complex30.getImaginary();
        org.apache.commons.math3.complex.Complex complex34 = complex30.sinh();
        org.apache.commons.math3.complex.Complex complex35 = complex30.sinh();
        org.apache.commons.math3.complex.Complex complex37 = complex30.multiply((-2.0d));
        org.apache.commons.math3.complex.Complex complex38 = complex30.atan();
        org.apache.commons.math3.complex.Complex complex39 = complex38.asin();
        boolean boolean40 = org.apache.commons.math3.complex.Complex.equals(complex23, complex38);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1.0d) + "'", double20 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1.0d) + "'", double21 == (-1.0d));
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test406");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        double double4 = complex3.getReal();
        java.lang.Class<?> wildcardClass5 = complex3.getClass();
        org.apache.commons.math3.complex.Complex complex6 = complex3.log();
        org.apache.commons.math3.complex.Complex complex7 = complex3.exp();
        org.apache.commons.math3.complex.Complex complex9 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double10 = complex9.getReal();
        org.apache.commons.math3.complex.Complex complex12 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double13 = complex12.getReal();
        boolean boolean14 = org.apache.commons.math3.complex.Complex.equals(complex9, complex12);
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex9, complex16, 10);
        org.apache.commons.math3.complex.Complex complex19 = complex16.sqrt1z();
        org.apache.commons.math3.complex.Complex complex20 = org.apache.commons.math3.complex.Complex.NaN;
        org.apache.commons.math3.complex.Complex complex22 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double23 = complex22.getReal();
        org.apache.commons.math3.complex.Complex complex25 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex26 = complex25.sqrt();
        org.apache.commons.math3.complex.Complex complex27 = complex25.tanh();
        boolean boolean29 = complex27.equals((java.lang.Object) true);
        double double30 = complex27.getImaginary();
        org.apache.commons.math3.complex.Complex complex31 = complex27.sinh();
        org.apache.commons.math3.complex.Complex complex33 = complex27.multiply(0.0d);
        boolean boolean34 = org.apache.commons.math3.complex.Complex.equals(complex22, complex27);
        org.apache.commons.math3.complex.Complex complex36 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math3.complex.Complex complex38 = complex36.sqrt1z();
        org.apache.commons.math3.complex.Complex complex39 = complex27.subtract(complex36);
        org.apache.commons.math3.complex.Complex complex40 = complex39.acos();
        boolean boolean41 = org.apache.commons.math3.complex.Complex.equals(complex20, complex39);
        org.apache.commons.math3.complex.Complex complex42 = complex19.divide(complex39);
        boolean boolean44 = org.apache.commons.math3.complex.Complex.equals(complex7, complex19, 0.03125d);
        org.apache.commons.math3.complex.Complex complex45 = org.apache.commons.math3.complex.Complex.ZERO;
        org.apache.commons.math3.complex.Complex complex46 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex47 = complex46.asin();
        org.apache.commons.math3.complex.Complex complex48 = complex45.divide(complex47);
        org.apache.commons.math3.complex.Complex complex50 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex51 = complex50.sqrt();
        org.apache.commons.math3.complex.Complex complex52 = complex50.tanh();
        boolean boolean54 = complex52.equals((java.lang.Object) true);
        double double55 = complex52.getImaginary();
        org.apache.commons.math3.complex.Complex complex56 = complex52.sinh();
        org.apache.commons.math3.complex.Complex complex58 = complex52.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex60 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex62 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double63 = complex62.getReal();
        org.apache.commons.math3.complex.Complex complex65 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double66 = complex65.getReal();
        boolean boolean67 = org.apache.commons.math3.complex.Complex.equals(complex62, complex65);
        boolean boolean69 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex60, complex62, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex71 = complex62.multiply(1);
        org.apache.commons.math3.complex.Complex complex72 = complex62.conjugate();
        boolean boolean74 = org.apache.commons.math3.complex.Complex.equals(complex58, complex62, (int) (short) 100);
        org.apache.commons.math3.complex.Complex complex76 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex77 = complex76.sqrt();
        org.apache.commons.math3.complex.Complex complex78 = complex76.tanh();
        double double79 = complex78.abs();
        org.apache.commons.math3.complex.Complex complex80 = complex78.exp();
        org.apache.commons.math3.complex.Complex complex81 = complex80.negate();
        org.apache.commons.math3.complex.Complex complex82 = complex80.sin();
        org.apache.commons.math3.complex.Complex complex83 = complex58.subtract(complex82);
        org.apache.commons.math3.complex.Complex complex85 = complex82.divide(0.0d);
        org.apache.commons.math3.complex.Complex complex86 = complex82.cosh();
        org.apache.commons.math3.complex.Complex complex87 = complex47.divide(complex86);
        double double88 = complex86.getReal();
        org.apache.commons.math3.complex.Complex complex89 = complex7.multiply(complex86);
        double double90 = complex89.getArgument();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1.0d) + "'", double13 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-1.0d) + "'", double23 == (-1.0d));
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + (-1.0d) + "'", double63 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + (-1.0d) + "'", double66 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.3754263876807227d + "'", double88 == 1.3754263876807227d);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
    }

    @Test
    public void test407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test407");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf((-10.0d), 0.0d);
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        org.apache.commons.math3.complex.Complex complex9 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double10 = complex9.getReal();
        boolean boolean11 = org.apache.commons.math3.complex.Complex.equals(complex6, complex9);
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex4, complex6, (double) 0.0f);
        java.lang.String str14 = complex4.toString();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        org.apache.commons.math3.complex.Complex complex19 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double20 = complex19.getReal();
        boolean boolean21 = org.apache.commons.math3.complex.Complex.equals(complex16, complex19);
        org.apache.commons.math3.complex.Complex complex23 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean25 = org.apache.commons.math3.complex.Complex.equals(complex16, complex23, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex26 = complex4.add(complex23);
        java.lang.String str27 = complex23.toString();
        org.apache.commons.math3.complex.Complex complex29 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex30 = complex23.divide(complex29);
        org.apache.commons.math3.complex.Complex complex32 = complex29.divide((double) ' ');
        double double33 = complex32.abs();
        boolean boolean35 = org.apache.commons.math3.complex.Complex.equals(complex2, complex32, (int) (byte) 1);
        org.apache.commons.math3.complex.Complex complex36 = complex2.sin();
        boolean boolean37 = complex2.isInfinite();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "(-1.0, 0.0)" + "'", str14.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1.0d) + "'", double20 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "(-1.0, 0.0)" + "'", str27.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.03125d + "'", double33 == 0.03125d);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test408");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        double double11 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex12 = complex3.exp();
        double double13 = complex3.getImaginary();
        double double14 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex15 = complex3.sqrt1z();
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex(0.0d, (double) ' ');
        org.apache.commons.math3.complex.Complex complex19 = complex18.cos();
        boolean boolean21 = org.apache.commons.math3.complex.Complex.equals(complex3, complex18, 1.0d);
        org.apache.commons.math3.complex.Complex complex23 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex25 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double26 = complex25.getReal();
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double29 = complex28.getReal();
        boolean boolean30 = org.apache.commons.math3.complex.Complex.equals(complex25, complex28);
        boolean boolean32 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex23, complex25, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex33 = complex23.log();
        org.apache.commons.math3.complex.Complex complex35 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double36 = complex35.getReal();
        org.apache.commons.math3.complex.Complex complex38 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double39 = complex38.getReal();
        boolean boolean40 = org.apache.commons.math3.complex.Complex.equals(complex35, complex38);
        org.apache.commons.math3.complex.Complex complex42 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean44 = org.apache.commons.math3.complex.Complex.equals(complex35, complex42, 10);
        org.apache.commons.math3.complex.Complex complex46 = complex42.pow((double) (byte) 1);
        boolean boolean47 = org.apache.commons.math3.complex.Complex.equals(complex23, complex46);
        org.apache.commons.math3.complex.Complex complex49 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double50 = complex49.getReal();
        double double51 = complex49.getReal();
        org.apache.commons.math3.complex.Complex complex52 = complex49.tan();
        org.apache.commons.math3.complex.Complex complex53 = complex49.exp();
        org.apache.commons.math3.complex.Complex complex55 = complex49.multiply((double) 10);
        boolean boolean56 = org.apache.commons.math3.complex.Complex.equals(complex23, complex55);
        org.apache.commons.math3.complex.Complex complex57 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex59 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double60 = complex59.getReal();
        org.apache.commons.math3.complex.Complex complex62 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex63 = complex62.sqrt();
        org.apache.commons.math3.complex.Complex complex64 = complex62.tanh();
        boolean boolean66 = complex64.equals((java.lang.Object) true);
        double double67 = complex64.getImaginary();
        org.apache.commons.math3.complex.Complex complex68 = complex64.sinh();
        org.apache.commons.math3.complex.Complex complex70 = complex64.multiply(0.0d);
        boolean boolean71 = org.apache.commons.math3.complex.Complex.equals(complex59, complex64);
        org.apache.commons.math3.complex.Complex complex73 = complex59.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex74 = complex57.subtract(complex73);
        org.apache.commons.math3.complex.Complex complex76 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double77 = complex76.getReal();
        double double78 = complex76.getReal();
        org.apache.commons.math3.complex.Complex complex79 = complex76.tan();
        org.apache.commons.math3.complex.Complex complex80 = complex73.pow(complex79);
        org.apache.commons.math3.complex.Complex complex81 = complex80.sinh();
        org.apache.commons.math3.complex.Complex complex82 = complex23.multiply(complex80);
        org.apache.commons.math3.complex.Complex complex83 = complex23.conjugate();
        org.apache.commons.math3.complex.Complex complex84 = complex18.add(complex83);
        org.apache.commons.math3.complex.Complex complex86 = complex18.divide((double) (short) -1);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-1.0d) + "'", double11 == (-1.0d));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-1.0d) + "'", double26 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1.0d) + "'", double29 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-1.0d) + "'", double36 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-1.0d) + "'", double39 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-1.0d) + "'", double50 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-1.0d) + "'", double51 == (-1.0d));
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + (-1.0d) + "'", double60 == (-1.0d));
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + (-1.0d) + "'", double77 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + (-1.0d) + "'", double78 == (-1.0d));
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex86);
    }

    @Test
    public void test409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test409");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double9 = complex8.getReal();
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex8, complex11);
        org.apache.commons.math3.complex.Complex complex15 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean17 = org.apache.commons.math3.complex.Complex.equals(complex8, complex15, 10);
        org.apache.commons.math3.complex.Complex complex19 = complex15.pow((double) (byte) 1);
        boolean boolean21 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex3, complex15, (double) (-1));
        org.apache.commons.math3.complex.Complex complex22 = complex15.sin();
        org.apache.commons.math3.complex.Complex complex24 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double27 = complex26.getReal();
        org.apache.commons.math3.complex.Complex complex29 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double30 = complex29.getReal();
        boolean boolean31 = org.apache.commons.math3.complex.Complex.equals(complex26, complex29);
        boolean boolean33 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex24, complex26, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex34 = complex24.log();
        org.apache.commons.math3.complex.Complex complex35 = complex34.exp();
        boolean boolean36 = complex35.isInfinite();
        org.apache.commons.math3.complex.Complex complex37 = complex22.multiply(complex35);
        org.apache.commons.math3.complex.Complex complex39 = new org.apache.commons.math3.complex.Complex((double) ' ');
        org.apache.commons.math3.complex.Complex complex41 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double42 = complex41.getReal();
        org.apache.commons.math3.complex.Complex complex44 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math3.complex.Complex complex46 = complex44.tanh();
        boolean boolean48 = complex46.equals((java.lang.Object) true);
        double double49 = complex46.getImaginary();
        org.apache.commons.math3.complex.Complex complex50 = complex46.sinh();
        org.apache.commons.math3.complex.Complex complex52 = complex46.multiply(0.0d);
        boolean boolean53 = org.apache.commons.math3.complex.Complex.equals(complex41, complex46);
        org.apache.commons.math3.complex.Complex complex54 = complex39.divide(complex46);
        org.apache.commons.math3.complex.Complex complex55 = complex46.cos();
        org.apache.commons.math3.complex.Complex complex56 = complex35.subtract(complex55);
        org.apache.commons.math3.complex.Complex complex57 = complex56.tanh();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1.0d) + "'", double27 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1.0d) + "'", double30 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + (-1.0d) + "'", double42 == (-1.0d));
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
    }

    @Test
    public void test410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test410");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math3.complex.Complex complex4 = complex1.asin();
        org.apache.commons.math3.complex.Complex complex5 = complex4.tan();
        org.apache.commons.math3.complex.Complex complex7 = complex5.divide((double) 10);
        org.apache.commons.math3.complex.Complex complex8 = complex5.cos();
        org.apache.commons.math3.complex.Complex complex10 = complex8.add((-0.009999666686665238d));
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex10);
    }

    @Test
    public void test411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test411");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = complex1.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex5 = complex1.log();
        org.apache.commons.math3.complex.Complex complex6 = complex5.reciprocal();
        boolean boolean7 = complex5.isNaN();
        double double8 = complex5.getReal();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test412");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex8 = complex3.sqrt1z();
        org.apache.commons.math3.complex.Complex complex9 = complex8.atan();
        org.apache.commons.math3.complex.Complex complex10 = complex9.cos();
        org.apache.commons.math3.complex.ComplexField complexField11 = complex10.getField();
        org.apache.commons.math3.complex.Complex complex12 = complex10.log();
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double15 = complex14.getReal();
        org.apache.commons.math3.complex.Complex complex17 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math3.complex.Complex complex19 = complex17.tanh();
        boolean boolean21 = complex19.equals((java.lang.Object) true);
        double double22 = complex19.getImaginary();
        org.apache.commons.math3.complex.Complex complex23 = complex19.sinh();
        org.apache.commons.math3.complex.Complex complex25 = complex19.multiply(0.0d);
        boolean boolean26 = org.apache.commons.math3.complex.Complex.equals(complex14, complex19);
        org.apache.commons.math3.complex.Complex complex28 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math3.complex.Complex complex30 = complex28.tanh();
        boolean boolean32 = complex30.equals((java.lang.Object) true);
        double double33 = complex30.getImaginary();
        org.apache.commons.math3.complex.Complex complex35 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double36 = complex35.getReal();
        org.apache.commons.math3.complex.Complex complex38 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double39 = complex38.getReal();
        boolean boolean40 = org.apache.commons.math3.complex.Complex.equals(complex35, complex38);
        org.apache.commons.math3.complex.Complex complex42 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean44 = org.apache.commons.math3.complex.Complex.equals(complex35, complex42, 10);
        org.apache.commons.math3.complex.Complex complex46 = complex42.pow((double) (byte) 1);
        boolean boolean48 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex30, complex42, (double) (-1));
        org.apache.commons.math3.complex.Complex complex49 = complex19.subtract(complex42);
        java.lang.String str50 = complex49.toString();
        org.apache.commons.math3.complex.Complex complex51 = complex49.cos();
        boolean boolean53 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex10, complex49, (-0.8414709848078965d));
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexField11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-1.0d) + "'", double36 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-1.0d) + "'", double39 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + str50 + "' != '" + "(1.0, 0.0)" + "'", str50.equals("(1.0, 0.0)"));
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test413");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double9 = complex8.getReal();
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex8, complex11);
        org.apache.commons.math3.complex.Complex complex15 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean17 = org.apache.commons.math3.complex.Complex.equals(complex8, complex15, 10);
        org.apache.commons.math3.complex.Complex complex19 = complex15.pow((double) (byte) 1);
        boolean boolean21 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex3, complex15, (double) (-1));
        org.apache.commons.math3.complex.Complex complex22 = complex15.negate();
        org.apache.commons.math3.complex.Complex complex24 = complex22.pow(1.557407724654902d);
        org.apache.commons.math3.complex.Complex complex26 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math3.complex.Complex complex28 = complex26.tanh();
        boolean boolean30 = complex28.equals((java.lang.Object) true);
        double double31 = complex28.getImaginary();
        org.apache.commons.math3.complex.Complex complex32 = complex28.sinh();
        org.apache.commons.math3.complex.Complex complex34 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex36 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double37 = complex36.getReal();
        org.apache.commons.math3.complex.Complex complex39 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double40 = complex39.getReal();
        boolean boolean41 = org.apache.commons.math3.complex.Complex.equals(complex36, complex39);
        boolean boolean43 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex34, complex36, (double) 0.0f);
        java.lang.String str44 = complex34.toString();
        org.apache.commons.math3.complex.Complex complex46 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double47 = complex46.getReal();
        org.apache.commons.math3.complex.Complex complex49 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double50 = complex49.getReal();
        boolean boolean51 = org.apache.commons.math3.complex.Complex.equals(complex46, complex49);
        org.apache.commons.math3.complex.Complex complex53 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean55 = org.apache.commons.math3.complex.Complex.equals(complex46, complex53, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex56 = complex34.add(complex53);
        org.apache.commons.math3.complex.Complex complex57 = complex32.multiply(complex56);
        java.lang.Class<?> wildcardClass58 = complex56.getClass();
        org.apache.commons.math3.complex.Complex complex60 = complex56.divide((double) '#');
        org.apache.commons.math3.complex.Complex complex61 = complex56.sinh();
        org.apache.commons.math3.complex.Complex complex62 = complex22.add(complex61);
        org.apache.commons.math3.complex.Complex complex63 = complex22.sqrt();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + (-1.0d) + "'", double37 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-1.0d) + "'", double40 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + str44 + "' != '" + "(-1.0, 0.0)" + "'", str44.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-1.0d) + "'", double47 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-1.0d) + "'", double50 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
    }

    @Test
    public void test414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test414");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex((-1.2246467991473532E-16d), (double) (short) -1);
    }

    @Test
    public void test415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test415");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math3.complex.Complex complex6 = complex4.tanh();
        boolean boolean8 = complex6.equals((java.lang.Object) true);
        double double9 = complex6.getImaginary();
        org.apache.commons.math3.complex.Complex complex10 = complex6.sinh();
        org.apache.commons.math3.complex.Complex complex12 = complex6.multiply(0.0d);
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex1, complex6);
        org.apache.commons.math3.complex.Complex complex15 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math3.complex.Complex complex17 = complex15.sqrt1z();
        org.apache.commons.math3.complex.Complex complex18 = complex6.subtract(complex15);
        org.apache.commons.math3.complex.Complex complex19 = complex18.reciprocal();
        org.apache.commons.math3.complex.Complex complex20 = complex19.acos();
        double double21 = complex20.getArgument();
        org.apache.commons.math3.complex.Complex complex22 = complex20.atan();
        org.apache.commons.math3.complex.Complex complex23 = complex22.tanh();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertEquals((double) double21, Double.NaN, 0);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
    }

    @Test
    public void test416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test416");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        org.apache.commons.math3.complex.Complex complex7 = new org.apache.commons.math3.complex.Complex((double) (short) 0);
        org.apache.commons.math3.complex.Complex complex8 = complex3.divide(complex7);
        org.apache.commons.math3.complex.ComplexField complexField9 = complex8.getField();
        org.apache.commons.math3.complex.Complex complex11 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex12 = complex11.sqrt();
        org.apache.commons.math3.complex.Complex complex13 = complex11.tanh();
        double double14 = complex11.getImaginary();
        org.apache.commons.math3.complex.Complex complex15 = complex11.tanh();
        org.apache.commons.math3.complex.Complex complex16 = complex8.divide(complex15);
        org.apache.commons.math3.complex.Complex complex17 = complex15.sqrt1z();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complexField9);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
    }

    @Test
    public void test417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test417");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        double double11 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex12 = complex3.exp();
        double double13 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex16 = org.apache.commons.math3.complex.Complex.valueOf(100.0d, (double) (short) 0);
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double19 = complex18.getReal();
        org.apache.commons.math3.complex.Complex complex21 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double22 = complex21.getReal();
        boolean boolean23 = org.apache.commons.math3.complex.Complex.equals(complex18, complex21);
        org.apache.commons.math3.complex.Complex complex24 = complex21.sqrt();
        org.apache.commons.math3.complex.Complex complex26 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math3.complex.Complex complex28 = complex26.tanh();
        boolean boolean30 = complex28.equals((java.lang.Object) true);
        double double31 = complex28.getImaginary();
        org.apache.commons.math3.complex.Complex complex32 = complex28.sinh();
        org.apache.commons.math3.complex.Complex complex33 = complex28.cosh();
        double double34 = complex28.getImaginary();
        org.apache.commons.math3.complex.Complex complex35 = complex21.add(complex28);
        org.apache.commons.math3.complex.Complex complex36 = complex16.add(complex28);
        org.apache.commons.math3.complex.Complex complex38 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math3.complex.Complex complex40 = complex38.tanh();
        boolean boolean42 = complex40.equals((java.lang.Object) true);
        double double43 = complex40.getImaginary();
        org.apache.commons.math3.complex.Complex complex44 = complex40.sinh();
        org.apache.commons.math3.complex.Complex complex45 = complex36.multiply(complex44);
        boolean boolean46 = org.apache.commons.math3.complex.Complex.equals(complex3, complex45);
        double double47 = complex45.getImaginary();
        double double48 = complex45.getReal();
        try {
            java.util.List<org.apache.commons.math3.complex.Complex> complexList50 = complex45.nthRoot((-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotPositiveException; message: cannot compute nth root for null or negative n: -1");
        } catch (org.apache.commons.math3.exception.NotPositiveException e) {
        }
    }

    @Test
    public void test418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test418");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex((double) (short) 100, (double) (short) -1);
        org.apache.commons.math3.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math3.complex.Complex complex5 = complex3.multiply((int) (short) -1);
        java.lang.Class<?> wildcardClass6 = complex5.getClass();
        org.apache.commons.math3.complex.Complex complex7 = complex5.sqrt();
        double double8 = complex5.getArgument();
        org.apache.commons.math3.complex.Complex complex9 = complex5.cos();
        java.util.List<org.apache.commons.math3.complex.Complex> complexList11 = complex9.nthRoot((int) (byte) 1);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.136592820246461d + "'", double8 == 3.136592820246461d);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complexList11);
    }

    @Test
    public void test419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test419");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex8 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex9 = complex8.sqrt();
        org.apache.commons.math3.complex.Complex complex10 = complex8.tanh();
        boolean boolean12 = complex10.equals((java.lang.Object) true);
        double double13 = complex10.getImaginary();
        org.apache.commons.math3.complex.Complex complex14 = complex10.sinh();
        org.apache.commons.math3.complex.Complex complex15 = complex10.cosh();
        double double16 = complex10.getImaginary();
        org.apache.commons.math3.complex.Complex complex17 = complex3.pow(complex10);
        org.apache.commons.math3.complex.Complex complex18 = complex10.exp();
        org.apache.commons.math3.complex.Complex complex20 = complex10.multiply((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex22 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math3.complex.Complex complex24 = complex22.tanh();
        boolean boolean26 = complex24.equals((java.lang.Object) true);
        double double27 = complex24.getImaginary();
        org.apache.commons.math3.complex.Complex complex29 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double30 = complex29.getReal();
        org.apache.commons.math3.complex.Complex complex32 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double33 = complex32.getReal();
        boolean boolean34 = org.apache.commons.math3.complex.Complex.equals(complex29, complex32);
        org.apache.commons.math3.complex.Complex complex36 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean38 = org.apache.commons.math3.complex.Complex.equals(complex29, complex36, 10);
        org.apache.commons.math3.complex.Complex complex40 = complex36.pow((double) (byte) 1);
        boolean boolean42 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex24, complex36, (double) (-1));
        org.apache.commons.math3.complex.Complex complex43 = complex24.sqrt();
        org.apache.commons.math3.complex.Complex complex44 = complex24.cosh();
        double double45 = complex44.getArgument();
        org.apache.commons.math3.complex.Complex complex46 = complex44.sin();
        org.apache.commons.math3.complex.Complex complex47 = complex20.multiply(complex46);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1.0d) + "'", double30 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-1.0d) + "'", double33 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
    }

    @Test
    public void test420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test420");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf(10.0d, (double) 100.0f);
        org.apache.commons.math3.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math3.complex.Complex complex5 = complex3.multiply(1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex5);
    }

    @Test
    public void test421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test421");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex((double) (short) 100, (double) (short) -1);
        org.apache.commons.math3.complex.Complex complex3 = complex2.tan();
        double double4 = complex3.abs();
        double double5 = complex3.getArgument();
        org.apache.commons.math3.complex.Complex complex6 = complex3.reciprocal();
        org.apache.commons.math3.complex.ComplexField complexField7 = complex6.getField();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.8778963166742729d + "'", double4 == 0.8778963166742729d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.8070843896616986d) + "'", double5 == (-1.8070843896616986d));
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complexField7);
    }

    @Test
    public void test422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test422");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math3.complex.Complex complex4 = complex1.asin();
        org.apache.commons.math3.complex.Complex complex5 = complex4.tan();
        org.apache.commons.math3.complex.Complex complex7 = complex5.divide((double) 10);
        org.apache.commons.math3.complex.Complex complex10 = org.apache.commons.math3.complex.Complex.valueOf((double) 10.0f, (double) (-1));
        org.apache.commons.math3.complex.Complex complex12 = complex10.add((double) 'a');
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex7, complex10);
        org.apache.commons.math3.complex.Complex complex15 = complex10.subtract(0.0d);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(complex15);
    }

    @Test
    public void test423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test423");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex9 = new org.apache.commons.math3.complex.Complex(100.0d, (double) (short) 100);
        org.apache.commons.math3.complex.Complex complex11 = complex9.multiply((double) 100);
        org.apache.commons.math3.complex.Complex complex12 = complex11.tanh();
        org.apache.commons.math3.complex.Complex complex13 = complex1.add(complex11);
        org.apache.commons.math3.complex.Complex complex14 = complex1.sqrt1z();
        org.apache.commons.math3.complex.Complex complex16 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex17 = complex16.sqrt();
        org.apache.commons.math3.complex.Complex complex18 = complex16.tanh();
        org.apache.commons.math3.complex.Complex complex19 = complex18.sin();
        org.apache.commons.math3.complex.Complex complex21 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex22 = complex21.sqrt();
        boolean boolean24 = org.apache.commons.math3.complex.Complex.equals(complex18, complex21, (int) (byte) -1);
        org.apache.commons.math3.complex.Complex complex25 = complex18.cosh();
        org.apache.commons.math3.complex.Complex complex27 = complex25.multiply(10);
        org.apache.commons.math3.complex.Complex complex28 = complex25.sin();
        org.apache.commons.math3.complex.Complex complex29 = complex1.divide(complex28);
        org.apache.commons.math3.complex.Complex complex31 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double32 = complex31.getReal();
        double double33 = complex31.getReal();
        org.apache.commons.math3.complex.Complex complex34 = complex31.tan();
        org.apache.commons.math3.complex.Complex complex35 = complex31.exp();
        org.apache.commons.math3.complex.Complex complex37 = complex31.multiply((double) 10);
        org.apache.commons.math3.complex.Complex complex39 = complex31.multiply((int) (short) 100);
        org.apache.commons.math3.complex.Complex complex41 = complex31.add(32.0d);
        boolean boolean43 = org.apache.commons.math3.complex.Complex.equals(complex28, complex41, (int) (short) 0);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-1.0d) + "'", double32 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-1.0d) + "'", double33 == (-1.0d));
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test424");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math3.complex.Complex complex6 = complex4.tanh();
        boolean boolean8 = complex6.equals((java.lang.Object) true);
        double double9 = complex6.getImaginary();
        org.apache.commons.math3.complex.Complex complex10 = complex6.sinh();
        org.apache.commons.math3.complex.Complex complex12 = complex6.multiply(0.0d);
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex1, complex6);
        double double14 = complex1.getImaginary();
        org.apache.commons.math3.complex.Complex complex17 = org.apache.commons.math3.complex.Complex.valueOf((double) 1L, (double) ' ');
        boolean boolean19 = org.apache.commons.math3.complex.Complex.equals(complex1, complex17, 0);
        org.apache.commons.math3.complex.Complex complex20 = complex17.acos();
        org.apache.commons.math3.complex.Complex complex21 = complex20.reciprocal();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
    }

    @Test
    public void test425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test425");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex9 = new org.apache.commons.math3.complex.Complex(100.0d, (double) (short) 100);
        org.apache.commons.math3.complex.Complex complex11 = complex9.multiply((double) 100);
        org.apache.commons.math3.complex.Complex complex12 = complex11.tanh();
        org.apache.commons.math3.complex.Complex complex13 = complex1.add(complex11);
        double double14 = complex11.getArgument();
        org.apache.commons.math3.complex.Complex complex16 = complex11.divide(0.03125d);
        org.apache.commons.math3.complex.Complex complex17 = complex16.reciprocal();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.7853981633974483d + "'", double14 == 0.7853981633974483d);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
    }

    @Test
    public void test426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test426");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex9 = complex3.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        boolean boolean20 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex11, complex13, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex21 = complex11.log();
        org.apache.commons.math3.complex.Complex complex23 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double24 = complex23.getReal();
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double27 = complex26.getReal();
        boolean boolean28 = org.apache.commons.math3.complex.Complex.equals(complex23, complex26);
        org.apache.commons.math3.complex.Complex complex30 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean32 = org.apache.commons.math3.complex.Complex.equals(complex23, complex30, 10);
        org.apache.commons.math3.complex.Complex complex34 = complex30.pow((double) (byte) 1);
        boolean boolean35 = org.apache.commons.math3.complex.Complex.equals(complex11, complex34);
        org.apache.commons.math3.complex.Complex complex36 = complex11.reciprocal();
        boolean boolean38 = org.apache.commons.math3.complex.Complex.equals(complex9, complex11, (double) (byte) 1);
        org.apache.commons.math3.complex.Complex complex39 = complex9.conjugate();
        org.apache.commons.math3.complex.ComplexField complexField40 = complex9.getField();
        org.apache.commons.math3.complex.Complex complex41 = complex9.asin();
        double double42 = complex41.getArgument();
        org.apache.commons.math3.complex.Complex complex43 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex45 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math3.complex.Complex complex47 = complex45.tanh();
        org.apache.commons.math3.complex.Complex complex48 = complex47.acos();
        org.apache.commons.math3.complex.ComplexField complexField49 = complex48.getField();
        boolean boolean51 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex43, complex48, (double) 10L);
        org.apache.commons.math3.complex.Complex complex52 = complex41.divide(complex48);
        org.apache.commons.math3.complex.Complex complex54 = complex41.multiply(100.0d);
        org.apache.commons.math3.complex.Complex complex55 = complex54.atan();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1.0d) + "'", double24 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1.0d) + "'", double27 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complexField40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + (-0.0d) + "'", double42 == (-0.0d));
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complexField49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
    }

    @Test
    public void test427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test427");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex8 = complex3.cosh();
        org.apache.commons.math3.complex.ComplexField complexField9 = complex8.getField();
        boolean boolean10 = complex8.isNaN();
        java.lang.String str11 = complex8.toString();
        org.apache.commons.math3.complex.Complex complex12 = complex8.sinh();
        org.apache.commons.math3.complex.Complex complex13 = complex8.log();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complexField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "(1.0, 0.0)" + "'", str11.equals("(1.0, 0.0)"));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
    }

    @Test
    public void test428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test428");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        double double3 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = complex1.tan();
        org.apache.commons.math3.complex.Complex complex5 = complex1.exp();
        org.apache.commons.math3.complex.Complex complex6 = complex5.negate();
        org.apache.commons.math3.complex.Complex complex7 = complex6.asin();
        org.apache.commons.math3.complex.Complex complex9 = complex6.multiply((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
    }

    @Test
    public void test429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test429");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = complex1.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex5 = complex1.log();
        org.apache.commons.math3.complex.Complex complex6 = complex5.reciprocal();
        org.apache.commons.math3.complex.Complex complex7 = complex6.acos();
        org.apache.commons.math3.complex.Complex complex9 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math3.complex.Complex complex11 = complex9.tanh();
        boolean boolean13 = complex11.equals((java.lang.Object) true);
        double double14 = complex11.getImaginary();
        org.apache.commons.math3.complex.Complex complex15 = complex11.sinh();
        org.apache.commons.math3.complex.Complex complex16 = complex11.cosh();
        double double17 = complex11.getImaginary();
        double double18 = complex11.abs();
        org.apache.commons.math3.complex.Complex complex20 = complex11.multiply((-1));
        org.apache.commons.math3.complex.Complex complex21 = complex7.pow(complex11);
        org.apache.commons.math3.complex.Complex complex22 = complex11.reciprocal();
        org.apache.commons.math3.complex.Complex complex23 = complex11.asin();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
    }

    @Test
    public void test430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test430");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex9 = complex3.multiply(0.0d);
        double double10 = complex9.getArgument();
        org.apache.commons.math3.complex.Complex complex12 = complex9.subtract(1.5707963267948968d);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(complex12);
    }

    @Test
    public void test431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test431");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex11 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex12 = complex11.asin();
        org.apache.commons.math3.complex.Complex complex13 = complex11.tanh();
        org.apache.commons.math3.complex.Complex complex14 = complex13.sin();
        boolean boolean15 = complex3.equals((java.lang.Object) complex13);
        org.apache.commons.math3.complex.Complex complex17 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double18 = complex17.getReal();
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double21 = complex20.getReal();
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex17, complex20);
        org.apache.commons.math3.complex.Complex complex24 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean26 = org.apache.commons.math3.complex.Complex.equals(complex17, complex24, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (short) 10);
        double double29 = complex28.getReal();
        boolean boolean30 = complex17.equals((java.lang.Object) complex28);
        org.apache.commons.math3.complex.Complex complex32 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double33 = complex32.getReal();
        double double34 = complex32.getReal();
        boolean boolean35 = complex17.equals((java.lang.Object) complex32);
        org.apache.commons.math3.complex.Complex complex36 = complex3.pow(complex32);
        org.apache.commons.math3.complex.Complex complex37 = complex32.sinh();
        org.apache.commons.math3.complex.Complex complex39 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math3.complex.Complex complex41 = complex39.tanh();
        boolean boolean43 = complex41.equals((java.lang.Object) true);
        double double44 = complex41.getImaginary();
        org.apache.commons.math3.complex.Complex complex46 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double47 = complex46.getReal();
        org.apache.commons.math3.complex.Complex complex49 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double50 = complex49.getReal();
        boolean boolean51 = org.apache.commons.math3.complex.Complex.equals(complex46, complex49);
        org.apache.commons.math3.complex.Complex complex53 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean55 = org.apache.commons.math3.complex.Complex.equals(complex46, complex53, 10);
        org.apache.commons.math3.complex.Complex complex57 = complex53.pow((double) (byte) 1);
        boolean boolean59 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex41, complex53, (double) (-1));
        org.apache.commons.math3.complex.Complex complex60 = complex53.sin();
        org.apache.commons.math3.complex.Complex complex62 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex64 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double65 = complex64.getReal();
        org.apache.commons.math3.complex.Complex complex67 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double68 = complex67.getReal();
        boolean boolean69 = org.apache.commons.math3.complex.Complex.equals(complex64, complex67);
        boolean boolean71 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex62, complex64, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex72 = complex62.log();
        org.apache.commons.math3.complex.Complex complex73 = complex72.exp();
        boolean boolean74 = complex73.isInfinite();
        org.apache.commons.math3.complex.Complex complex75 = complex60.multiply(complex73);
        double double76 = complex75.getReal();
        boolean boolean77 = org.apache.commons.math3.complex.Complex.equals(complex37, complex75);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.0d) + "'", double18 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1.0d) + "'", double21 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-1.0d) + "'", double33 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-1.0d) + "'", double47 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-1.0d) + "'", double50 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + (-1.0d) + "'", double65 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-1.0d) + "'", double68 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.8414709848078965d + "'", double76 == 0.8414709848078965d);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test432");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        java.lang.String str11 = complex1.toString();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex23 = complex1.add(complex20);
        java.lang.String str24 = complex20.toString();
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex27 = complex20.divide(complex26);
        org.apache.commons.math3.complex.Complex complex28 = complex20.tanh();
        org.apache.commons.math3.complex.Complex complex29 = complex20.tan();
        org.apache.commons.math3.complex.Complex complex31 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex32 = complex31.cos();
        boolean boolean34 = org.apache.commons.math3.complex.Complex.equals(complex20, complex31, (-1.557407724654902d));
        org.apache.commons.math3.complex.Complex complex35 = complex20.sqrt1z();
        org.apache.commons.math3.complex.Complex complex37 = complex35.add((double) (short) 100);
        org.apache.commons.math3.complex.Complex complex38 = complex35.negate();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "(-1.0, 0.0)" + "'", str11.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "(-1.0, 0.0)" + "'", str24.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
    }

    @Test
    public void test433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test433");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = complex1.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex5 = complex1.log();
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) 10, (-2.0d));
        org.apache.commons.math3.complex.Complex complex9 = complex5.subtract(complex8);
        org.apache.commons.math3.complex.Complex complex10 = complex5.sqrt1z();
        org.apache.commons.math3.complex.Complex complex11 = complex5.sqrt();
        org.apache.commons.math3.complex.Complex complex13 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math3.complex.Complex complex15 = complex13.sqrt1z();
        org.apache.commons.math3.complex.Complex complex16 = complex15.reciprocal();
        org.apache.commons.math3.complex.Complex complex17 = complex11.multiply(complex16);
        double double18 = complex11.abs();
        org.apache.commons.math3.complex.Complex complex19 = complex11.log();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.772453850905516d + "'", double18 == 1.772453850905516d);
        org.junit.Assert.assertNotNull(complex19);
    }

    @Test
    public void test434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test434");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex11 = complex1.log();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, 10);
        org.apache.commons.math3.complex.Complex complex24 = complex20.pow((double) (byte) 1);
        boolean boolean25 = org.apache.commons.math3.complex.Complex.equals(complex1, complex24);
        org.apache.commons.math3.complex.Complex complex26 = complex1.reciprocal();
        org.apache.commons.math3.complex.Complex complex27 = complex1.cosh();
        org.apache.commons.math3.complex.Complex complex28 = complex1.acos();
        org.apache.commons.math3.complex.Complex complex29 = complex1.sinh();
        double double30 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex31 = complex1.reciprocal();
        org.apache.commons.math3.complex.Complex complex33 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex35 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double36 = complex35.getReal();
        org.apache.commons.math3.complex.Complex complex38 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double39 = complex38.getReal();
        boolean boolean40 = org.apache.commons.math3.complex.Complex.equals(complex35, complex38);
        boolean boolean42 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex33, complex35, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex43 = complex33.log();
        org.apache.commons.math3.complex.Complex complex45 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double46 = complex45.getReal();
        org.apache.commons.math3.complex.Complex complex48 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double49 = complex48.getReal();
        boolean boolean50 = org.apache.commons.math3.complex.Complex.equals(complex45, complex48);
        org.apache.commons.math3.complex.Complex complex52 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean54 = org.apache.commons.math3.complex.Complex.equals(complex45, complex52, 10);
        org.apache.commons.math3.complex.Complex complex56 = complex52.pow((double) (byte) 1);
        boolean boolean57 = org.apache.commons.math3.complex.Complex.equals(complex33, complex56);
        org.apache.commons.math3.complex.Complex complex58 = complex33.reciprocal();
        org.apache.commons.math3.complex.Complex complex59 = complex33.cosh();
        org.apache.commons.math3.complex.Complex complex61 = complex33.multiply(Double.NaN);
        org.apache.commons.math3.complex.Complex complex63 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex65 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double66 = complex65.getReal();
        org.apache.commons.math3.complex.Complex complex68 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double69 = complex68.getReal();
        boolean boolean70 = org.apache.commons.math3.complex.Complex.equals(complex65, complex68);
        boolean boolean72 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex63, complex65, (double) 0.0f);
        double double73 = complex65.getReal();
        org.apache.commons.math3.complex.Complex complex74 = complex65.exp();
        java.lang.Class<?> wildcardClass75 = complex65.getClass();
        org.apache.commons.math3.complex.Complex complex76 = complex33.subtract(complex65);
        org.apache.commons.math3.complex.Complex complex77 = complex1.divide(complex65);
        org.apache.commons.math3.complex.Complex complex78 = complex77.acos();
        org.apache.commons.math3.complex.Complex complex80 = complex78.add(0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1.0d) + "'", double30 == (-1.0d));
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-1.0d) + "'", double36 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-1.0d) + "'", double39 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1.0d) + "'", double46 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-1.0d) + "'", double49 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + (-1.0d) + "'", double66 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + (-1.0d) + "'", double69 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + (-1.0d) + "'", double73 == (-1.0d));
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex80);
    }

    @Test
    public void test435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test435");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math3.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math3.complex.Complex complex6 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex7 = complex6.sqrt();
        boolean boolean9 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6, (int) (byte) -1);
        org.apache.commons.math3.complex.Complex complex10 = complex3.conjugate();
        org.apache.commons.math3.complex.Complex complex11 = complex10.asin();
        org.apache.commons.math3.complex.Complex complex13 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex14 = complex13.conjugate();
        org.apache.commons.math3.complex.Complex complex15 = complex14.sin();
        org.apache.commons.math3.complex.Complex complex16 = complex11.add(complex14);
        double double17 = complex16.getReal();
        org.apache.commons.math3.complex.Complex complex18 = complex16.tanh();
        try {
            java.util.List<org.apache.commons.math3.complex.Complex> complexList20 = complex16.nthRoot((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotPositiveException; message: cannot compute nth root for null or negative n: -1");
        } catch (org.apache.commons.math3.exception.NotPositiveException e) {
        }
    }

    @Test
    public void test436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test436");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex(0.0d, (-0.03125d));
        org.apache.commons.math3.complex.Complex complex3 = complex2.acos();
        org.apache.commons.math3.complex.Complex complex5 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double6 = complex5.getReal();
        org.apache.commons.math3.complex.Complex complex8 = complex5.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex9 = complex5.log();
        org.apache.commons.math3.complex.Complex complex12 = new org.apache.commons.math3.complex.Complex((double) (byte) 10, (-2.0d));
        org.apache.commons.math3.complex.Complex complex13 = complex9.subtract(complex12);
        org.apache.commons.math3.complex.Complex complex15 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex16 = complex15.cos();
        org.apache.commons.math3.complex.Complex complex17 = complex16.exp();
        org.apache.commons.math3.complex.Complex complex18 = complex16.reciprocal();
        boolean boolean19 = org.apache.commons.math3.complex.Complex.equals(complex9, complex16);
        org.apache.commons.math3.complex.Complex complex20 = complex9.cos();
        org.apache.commons.math3.complex.Complex complex21 = complex20.sinh();
        java.lang.Class<?> wildcardClass22 = complex20.getClass();
        boolean boolean24 = org.apache.commons.math3.complex.Complex.equals(complex2, complex20, (int) (short) 1);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.0d) + "'", double6 == (-1.0d));
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test437");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex12 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double13 = complex12.getReal();
        org.apache.commons.math3.complex.Complex complex15 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math3.complex.Complex complex17 = complex15.tanh();
        boolean boolean19 = complex17.equals((java.lang.Object) true);
        double double20 = complex17.getImaginary();
        org.apache.commons.math3.complex.Complex complex21 = complex17.sinh();
        org.apache.commons.math3.complex.Complex complex23 = complex17.multiply(0.0d);
        boolean boolean24 = org.apache.commons.math3.complex.Complex.equals(complex12, complex17);
        org.apache.commons.math3.complex.Complex complex26 = complex12.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex28 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math3.complex.Complex complex30 = complex28.tanh();
        boolean boolean32 = complex30.equals((java.lang.Object) true);
        double double33 = complex30.getImaginary();
        org.apache.commons.math3.complex.Complex complex34 = complex26.add(complex30);
        boolean boolean36 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex3, complex34, (double) 10);
        org.apache.commons.math3.complex.Complex complex38 = complex34.pow(0.0d);
        org.apache.commons.math3.complex.Complex complex40 = complex34.add(Double.NaN);
        java.lang.Class<?> wildcardClass41 = complex34.getClass();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1.0d) + "'", double13 == (-1.0d));
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test438");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equals(complex1, complex8, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex11 = complex8.sin();
        org.apache.commons.math3.complex.Complex complex12 = complex11.log();
        org.apache.commons.math3.complex.Complex complex14 = complex11.subtract(1.5707962824734947d);
        org.apache.commons.math3.complex.Complex complex15 = complex11.conjugate();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
    }

    @Test
    public void test439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test439");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf(100.0d, (double) (short) 0);
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        org.apache.commons.math3.complex.Complex complex7 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double8 = complex7.getReal();
        boolean boolean9 = org.apache.commons.math3.complex.Complex.equals(complex4, complex7);
        org.apache.commons.math3.complex.Complex complex10 = complex7.sqrt();
        org.apache.commons.math3.complex.Complex complex12 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math3.complex.Complex complex14 = complex12.tanh();
        boolean boolean16 = complex14.equals((java.lang.Object) true);
        double double17 = complex14.getImaginary();
        org.apache.commons.math3.complex.Complex complex18 = complex14.sinh();
        org.apache.commons.math3.complex.Complex complex19 = complex14.cosh();
        double double20 = complex14.getImaginary();
        org.apache.commons.math3.complex.Complex complex21 = complex7.add(complex14);
        org.apache.commons.math3.complex.Complex complex22 = complex2.add(complex14);
        java.lang.String str23 = complex14.toString();
        org.apache.commons.math3.complex.Complex complex24 = complex14.cos();
        org.apache.commons.math3.complex.Complex complex26 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math3.complex.Complex complex28 = complex26.tanh();
        org.apache.commons.math3.complex.Complex complex29 = complex28.sin();
        org.apache.commons.math3.complex.Complex complex30 = complex28.log();
        org.apache.commons.math3.complex.Complex complex32 = complex28.pow((-1.9643867237284715E-15d));
        boolean boolean34 = org.apache.commons.math3.complex.Complex.equals(complex14, complex32, 14142.842748188923d);
        org.apache.commons.math3.complex.Complex complex36 = complex32.pow(14142.842748188923d);
        org.apache.commons.math3.complex.Complex complex38 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex40 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double41 = complex40.getReal();
        org.apache.commons.math3.complex.Complex complex43 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double44 = complex43.getReal();
        boolean boolean45 = org.apache.commons.math3.complex.Complex.equals(complex40, complex43);
        boolean boolean47 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex38, complex40, (double) 0.0f);
        java.lang.String str48 = complex38.toString();
        org.apache.commons.math3.complex.Complex complex50 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double51 = complex50.getReal();
        org.apache.commons.math3.complex.Complex complex53 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double54 = complex53.getReal();
        boolean boolean55 = org.apache.commons.math3.complex.Complex.equals(complex50, complex53);
        org.apache.commons.math3.complex.Complex complex57 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean59 = org.apache.commons.math3.complex.Complex.equals(complex50, complex57, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex60 = complex38.add(complex57);
        java.lang.String str61 = complex57.toString();
        org.apache.commons.math3.complex.Complex complex63 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex64 = complex57.divide(complex63);
        double double65 = complex64.getImaginary();
        org.apache.commons.math3.complex.Complex complex66 = complex36.multiply(complex64);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "(0.0, 0.0)" + "'", str23.equals("(0.0, 0.0)"));
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-1.0d) + "'", double41 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1.0d) + "'", double44 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "(-1.0, 0.0)" + "'", str48.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-1.0d) + "'", double51 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1.0d) + "'", double54 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + str61 + "' != '" + "(-1.0, 0.0)" + "'", str61.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + (-0.0d) + "'", double65 == (-0.0d));
        org.junit.Assert.assertNotNull(complex66);
    }

    @Test
    public void test440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test440");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        double double11 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex12 = complex3.exp();
        double double13 = complex3.getImaginary();
        double double14 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex15 = complex3.cosh();
        org.apache.commons.math3.complex.Complex complex16 = complex3.sqrt();
        org.apache.commons.math3.complex.Complex complex17 = complex16.log();
        org.apache.commons.math3.complex.Complex complex19 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double20 = complex19.getReal();
        org.apache.commons.math3.complex.Complex complex22 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double23 = complex22.getReal();
        boolean boolean24 = org.apache.commons.math3.complex.Complex.equals(complex19, complex22);
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean28 = org.apache.commons.math3.complex.Complex.equals(complex19, complex26, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex30 = new org.apache.commons.math3.complex.Complex((-1.557407724654902d));
        org.apache.commons.math3.complex.Complex complex31 = complex19.multiply(complex30);
        org.apache.commons.math3.complex.Complex complex32 = complex30.exp();
        boolean boolean34 = org.apache.commons.math3.complex.Complex.equals(complex17, complex32, (double) ' ');
        org.apache.commons.math3.complex.Complex complex35 = complex32.sqrt1z();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-1.0d) + "'", double11 == (-1.0d));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1.0d) + "'", double20 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-1.0d) + "'", double23 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(complex35);
    }

    @Test
    public void test441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test441");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex(1.772453850905516d);
        org.apache.commons.math3.complex.Complex complex3 = complex1.pow((double) 10);
        org.junit.Assert.assertNotNull(complex3);
    }

    @Test
    public void test442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test442");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.cos();
        org.apache.commons.math3.complex.Complex complex4 = complex2.subtract(1.0d);
        org.apache.commons.math3.complex.Complex complex6 = complex2.subtract((double) 0);
        org.apache.commons.math3.complex.Complex complex7 = complex2.cosh();
        org.apache.commons.math3.complex.Complex complex8 = complex2.tanh();
        org.apache.commons.math3.complex.Complex complex10 = complex2.subtract((-1.8070843896616986d));
        org.apache.commons.math3.complex.Complex complex11 = complex2.cos();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
    }

    @Test
    public void test443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test443");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex9 = complex3.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double15 = complex14.getReal();
        boolean boolean16 = org.apache.commons.math3.complex.Complex.equals(complex11, complex14);
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean20 = org.apache.commons.math3.complex.Complex.equals(complex11, complex18, 10);
        org.apache.commons.math3.complex.Complex complex22 = complex18.pow((double) (byte) 1);
        boolean boolean24 = org.apache.commons.math3.complex.Complex.equals(complex3, complex22, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex25 = org.apache.commons.math3.complex.Complex.ZERO;
        org.apache.commons.math3.complex.Complex complex26 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex27 = complex26.asin();
        org.apache.commons.math3.complex.Complex complex28 = complex25.divide(complex27);
        org.apache.commons.math3.complex.Complex complex30 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex31 = complex30.sqrt();
        org.apache.commons.math3.complex.Complex complex32 = complex30.tanh();
        boolean boolean34 = complex32.equals((java.lang.Object) true);
        double double35 = complex32.getImaginary();
        org.apache.commons.math3.complex.Complex complex36 = complex32.sinh();
        org.apache.commons.math3.complex.Complex complex38 = complex32.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex40 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex42 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double43 = complex42.getReal();
        org.apache.commons.math3.complex.Complex complex45 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double46 = complex45.getReal();
        boolean boolean47 = org.apache.commons.math3.complex.Complex.equals(complex42, complex45);
        boolean boolean49 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex40, complex42, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex51 = complex42.multiply(1);
        org.apache.commons.math3.complex.Complex complex52 = complex42.conjugate();
        boolean boolean54 = org.apache.commons.math3.complex.Complex.equals(complex38, complex42, (int) (short) 100);
        org.apache.commons.math3.complex.Complex complex56 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math3.complex.Complex complex58 = complex56.tanh();
        double double59 = complex58.abs();
        org.apache.commons.math3.complex.Complex complex60 = complex58.exp();
        org.apache.commons.math3.complex.Complex complex61 = complex60.negate();
        org.apache.commons.math3.complex.Complex complex62 = complex60.sin();
        org.apache.commons.math3.complex.Complex complex63 = complex38.subtract(complex62);
        org.apache.commons.math3.complex.Complex complex65 = complex62.divide(0.0d);
        org.apache.commons.math3.complex.Complex complex66 = complex62.cosh();
        org.apache.commons.math3.complex.Complex complex67 = complex27.divide(complex66);
        boolean boolean69 = org.apache.commons.math3.complex.Complex.equals(complex22, complex67, (int) '4');
        org.apache.commons.math3.complex.Complex complex70 = complex67.sqrt1z();
        org.apache.commons.math3.complex.Complex complex71 = complex70.cos();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-1.0d) + "'", double43 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1.0d) + "'", double46 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
    }

    @Test
    public void test444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test444");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex(1.3754263876807227d);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = complex3.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double9 = complex8.getReal();
        org.apache.commons.math3.complex.Complex complex10 = complex6.divide(complex8);
        org.apache.commons.math3.complex.Complex complex12 = complex10.multiply(10.0d);
        org.apache.commons.math3.complex.ComplexField complexField13 = complex12.getField();
        org.apache.commons.math3.complex.Complex complex14 = complex12.tanh();
        org.apache.commons.math3.complex.Complex complex16 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex17 = complex16.sqrt();
        org.apache.commons.math3.complex.Complex complex18 = complex16.tanh();
        boolean boolean20 = complex18.equals((java.lang.Object) true);
        double double21 = complex18.getImaginary();
        org.apache.commons.math3.complex.Complex complex22 = complex18.sinh();
        org.apache.commons.math3.complex.Complex complex23 = complex18.sinh();
        org.apache.commons.math3.complex.Complex complex25 = complex18.multiply((-2.0d));
        org.apache.commons.math3.complex.Complex complex26 = complex18.atan();
        org.apache.commons.math3.complex.Complex complex29 = org.apache.commons.math3.complex.Complex.valueOf((double) 100.0f, 0.7853981633974483d);
        boolean boolean31 = org.apache.commons.math3.complex.Complex.equals(complex26, complex29, (int) '4');
        java.util.List<org.apache.commons.math3.complex.Complex> complexList33 = complex29.nthRoot((int) (byte) 10);
        org.apache.commons.math3.complex.Complex complex34 = complex12.add(complex29);
        boolean boolean36 = org.apache.commons.math3.complex.Complex.equals(complex1, complex29, (int) (byte) 1);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complexField13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(complexList33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test445");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math3.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math3.complex.Complex complex6 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex7 = complex6.sqrt();
        boolean boolean9 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6, (int) (byte) -1);
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        boolean boolean20 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex11, complex13, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex22 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex24 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double25 = complex24.getReal();
        org.apache.commons.math3.complex.Complex complex27 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double28 = complex27.getReal();
        boolean boolean29 = org.apache.commons.math3.complex.Complex.equals(complex24, complex27);
        boolean boolean31 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex22, complex24, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex32 = complex22.log();
        org.apache.commons.math3.complex.Complex complex34 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double35 = complex34.getReal();
        org.apache.commons.math3.complex.Complex complex37 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double38 = complex37.getReal();
        boolean boolean39 = org.apache.commons.math3.complex.Complex.equals(complex34, complex37);
        org.apache.commons.math3.complex.Complex complex41 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean43 = org.apache.commons.math3.complex.Complex.equals(complex34, complex41, 10);
        org.apache.commons.math3.complex.Complex complex45 = complex41.pow((double) (byte) 1);
        boolean boolean46 = org.apache.commons.math3.complex.Complex.equals(complex22, complex45);
        boolean boolean47 = complex13.equals((java.lang.Object) complex22);
        boolean boolean49 = org.apache.commons.math3.complex.Complex.equals(complex3, complex22, (double) 'a');
        boolean boolean50 = complex3.isNaN();
        org.apache.commons.math3.complex.Complex complex52 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex54 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double55 = complex54.getReal();
        org.apache.commons.math3.complex.Complex complex57 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double58 = complex57.getReal();
        boolean boolean59 = org.apache.commons.math3.complex.Complex.equals(complex54, complex57);
        boolean boolean61 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex52, complex54, (double) 0.0f);
        double double62 = complex54.getReal();
        org.apache.commons.math3.complex.Complex complex63 = complex54.exp();
        org.apache.commons.math3.complex.Complex complex64 = complex54.tan();
        boolean boolean65 = org.apache.commons.math3.complex.Complex.equals(complex3, complex54);
        org.apache.commons.math3.complex.Complex complex66 = complex3.reciprocal();
        org.apache.commons.math3.complex.Complex complex67 = complex66.sin();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-1.0d) + "'", double28 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-1.0d) + "'", double35 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-1.0d) + "'", double38 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-1.0d) + "'", double55 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + (-1.0d) + "'", double58 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-1.0d) + "'", double62 == (-1.0d));
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
    }

    @Test
    public void test446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test446");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double9 = complex8.getReal();
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex8, complex11);
        org.apache.commons.math3.complex.Complex complex14 = complex11.sqrt();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        org.apache.commons.math3.complex.Complex complex19 = complex16.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex20 = complex14.pow(complex19);
        org.apache.commons.math3.complex.Complex complex21 = complex4.multiply(complex20);
        org.apache.commons.math3.complex.Complex complex22 = complex20.sqrt1z();
        org.apache.commons.math3.complex.Complex complex23 = complex20.log();
        org.apache.commons.math3.complex.Complex complex25 = complex20.divide((-1.9643867237284715E-15d));
        org.apache.commons.math3.complex.Complex complex26 = complex25.tanh();
        org.apache.commons.math3.complex.Complex complex27 = complex26.conjugate();
        boolean boolean28 = complex26.isNaN();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test447");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex4 = complex1.subtract((double) (short) 100);
        org.apache.commons.math3.complex.Complex complex6 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math3.complex.Complex complex8 = complex6.tanh();
        org.apache.commons.math3.complex.Complex complex9 = complex6.asin();
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equals(complex4, complex6);
        org.apache.commons.math3.complex.ComplexField complexField11 = complex6.getField();
        org.apache.commons.math3.complex.Complex complex12 = complex6.sqrt();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(complexField11);
        org.junit.Assert.assertNotNull(complex12);
    }

    @Test
    public void test448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test448");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math3.complex.Complex complex4 = complex3.sin();
        java.lang.String str5 = complex3.toString();
        org.apache.commons.math3.complex.Complex complex6 = complex3.conjugate();
        org.apache.commons.math3.complex.Complex complex8 = complex6.multiply((int) (byte) 10);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(0.0, 0.0)" + "'", str5.equals("(0.0, 0.0)"));
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex8);
    }

    @Test
    public void test449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test449");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex12 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double13 = complex12.getReal();
        org.apache.commons.math3.complex.Complex complex15 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math3.complex.Complex complex17 = complex15.tanh();
        boolean boolean19 = complex17.equals((java.lang.Object) true);
        double double20 = complex17.getImaginary();
        org.apache.commons.math3.complex.Complex complex21 = complex17.sinh();
        org.apache.commons.math3.complex.Complex complex23 = complex17.multiply(0.0d);
        boolean boolean24 = org.apache.commons.math3.complex.Complex.equals(complex12, complex17);
        org.apache.commons.math3.complex.Complex complex26 = complex12.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex28 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math3.complex.Complex complex30 = complex28.tanh();
        boolean boolean32 = complex30.equals((java.lang.Object) true);
        double double33 = complex30.getImaginary();
        org.apache.commons.math3.complex.Complex complex34 = complex26.add(complex30);
        boolean boolean36 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex3, complex34, (double) 10);
        org.apache.commons.math3.complex.Complex complex37 = complex34.exp();
        org.apache.commons.math3.complex.Complex complex38 = complex37.acos();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1.0d) + "'", double13 == (-1.0d));
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
    }

    @Test
    public void test450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test450");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (short) 10);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex3 = complex1.sinh();
        double double4 = complex3.abs();
        org.apache.commons.math3.complex.Complex complex5 = complex3.tanh();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 10.0d + "'", double2 == 10.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 11013.232874703393d + "'", double4 == 11013.232874703393d);
        org.junit.Assert.assertNotNull(complex5);
    }

    @Test
    public void test451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test451");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex(0.0d, 3.296908309475615d);
        org.apache.commons.math3.complex.Complex complex3 = complex2.atan();
        org.apache.commons.math3.complex.Complex complex4 = complex3.asin();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        org.apache.commons.math3.complex.Complex complex9 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math3.complex.Complex complex11 = complex9.tanh();
        boolean boolean13 = complex11.equals((java.lang.Object) true);
        double double14 = complex11.getImaginary();
        org.apache.commons.math3.complex.Complex complex15 = complex11.sinh();
        org.apache.commons.math3.complex.Complex complex17 = complex11.multiply(0.0d);
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex6, complex11);
        org.apache.commons.math3.complex.Complex complex20 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math3.complex.Complex complex22 = complex20.tanh();
        boolean boolean24 = complex22.equals((java.lang.Object) true);
        double double25 = complex22.getImaginary();
        org.apache.commons.math3.complex.Complex complex27 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double28 = complex27.getReal();
        org.apache.commons.math3.complex.Complex complex30 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double31 = complex30.getReal();
        boolean boolean32 = org.apache.commons.math3.complex.Complex.equals(complex27, complex30);
        org.apache.commons.math3.complex.Complex complex34 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean36 = org.apache.commons.math3.complex.Complex.equals(complex27, complex34, 10);
        org.apache.commons.math3.complex.Complex complex38 = complex34.pow((double) (byte) 1);
        boolean boolean40 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex22, complex34, (double) (-1));
        org.apache.commons.math3.complex.Complex complex41 = complex11.subtract(complex34);
        org.apache.commons.math3.complex.Complex complex42 = complex34.sqrt();
        boolean boolean43 = complex42.isNaN();
        org.apache.commons.math3.complex.Complex complex46 = new org.apache.commons.math3.complex.Complex(100.0d, (double) (short) 100);
        org.apache.commons.math3.complex.Complex complex48 = complex46.multiply((double) 100);
        org.apache.commons.math3.complex.Complex complex51 = org.apache.commons.math3.complex.Complex.valueOf(100.0d, (double) (short) 0);
        org.apache.commons.math3.complex.Complex complex53 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double54 = complex53.getReal();
        org.apache.commons.math3.complex.Complex complex56 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double57 = complex56.getReal();
        boolean boolean58 = org.apache.commons.math3.complex.Complex.equals(complex53, complex56);
        org.apache.commons.math3.complex.Complex complex59 = complex56.sqrt();
        org.apache.commons.math3.complex.Complex complex61 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex62 = complex61.sqrt();
        org.apache.commons.math3.complex.Complex complex63 = complex61.tanh();
        boolean boolean65 = complex63.equals((java.lang.Object) true);
        double double66 = complex63.getImaginary();
        org.apache.commons.math3.complex.Complex complex67 = complex63.sinh();
        org.apache.commons.math3.complex.Complex complex68 = complex63.cosh();
        double double69 = complex63.getImaginary();
        org.apache.commons.math3.complex.Complex complex70 = complex56.add(complex63);
        org.apache.commons.math3.complex.Complex complex71 = complex51.add(complex63);
        org.apache.commons.math3.complex.Complex complex73 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex74 = complex73.sqrt();
        org.apache.commons.math3.complex.Complex complex75 = complex73.tanh();
        boolean boolean77 = complex75.equals((java.lang.Object) true);
        double double78 = complex75.getImaginary();
        org.apache.commons.math3.complex.Complex complex79 = complex75.sinh();
        org.apache.commons.math3.complex.Complex complex80 = complex71.multiply(complex79);
        boolean boolean82 = org.apache.commons.math3.complex.Complex.equals(complex48, complex71, (int) '4');
        double double83 = complex71.abs();
        boolean boolean84 = complex42.equals((java.lang.Object) double83);
        boolean boolean86 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex3, complex42, (double) 1L);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-1.0d) + "'", double28 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-1.0d) + "'", double31 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1.0d) + "'", double54 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-1.0d) + "'", double57 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 100.0d + "'", double83 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test452");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf((-1.2246467991473532E-16d), 0.5403023058681398d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test453");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf((double) (byte) 10, 1.1752011936438014d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test454");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf((double) ' ', (double) ' ');
        boolean boolean3 = complex2.isInfinite();
        org.apache.commons.math3.complex.Complex complex4 = complex2.atan();
        java.lang.Class<?> wildcardClass5 = complex2.getClass();
        org.apache.commons.math3.complex.Complex complex7 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double8 = complex7.getReal();
        org.apache.commons.math3.complex.Complex complex10 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex11 = complex10.sqrt();
        org.apache.commons.math3.complex.Complex complex12 = complex10.tanh();
        boolean boolean14 = complex12.equals((java.lang.Object) true);
        double double15 = complex12.getImaginary();
        org.apache.commons.math3.complex.Complex complex16 = complex12.sinh();
        org.apache.commons.math3.complex.Complex complex18 = complex12.multiply(0.0d);
        boolean boolean19 = org.apache.commons.math3.complex.Complex.equals(complex7, complex12);
        org.apache.commons.math3.complex.Complex complex21 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math3.complex.Complex complex23 = complex21.sqrt1z();
        org.apache.commons.math3.complex.Complex complex24 = complex12.subtract(complex21);
        org.apache.commons.math3.complex.Complex complex25 = complex24.reciprocal();
        org.apache.commons.math3.complex.Complex complex26 = complex25.negate();
        org.apache.commons.math3.complex.Complex complex27 = complex26.atan();
        org.apache.commons.math3.complex.Complex complex28 = complex2.divide(complex26);
        org.apache.commons.math3.complex.Complex complex29 = complex2.sqrt1z();
        org.apache.commons.math3.complex.Complex complex30 = complex2.atan();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
    }

    @Test
    public void test455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test455");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equals(complex1, complex8, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex11 = complex8.sin();
        org.apache.commons.math3.complex.Complex complex12 = complex11.log();
        org.apache.commons.math3.complex.Complex complex14 = complex11.multiply((int) (byte) 100);
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double19 = complex18.getReal();
        org.apache.commons.math3.complex.Complex complex21 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double22 = complex21.getReal();
        boolean boolean23 = org.apache.commons.math3.complex.Complex.equals(complex18, complex21);
        boolean boolean25 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex16, complex18, (double) 0.0f);
        double double26 = complex18.getReal();
        org.apache.commons.math3.complex.Complex complex27 = complex18.exp();
        double double28 = complex18.getImaginary();
        org.apache.commons.math3.complex.Complex complex31 = org.apache.commons.math3.complex.Complex.valueOf(100.0d, (double) (short) 0);
        org.apache.commons.math3.complex.Complex complex33 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double34 = complex33.getReal();
        org.apache.commons.math3.complex.Complex complex36 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double37 = complex36.getReal();
        boolean boolean38 = org.apache.commons.math3.complex.Complex.equals(complex33, complex36);
        org.apache.commons.math3.complex.Complex complex39 = complex36.sqrt();
        org.apache.commons.math3.complex.Complex complex41 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math3.complex.Complex complex43 = complex41.tanh();
        boolean boolean45 = complex43.equals((java.lang.Object) true);
        double double46 = complex43.getImaginary();
        org.apache.commons.math3.complex.Complex complex47 = complex43.sinh();
        org.apache.commons.math3.complex.Complex complex48 = complex43.cosh();
        double double49 = complex43.getImaginary();
        org.apache.commons.math3.complex.Complex complex50 = complex36.add(complex43);
        org.apache.commons.math3.complex.Complex complex51 = complex31.add(complex43);
        org.apache.commons.math3.complex.Complex complex53 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math3.complex.Complex complex55 = complex53.tanh();
        boolean boolean57 = complex55.equals((java.lang.Object) true);
        double double58 = complex55.getImaginary();
        org.apache.commons.math3.complex.Complex complex59 = complex55.sinh();
        org.apache.commons.math3.complex.Complex complex60 = complex51.multiply(complex59);
        boolean boolean61 = org.apache.commons.math3.complex.Complex.equals(complex18, complex60);
        org.apache.commons.math3.complex.Complex complex62 = complex11.add(complex60);
        org.apache.commons.math3.complex.Complex complex63 = complex11.log();
        org.apache.commons.math3.complex.Complex complex64 = complex11.reciprocal();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.0d) + "'", double19 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-1.0d) + "'", double26 == (-1.0d));
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + (-1.0d) + "'", double37 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
    }

    @Test
    public void test456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test456");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex9 = complex3.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        boolean boolean20 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex11, complex13, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex21 = complex11.log();
        org.apache.commons.math3.complex.Complex complex23 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double24 = complex23.getReal();
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double27 = complex26.getReal();
        boolean boolean28 = org.apache.commons.math3.complex.Complex.equals(complex23, complex26);
        org.apache.commons.math3.complex.Complex complex30 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean32 = org.apache.commons.math3.complex.Complex.equals(complex23, complex30, 10);
        org.apache.commons.math3.complex.Complex complex34 = complex30.pow((double) (byte) 1);
        boolean boolean35 = org.apache.commons.math3.complex.Complex.equals(complex11, complex34);
        org.apache.commons.math3.complex.Complex complex36 = complex11.reciprocal();
        boolean boolean38 = org.apache.commons.math3.complex.Complex.equals(complex9, complex11, (double) (byte) 1);
        org.apache.commons.math3.complex.Complex complex40 = complex11.multiply(0);
        org.apache.commons.math3.complex.Complex complex42 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double43 = complex42.getReal();
        org.apache.commons.math3.complex.Complex complex45 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double46 = complex45.getReal();
        boolean boolean47 = org.apache.commons.math3.complex.Complex.equals(complex42, complex45);
        org.apache.commons.math3.complex.Complex complex50 = new org.apache.commons.math3.complex.Complex(100.0d, (double) (short) 100);
        org.apache.commons.math3.complex.Complex complex52 = complex50.multiply((double) 100);
        org.apache.commons.math3.complex.Complex complex53 = complex52.tanh();
        org.apache.commons.math3.complex.Complex complex54 = complex42.add(complex52);
        boolean boolean56 = org.apache.commons.math3.complex.Complex.equals(complex40, complex52, 1);
        org.apache.commons.math3.complex.Complex complex58 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex59 = complex58.sqrt();
        org.apache.commons.math3.complex.Complex complex60 = complex58.tanh();
        boolean boolean62 = complex60.equals((java.lang.Object) true);
        org.apache.commons.math3.complex.Complex complex64 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex66 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double67 = complex66.getReal();
        org.apache.commons.math3.complex.Complex complex69 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double70 = complex69.getReal();
        boolean boolean71 = org.apache.commons.math3.complex.Complex.equals(complex66, complex69);
        boolean boolean73 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex64, complex66, (double) 0.0f);
        java.lang.String str74 = complex64.toString();
        org.apache.commons.math3.complex.Complex complex76 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double77 = complex76.getReal();
        org.apache.commons.math3.complex.Complex complex79 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double80 = complex79.getReal();
        boolean boolean81 = org.apache.commons.math3.complex.Complex.equals(complex76, complex79);
        org.apache.commons.math3.complex.Complex complex83 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean85 = org.apache.commons.math3.complex.Complex.equals(complex76, complex83, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex86 = complex64.add(complex83);
        java.lang.String str87 = complex83.toString();
        org.apache.commons.math3.complex.Complex complex89 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex90 = complex83.divide(complex89);
        org.apache.commons.math3.complex.Complex complex91 = complex83.tanh();
        org.apache.commons.math3.complex.Complex complex92 = complex83.tan();
        boolean boolean93 = complex60.equals((java.lang.Object) complex83);
        org.apache.commons.math3.complex.Complex complex94 = complex40.multiply(complex60);
        org.apache.commons.math3.complex.Complex complex96 = complex40.subtract(10.841470984807897d);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1.0d) + "'", double24 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1.0d) + "'", double27 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-1.0d) + "'", double43 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1.0d) + "'", double46 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + (-1.0d) + "'", double67 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + (-1.0d) + "'", double70 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + str74 + "' != '" + "(-1.0, 0.0)" + "'", str74.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + (-1.0d) + "'", double77 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + (-1.0d) + "'", double80 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertTrue("'" + str87 + "' != '" + "(-1.0, 0.0)" + "'", str87.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertNotNull(complex96);
    }

    @Test
    public void test457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test457");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equals(complex1, complex8, 10);
        org.apache.commons.math3.complex.Complex complex12 = complex1.multiply(10);
        org.apache.commons.math3.complex.Complex complex15 = new org.apache.commons.math3.complex.Complex(100.0d, (double) (short) 100);
        double double16 = complex15.getReal();
        org.apache.commons.math3.complex.Complex complex17 = complex15.cosh();
        boolean boolean19 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex15, 1.5707963267948968d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test458");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equals(complex1, complex8, 10);
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (short) 100, (double) (short) -1);
        boolean boolean14 = complex1.equals((java.lang.Object) complex13);
        org.apache.commons.math3.complex.Complex complex15 = complex13.tan();
        org.apache.commons.math3.complex.Complex complex16 = complex13.sinh();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
    }

    @Test
    public void test459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test459");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf((double) (byte) 100, (double) 0L);
        double double3 = complex2.getImaginary();
        org.apache.commons.math3.complex.Complex complex4 = complex2.cos();
        org.apache.commons.math3.complex.Complex complex5 = complex4.sqrt1z();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
    }

    @Test
    public void test460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test460");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (short) 10);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex3 = complex1.sinh();
        org.apache.commons.math3.complex.Complex complex4 = complex3.cos();
        boolean boolean5 = complex4.isNaN();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 10.0d + "'", double2 == 10.0d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test461");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex8 = complex3.cosh();
        org.apache.commons.math3.complex.Complex complex9 = complex8.cos();
        java.lang.Class<?> wildcardClass10 = complex9.getClass();
        org.apache.commons.math3.complex.ComplexField complexField11 = complex9.getField();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(complexField11);
    }

    @Test
    public void test462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test462");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex(3.136592820246461d);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex5 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double6 = complex5.getReal();
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double9 = complex8.getReal();
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equals(complex5, complex8);
        boolean boolean12 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex3, complex5, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex13 = complex3.log();
        org.apache.commons.math3.complex.Complex complex15 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double16 = complex15.getReal();
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double19 = complex18.getReal();
        boolean boolean20 = org.apache.commons.math3.complex.Complex.equals(complex15, complex18);
        org.apache.commons.math3.complex.Complex complex22 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean24 = org.apache.commons.math3.complex.Complex.equals(complex15, complex22, 10);
        org.apache.commons.math3.complex.Complex complex26 = complex22.pow((double) (byte) 1);
        boolean boolean27 = org.apache.commons.math3.complex.Complex.equals(complex3, complex26);
        org.apache.commons.math3.complex.Complex complex29 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double30 = complex29.getReal();
        double double31 = complex29.getReal();
        org.apache.commons.math3.complex.Complex complex32 = complex29.tan();
        org.apache.commons.math3.complex.Complex complex33 = complex29.exp();
        org.apache.commons.math3.complex.Complex complex35 = complex29.multiply((double) 10);
        boolean boolean36 = org.apache.commons.math3.complex.Complex.equals(complex3, complex35);
        double double37 = complex35.getArgument();
        boolean boolean39 = org.apache.commons.math3.complex.Complex.equals(complex1, complex35, (int) ' ');
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.0d) + "'", double6 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1.0d) + "'", double16 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.0d) + "'", double19 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1.0d) + "'", double30 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-1.0d) + "'", double31 == (-1.0d));
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 3.141592653589793d + "'", double37 == 3.141592653589793d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test463");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((-5.090647314608025E14d));
    }

    @Test
    public void test464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test464");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex9 = complex3.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex10 = complex3.acos();
        double double11 = complex3.getArgument();
        org.apache.commons.math3.complex.Complex complex13 = complex3.subtract(3.14159265358979d);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(complex13);
    }

    @Test
    public void test465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test465");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex8 = complex3.cosh();
        double double9 = complex3.getImaginary();
        double double10 = complex3.abs();
        org.apache.commons.math3.complex.Complex complex12 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double13 = complex12.getReal();
        org.apache.commons.math3.complex.Complex complex15 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double16 = complex15.getReal();
        boolean boolean17 = org.apache.commons.math3.complex.Complex.equals(complex12, complex15);
        org.apache.commons.math3.complex.Complex complex19 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean21 = org.apache.commons.math3.complex.Complex.equals(complex12, complex19, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex23 = new org.apache.commons.math3.complex.Complex((-1.557407724654902d));
        org.apache.commons.math3.complex.Complex complex24 = complex12.multiply(complex23);
        org.apache.commons.math3.complex.Complex complex25 = complex3.pow(complex12);
        org.apache.commons.math3.complex.Complex complex27 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double28 = complex27.getReal();
        double double29 = complex27.getReal();
        org.apache.commons.math3.complex.Complex complex30 = complex27.tan();
        org.apache.commons.math3.complex.Complex complex31 = complex27.asin();
        org.apache.commons.math3.complex.Complex complex32 = complex12.subtract(complex27);
        org.apache.commons.math3.complex.Complex complex34 = complex32.multiply((double) '4');
        org.apache.commons.math3.complex.Complex complex36 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double37 = complex36.getReal();
        org.apache.commons.math3.complex.Complex complex39 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double40 = complex39.getReal();
        boolean boolean41 = org.apache.commons.math3.complex.Complex.equals(complex36, complex39);
        org.apache.commons.math3.complex.Complex complex44 = new org.apache.commons.math3.complex.Complex(100.0d, (double) (short) 100);
        org.apache.commons.math3.complex.Complex complex46 = complex44.multiply((double) 100);
        org.apache.commons.math3.complex.Complex complex47 = complex46.tanh();
        org.apache.commons.math3.complex.Complex complex48 = complex36.add(complex46);
        org.apache.commons.math3.complex.Complex complex49 = complex36.sqrt1z();
        org.apache.commons.math3.complex.Complex complex50 = complex32.divide(complex49);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1.0d) + "'", double13 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1.0d) + "'", double16 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-1.0d) + "'", double28 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1.0d) + "'", double29 == (-1.0d));
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + (-1.0d) + "'", double37 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-1.0d) + "'", double40 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
    }

    @Test
    public void test466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test466");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        double double11 = complex3.abs();
        org.apache.commons.math3.complex.Complex complex12 = complex3.cos();
        org.apache.commons.math3.complex.Complex complex14 = complex3.multiply((int) (short) 0);
        org.apache.commons.math3.complex.Complex complex16 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex17 = complex16.sqrt();
        org.apache.commons.math3.complex.Complex complex18 = complex16.tanh();
        boolean boolean20 = complex18.equals((java.lang.Object) true);
        double double21 = complex18.getImaginary();
        org.apache.commons.math3.complex.Complex complex22 = complex18.sinh();
        org.apache.commons.math3.complex.Complex complex23 = complex18.cosh();
        double double24 = complex18.getImaginary();
        double double25 = complex18.abs();
        org.apache.commons.math3.complex.Complex complex27 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double28 = complex27.getReal();
        org.apache.commons.math3.complex.Complex complex30 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double31 = complex30.getReal();
        boolean boolean32 = org.apache.commons.math3.complex.Complex.equals(complex27, complex30);
        org.apache.commons.math3.complex.Complex complex34 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean36 = org.apache.commons.math3.complex.Complex.equals(complex27, complex34, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex38 = new org.apache.commons.math3.complex.Complex((-1.557407724654902d));
        org.apache.commons.math3.complex.Complex complex39 = complex27.multiply(complex38);
        org.apache.commons.math3.complex.Complex complex40 = complex18.pow(complex27);
        org.apache.commons.math3.complex.Complex complex42 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double43 = complex42.getReal();
        double double44 = complex42.getReal();
        org.apache.commons.math3.complex.Complex complex45 = complex42.tan();
        org.apache.commons.math3.complex.Complex complex46 = complex42.asin();
        org.apache.commons.math3.complex.Complex complex47 = complex27.subtract(complex42);
        org.apache.commons.math3.complex.Complex complex48 = complex27.sin();
        org.apache.commons.math3.complex.Complex complex50 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex52 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double53 = complex52.getReal();
        org.apache.commons.math3.complex.Complex complex55 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double56 = complex55.getReal();
        boolean boolean57 = org.apache.commons.math3.complex.Complex.equals(complex52, complex55);
        boolean boolean59 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex50, complex52, (double) 0.0f);
        java.lang.String str60 = complex50.toString();
        org.apache.commons.math3.complex.Complex complex62 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double63 = complex62.getReal();
        org.apache.commons.math3.complex.Complex complex65 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double66 = complex65.getReal();
        boolean boolean67 = org.apache.commons.math3.complex.Complex.equals(complex62, complex65);
        org.apache.commons.math3.complex.Complex complex69 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean71 = org.apache.commons.math3.complex.Complex.equals(complex62, complex69, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex72 = complex50.add(complex69);
        java.lang.String str73 = complex69.toString();
        org.apache.commons.math3.complex.Complex complex75 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex76 = complex69.divide(complex75);
        org.apache.commons.math3.complex.ComplexField complexField77 = complex75.getField();
        org.apache.commons.math3.complex.Complex complex78 = complex48.subtract(complex75);
        org.apache.commons.math3.complex.Complex complex79 = complex3.divide(complex48);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-1.0d) + "'", double28 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-1.0d) + "'", double31 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-1.0d) + "'", double43 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1.0d) + "'", double44 == (-1.0d));
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-1.0d) + "'", double53 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + (-1.0d) + "'", double56 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + str60 + "' != '" + "(-1.0, 0.0)" + "'", str60.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + (-1.0d) + "'", double63 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + (-1.0d) + "'", double66 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertTrue("'" + str73 + "' != '" + "(-1.0, 0.0)" + "'", str73.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complexField77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
    }

    @Test
    public void test467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test467");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf((-0.8414709848078965d));
        org.junit.Assert.assertNotNull(complex1);
    }

    @Test
    public void test468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test468");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf((double) ' ', (double) ' ');
        org.apache.commons.math3.complex.Complex complex4 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex5 = complex4.conjugate();
        org.apache.commons.math3.complex.Complex complex6 = complex5.sin();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex2, complex5, (int) '4');
        org.apache.commons.math3.complex.Complex complex9 = complex5.reciprocal();
        org.apache.commons.math3.complex.Complex complex11 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex12 = complex11.sqrt();
        org.apache.commons.math3.complex.Complex complex13 = complex11.tanh();
        double double14 = complex11.getImaginary();
        org.apache.commons.math3.complex.Complex complex16 = complex11.multiply((int) 'a');
        org.apache.commons.math3.complex.Complex complex18 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math3.complex.Complex complex20 = complex18.tanh();
        boolean boolean22 = complex20.equals((java.lang.Object) true);
        double double23 = complex20.getImaginary();
        org.apache.commons.math3.complex.Complex complex24 = complex20.sinh();
        org.apache.commons.math3.complex.Complex complex25 = complex20.cosh();
        double double26 = complex20.getImaginary();
        double double27 = complex20.abs();
        org.apache.commons.math3.complex.Complex complex29 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double30 = complex29.getReal();
        org.apache.commons.math3.complex.Complex complex32 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double33 = complex32.getReal();
        boolean boolean34 = org.apache.commons.math3.complex.Complex.equals(complex29, complex32);
        org.apache.commons.math3.complex.Complex complex36 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean38 = org.apache.commons.math3.complex.Complex.equals(complex29, complex36, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex40 = new org.apache.commons.math3.complex.Complex((-1.557407724654902d));
        org.apache.commons.math3.complex.Complex complex41 = complex29.multiply(complex40);
        org.apache.commons.math3.complex.Complex complex42 = complex20.pow(complex29);
        org.apache.commons.math3.complex.Complex complex44 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double45 = complex44.getReal();
        double double46 = complex44.getReal();
        org.apache.commons.math3.complex.Complex complex47 = complex44.tan();
        org.apache.commons.math3.complex.Complex complex48 = complex44.asin();
        org.apache.commons.math3.complex.Complex complex49 = complex29.subtract(complex44);
        org.apache.commons.math3.complex.Complex complex50 = complex16.pow(complex49);
        org.apache.commons.math3.complex.Complex complex51 = complex5.add(complex49);
        org.apache.commons.math3.complex.Complex complex53 = complex5.subtract((-1.5707963267948966d));
        org.apache.commons.math3.complex.Complex complex55 = complex5.pow(1.5430806348152437d);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1.0d) + "'", double30 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-1.0d) + "'", double33 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1.0d) + "'", double45 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1.0d) + "'", double46 == (-1.0d));
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex55);
    }

    @Test
    public void test469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test469");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        java.lang.String str11 = complex1.toString();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex23 = complex1.add(complex20);
        org.apache.commons.math3.complex.Complex complex24 = org.apache.commons.math3.complex.Complex.NaN;
        org.apache.commons.math3.complex.Complex complex25 = complex20.subtract(complex24);
        org.apache.commons.math3.complex.Complex complex27 = complex20.multiply((int) (byte) -1);
        org.apache.commons.math3.complex.Complex complex28 = complex27.acos();
        org.apache.commons.math3.complex.Complex complex29 = complex28.tan();
        org.apache.commons.math3.complex.Complex complex30 = complex29.sqrt();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "(-1.0, 0.0)" + "'", str11.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
    }

    @Test
    public void test470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test470");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex9 = complex3.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double15 = complex14.getReal();
        boolean boolean16 = org.apache.commons.math3.complex.Complex.equals(complex11, complex14);
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean20 = org.apache.commons.math3.complex.Complex.equals(complex11, complex18, 10);
        org.apache.commons.math3.complex.Complex complex22 = complex18.pow((double) (byte) 1);
        boolean boolean24 = org.apache.commons.math3.complex.Complex.equals(complex3, complex22, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex25 = complex3.exp();
        org.apache.commons.math3.complex.Complex complex26 = complex3.sin();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
    }

    @Test
    public void test471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test471");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = complex1.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex6 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math3.complex.Complex complex8 = complex6.tanh();
        org.apache.commons.math3.complex.Complex complex10 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex12 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double13 = complex12.getReal();
        org.apache.commons.math3.complex.Complex complex15 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double16 = complex15.getReal();
        boolean boolean17 = org.apache.commons.math3.complex.Complex.equals(complex12, complex15);
        boolean boolean19 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex10, complex12, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex20 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex21 = complex20.asin();
        org.apache.commons.math3.complex.Complex complex22 = complex20.tanh();
        org.apache.commons.math3.complex.Complex complex23 = complex22.sin();
        boolean boolean24 = complex12.equals((java.lang.Object) complex22);
        org.apache.commons.math3.complex.Complex complex25 = complex6.divide(complex22);
        org.apache.commons.math3.complex.Complex complex26 = complex4.multiply(complex22);
        org.apache.commons.math3.complex.Complex complex27 = complex4.cos();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1.0d) + "'", double13 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1.0d) + "'", double16 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
    }

    @Test
    public void test472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test472");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex7 = complex4.sqrt();
        org.apache.commons.math3.complex.Complex complex9 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double10 = complex9.getReal();
        org.apache.commons.math3.complex.Complex complex12 = complex9.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex13 = complex7.pow(complex12);
        org.apache.commons.math3.complex.Complex complex14 = complex13.conjugate();
        double double15 = complex14.getArgument();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.1415926535897927d + "'", double15 == 3.1415926535897927d);
    }

    @Test
    public void test473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test473");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf((-2.0d), (double) 'a');
        org.apache.commons.math3.complex.Complex complex4 = complex2.multiply((int) (byte) 0);
        org.apache.commons.math3.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math3.complex.Complex complex6 = complex4.acos();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
    }

    @Test
    public void test474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test474");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex(100.0d, (double) (short) 100);
        org.apache.commons.math3.complex.Complex complex4 = complex2.multiply((double) 100);
        org.apache.commons.math3.complex.Complex complex7 = org.apache.commons.math3.complex.Complex.valueOf(100.0d, (double) (short) 0);
        org.apache.commons.math3.complex.Complex complex9 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double10 = complex9.getReal();
        org.apache.commons.math3.complex.Complex complex12 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double13 = complex12.getReal();
        boolean boolean14 = org.apache.commons.math3.complex.Complex.equals(complex9, complex12);
        org.apache.commons.math3.complex.Complex complex15 = complex12.sqrt();
        org.apache.commons.math3.complex.Complex complex17 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math3.complex.Complex complex19 = complex17.tanh();
        boolean boolean21 = complex19.equals((java.lang.Object) true);
        double double22 = complex19.getImaginary();
        org.apache.commons.math3.complex.Complex complex23 = complex19.sinh();
        org.apache.commons.math3.complex.Complex complex24 = complex19.cosh();
        double double25 = complex19.getImaginary();
        org.apache.commons.math3.complex.Complex complex26 = complex12.add(complex19);
        org.apache.commons.math3.complex.Complex complex27 = complex7.add(complex19);
        org.apache.commons.math3.complex.Complex complex29 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math3.complex.Complex complex31 = complex29.tanh();
        boolean boolean33 = complex31.equals((java.lang.Object) true);
        double double34 = complex31.getImaginary();
        org.apache.commons.math3.complex.Complex complex35 = complex31.sinh();
        org.apache.commons.math3.complex.Complex complex36 = complex27.multiply(complex35);
        boolean boolean38 = org.apache.commons.math3.complex.Complex.equals(complex4, complex27, (int) '4');
        double double39 = complex27.abs();
        org.apache.commons.math3.complex.Complex complex42 = org.apache.commons.math3.complex.Complex.valueOf((double) 10.0f, (double) (-1));
        org.apache.commons.math3.complex.Complex complex43 = complex27.subtract(complex42);
        org.apache.commons.math3.complex.Complex complex44 = complex42.reciprocal();
        org.apache.commons.math3.complex.Complex complex46 = new org.apache.commons.math3.complex.Complex((double) (short) 10);
        double double47 = complex46.getReal();
        org.apache.commons.math3.complex.Complex complex49 = complex46.pow((double) (short) 1);
        org.apache.commons.math3.complex.Complex complex51 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex53 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double54 = complex53.getReal();
        org.apache.commons.math3.complex.Complex complex56 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double57 = complex56.getReal();
        boolean boolean58 = org.apache.commons.math3.complex.Complex.equals(complex53, complex56);
        boolean boolean60 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex51, complex53, (double) 0.0f);
        java.lang.String str61 = complex51.toString();
        org.apache.commons.math3.complex.Complex complex63 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double64 = complex63.getReal();
        org.apache.commons.math3.complex.Complex complex66 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double67 = complex66.getReal();
        boolean boolean68 = org.apache.commons.math3.complex.Complex.equals(complex63, complex66);
        org.apache.commons.math3.complex.Complex complex70 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean72 = org.apache.commons.math3.complex.Complex.equals(complex63, complex70, 10);
        boolean boolean73 = org.apache.commons.math3.complex.Complex.equals(complex51, complex70);
        org.apache.commons.math3.complex.Complex complex74 = complex46.pow(complex70);
        org.apache.commons.math3.complex.Complex complex75 = complex44.divide(complex70);
        org.apache.commons.math3.complex.Complex complex76 = complex75.tanh();
        org.apache.commons.math3.complex.Complex complex77 = complex76.sqrt();
        double double78 = complex76.getImaginary();
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1.0d) + "'", double13 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10.0d + "'", double47 == 10.0d);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1.0d) + "'", double54 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-1.0d) + "'", double57 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + str61 + "' != '" + "(-1.0, 0.0)" + "'", str61.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + (-1.0d) + "'", double64 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + (-1.0d) + "'", double67 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + (-0.009804872918991509d) + "'", double78 == (-0.009804872918991509d));
    }

    @Test
    public void test475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test475");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math3.complex.Complex complex4 = complex1.asin();
        org.apache.commons.math3.complex.Complex complex6 = complex4.pow(100.0d);
        org.apache.commons.math3.complex.Complex complex7 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex9 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double10 = complex9.getReal();
        org.apache.commons.math3.complex.Complex complex12 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math3.complex.Complex complex14 = complex12.tanh();
        boolean boolean16 = complex14.equals((java.lang.Object) true);
        double double17 = complex14.getImaginary();
        org.apache.commons.math3.complex.Complex complex18 = complex14.sinh();
        org.apache.commons.math3.complex.Complex complex20 = complex14.multiply(0.0d);
        boolean boolean21 = org.apache.commons.math3.complex.Complex.equals(complex9, complex14);
        org.apache.commons.math3.complex.Complex complex23 = complex9.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex24 = complex7.subtract(complex23);
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double27 = complex26.getReal();
        org.apache.commons.math3.complex.Complex complex29 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double30 = complex29.getReal();
        boolean boolean31 = org.apache.commons.math3.complex.Complex.equals(complex26, complex29);
        org.apache.commons.math3.complex.Complex complex33 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math3.complex.Complex complex35 = complex33.tanh();
        boolean boolean37 = complex35.equals((java.lang.Object) true);
        double double38 = complex35.getImaginary();
        org.apache.commons.math3.complex.Complex complex39 = complex35.sinh();
        org.apache.commons.math3.complex.Complex complex40 = complex35.cosh();
        double double41 = complex35.getImaginary();
        boolean boolean42 = complex29.equals((java.lang.Object) complex35);
        org.apache.commons.math3.complex.Complex complex43 = complex24.add(complex29);
        org.apache.commons.math3.complex.Complex complex44 = complex4.multiply(complex29);
        org.apache.commons.math3.complex.Complex complex46 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math3.complex.Complex complex48 = complex46.tanh();
        boolean boolean50 = complex48.equals((java.lang.Object) true);
        double double51 = complex48.getImaginary();
        org.apache.commons.math3.complex.Complex complex52 = complex48.sinh();
        org.apache.commons.math3.complex.Complex complex54 = complex48.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex55 = complex48.acos();
        boolean boolean57 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex44, complex55, (double) '#');
        org.apache.commons.math3.complex.Complex complex59 = complex44.pow(1.0d);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1.0d) + "'", double27 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1.0d) + "'", double30 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(complex59);
    }

    @Test
    public void test476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test476");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.cos();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        org.apache.commons.math3.complex.Complex complex9 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double10 = complex9.getReal();
        boolean boolean11 = org.apache.commons.math3.complex.Complex.equals(complex6, complex9);
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex4, complex6, (double) 0.0f);
        java.lang.String str14 = complex4.toString();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        org.apache.commons.math3.complex.Complex complex19 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double20 = complex19.getReal();
        boolean boolean21 = org.apache.commons.math3.complex.Complex.equals(complex16, complex19);
        org.apache.commons.math3.complex.Complex complex23 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean25 = org.apache.commons.math3.complex.Complex.equals(complex16, complex23, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex26 = complex4.add(complex23);
        java.lang.String str27 = complex23.toString();
        org.apache.commons.math3.complex.Complex complex29 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex30 = complex23.divide(complex29);
        org.apache.commons.math3.complex.ComplexField complexField31 = complex29.getField();
        boolean boolean33 = org.apache.commons.math3.complex.Complex.equals(complex1, complex29, (-1));
        boolean boolean34 = complex29.isInfinite();
        org.apache.commons.math3.complex.Complex complex35 = complex29.sqrt1z();
        org.apache.commons.math3.complex.Complex complex36 = complex35.sqrt();
        org.apache.commons.math3.complex.Complex complex37 = complex36.negate();
        org.apache.commons.math3.complex.Complex complex38 = complex36.cos();
        org.apache.commons.math3.complex.Complex complex39 = complex36.sqrt1z();
        org.apache.commons.math3.complex.Complex complex40 = complex39.atan();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "(-1.0, 0.0)" + "'", str14.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1.0d) + "'", double20 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "(-1.0, 0.0)" + "'", str27.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complexField31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
    }

    @Test
    public void test477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test477");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex9 = complex3.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex10 = complex3.acos();
        java.lang.Class<?> wildcardClass11 = complex10.getClass();
        org.apache.commons.math3.complex.Complex complex12 = complex10.negate();
        org.apache.commons.math3.complex.Complex complex13 = complex12.sin();
        double double14 = complex12.abs();
        org.apache.commons.math3.complex.Complex complex15 = complex12.sinh();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.5707963267948966d + "'", double14 == 1.5707963267948966d);
        org.junit.Assert.assertNotNull(complex15);
    }

    @Test
    public void test478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test478");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) 1.0f);
        org.apache.commons.math3.complex.Complex complex3 = complex1.divide(0.0d);
        org.apache.commons.math3.complex.Complex complex4 = complex3.negate();
        double double5 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.add((double) (byte) 0);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertEquals((double) double5, Double.NaN, 0);
        org.junit.Assert.assertNotNull(complex7);
    }

    @Test
    public void test479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test479");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf((double) 100L);
        org.apache.commons.math3.complex.ComplexField complexField2 = complex1.getField();
        org.apache.commons.math3.complex.Complex complex4 = complex1.divide((-1.9643867237284715E-15d));
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((-1.8070843896616986d));
        org.apache.commons.math3.complex.ComplexField complexField7 = complex6.getField();
        boolean boolean9 = org.apache.commons.math3.complex.Complex.equals(complex1, complex6, (-1.5227865933864404d));
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complexField2);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complexField7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test480");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equals(complex1, complex8, 10);
        org.apache.commons.math3.complex.Complex complex12 = complex1.multiply(10);
        org.apache.commons.math3.complex.Complex complex13 = complex1.cosh();
        org.apache.commons.math3.complex.Complex complex15 = complex13.add((double) (-1));
        org.apache.commons.math3.complex.Complex complex16 = complex15.exp();
        boolean boolean17 = complex15.isInfinite();
        java.lang.String str18 = complex15.toString();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "(0.5430806348152437, -0.0)" + "'", str18.equals("(0.5430806348152437, -0.0)"));
    }

    @Test
    public void test481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test481");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex8 = complex3.cosh();
        org.apache.commons.math3.complex.ComplexField complexField9 = complex8.getField();
        double double10 = complex8.getImaginary();
        boolean boolean12 = complex8.equals((java.lang.Object) "");
        org.apache.commons.math3.complex.Complex complex13 = complex8.acos();
        org.apache.commons.math3.complex.Complex complex14 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        org.apache.commons.math3.complex.Complex complex19 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math3.complex.Complex complex21 = complex19.tanh();
        boolean boolean23 = complex21.equals((java.lang.Object) true);
        double double24 = complex21.getImaginary();
        org.apache.commons.math3.complex.Complex complex25 = complex21.sinh();
        org.apache.commons.math3.complex.Complex complex27 = complex21.multiply(0.0d);
        boolean boolean28 = org.apache.commons.math3.complex.Complex.equals(complex16, complex21);
        org.apache.commons.math3.complex.Complex complex30 = complex16.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex31 = complex14.subtract(complex30);
        org.apache.commons.math3.complex.Complex complex33 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math3.complex.Complex complex35 = complex14.add(complex33);
        org.apache.commons.math3.complex.Complex complex36 = complex13.multiply(complex14);
        org.apache.commons.math3.complex.ComplexField complexField37 = complex13.getField();
        org.apache.commons.math3.complex.Complex complex39 = complex13.multiply(0);
        boolean boolean40 = complex13.isInfinite();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complexField9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complexField37);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test482");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        java.lang.String str11 = complex1.toString();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex23 = complex1.add(complex20);
        org.apache.commons.math3.complex.Complex complex24 = org.apache.commons.math3.complex.Complex.NaN;
        org.apache.commons.math3.complex.Complex complex25 = complex20.subtract(complex24);
        org.apache.commons.math3.complex.Complex complex27 = complex20.subtract((double) 100.0f);
        org.apache.commons.math3.complex.Complex complex29 = complex27.multiply((int) (byte) -1);
        org.apache.commons.math3.complex.Complex complex32 = new org.apache.commons.math3.complex.Complex(0.0d, (double) ' ');
        org.apache.commons.math3.complex.Complex complex33 = complex32.asin();
        boolean boolean34 = complex29.equals((java.lang.Object) complex33);
        org.apache.commons.math3.complex.Complex complex36 = complex29.pow(0.0d);
        org.apache.commons.math3.complex.Complex complex37 = complex29.sqrt();
        org.apache.commons.math3.complex.Complex complex39 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        java.util.List<org.apache.commons.math3.complex.Complex> complexList41 = complex39.nthRoot((int) (byte) 1);
        org.apache.commons.math3.complex.Complex complex43 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double44 = complex43.getReal();
        org.apache.commons.math3.complex.Complex complex46 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double47 = complex46.getReal();
        boolean boolean48 = org.apache.commons.math3.complex.Complex.equals(complex43, complex46);
        org.apache.commons.math3.complex.Complex complex50 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean52 = org.apache.commons.math3.complex.Complex.equals(complex43, complex50, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex54 = new org.apache.commons.math3.complex.Complex((double) (short) 10);
        double double55 = complex54.getReal();
        boolean boolean56 = complex43.equals((java.lang.Object) complex54);
        org.apache.commons.math3.complex.Complex complex57 = complex54.sin();
        org.apache.commons.math3.complex.Complex complex58 = complex54.exp();
        org.apache.commons.math3.complex.Complex complex59 = complex39.divide(complex54);
        org.apache.commons.math3.complex.Complex complex61 = complex39.divide((double) 1);
        org.apache.commons.math3.complex.Complex complex62 = complex61.sinh();
        boolean boolean63 = org.apache.commons.math3.complex.Complex.equals(complex37, complex62);
        org.apache.commons.math3.complex.Complex complex64 = complex62.sqrt();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "(-1.0, 0.0)" + "'", str11.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complexList41);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1.0d) + "'", double44 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-1.0d) + "'", double47 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 10.0d + "'", double55 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(complex64);
    }

    @Test
    public void test483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test483");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex12 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double15 = complex14.getReal();
        org.apache.commons.math3.complex.Complex complex17 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double18 = complex17.getReal();
        boolean boolean19 = org.apache.commons.math3.complex.Complex.equals(complex14, complex17);
        boolean boolean21 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex12, complex14, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex22 = complex12.log();
        org.apache.commons.math3.complex.Complex complex24 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double25 = complex24.getReal();
        org.apache.commons.math3.complex.Complex complex27 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double28 = complex27.getReal();
        boolean boolean29 = org.apache.commons.math3.complex.Complex.equals(complex24, complex27);
        org.apache.commons.math3.complex.Complex complex31 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean33 = org.apache.commons.math3.complex.Complex.equals(complex24, complex31, 10);
        org.apache.commons.math3.complex.Complex complex35 = complex31.pow((double) (byte) 1);
        boolean boolean36 = org.apache.commons.math3.complex.Complex.equals(complex12, complex35);
        boolean boolean37 = complex3.equals((java.lang.Object) complex12);
        org.apache.commons.math3.complex.Complex complex38 = complex3.reciprocal();
        org.apache.commons.math3.complex.Complex complex39 = complex38.log();
        org.apache.commons.math3.complex.Complex complex40 = complex39.exp();
        org.apache.commons.math3.complex.Complex complex42 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math3.complex.Complex complex44 = complex42.tanh();
        boolean boolean46 = complex44.equals((java.lang.Object) true);
        double double47 = complex44.getImaginary();
        org.apache.commons.math3.complex.Complex complex48 = complex44.sinh();
        org.apache.commons.math3.complex.Complex complex50 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex52 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double53 = complex52.getReal();
        org.apache.commons.math3.complex.Complex complex55 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double56 = complex55.getReal();
        boolean boolean57 = org.apache.commons.math3.complex.Complex.equals(complex52, complex55);
        boolean boolean59 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex50, complex52, (double) 0.0f);
        java.lang.String str60 = complex50.toString();
        org.apache.commons.math3.complex.Complex complex62 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double63 = complex62.getReal();
        org.apache.commons.math3.complex.Complex complex65 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double66 = complex65.getReal();
        boolean boolean67 = org.apache.commons.math3.complex.Complex.equals(complex62, complex65);
        org.apache.commons.math3.complex.Complex complex69 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean71 = org.apache.commons.math3.complex.Complex.equals(complex62, complex69, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex72 = complex50.add(complex69);
        org.apache.commons.math3.complex.Complex complex73 = complex48.multiply(complex72);
        java.lang.Class<?> wildcardClass74 = complex72.getClass();
        org.apache.commons.math3.complex.Complex complex76 = complex72.divide((double) '#');
        boolean boolean78 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex40, complex76, (-1.0d));
        org.apache.commons.math3.complex.Complex complex79 = complex76.atan();
        double double80 = complex79.abs();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.0d) + "'", double18 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-1.0d) + "'", double28 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-1.0d) + "'", double53 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + (-1.0d) + "'", double56 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + str60 + "' != '" + "(-1.0, 0.0)" + "'", str60.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + (-1.0d) + "'", double63 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + (-1.0d) + "'", double66 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.05708078240626461d + "'", double80 == 0.05708078240626461d);
    }

    @Test
    public void test484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test484");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        java.lang.String str11 = complex1.toString();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex23 = complex1.add(complex20);
        java.lang.String str24 = complex20.toString();
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex27 = complex20.divide(complex26);
        org.apache.commons.math3.complex.Complex complex28 = complex20.tanh();
        org.apache.commons.math3.complex.Complex complex29 = complex20.tan();
        org.apache.commons.math3.complex.Complex complex31 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex32 = complex31.cos();
        boolean boolean34 = org.apache.commons.math3.complex.Complex.equals(complex20, complex31, (-1.557407724654902d));
        org.apache.commons.math3.complex.Complex complex35 = complex20.sqrt1z();
        org.apache.commons.math3.complex.Complex complex36 = complex35.reciprocal();
        org.apache.commons.math3.complex.Complex complex38 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double39 = complex38.getReal();
        org.apache.commons.math3.complex.Complex complex41 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math3.complex.Complex complex43 = complex41.tanh();
        boolean boolean45 = complex43.equals((java.lang.Object) true);
        double double46 = complex43.getImaginary();
        org.apache.commons.math3.complex.Complex complex47 = complex43.sinh();
        org.apache.commons.math3.complex.Complex complex49 = complex43.multiply(0.0d);
        boolean boolean50 = org.apache.commons.math3.complex.Complex.equals(complex38, complex43);
        org.apache.commons.math3.complex.Complex complex52 = complex38.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex53 = complex52.log();
        org.apache.commons.math3.complex.Complex complex55 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex56 = complex55.cos();
        org.apache.commons.math3.complex.Complex complex57 = complex52.multiply(complex55);
        double double58 = complex57.abs();
        org.apache.commons.math3.complex.Complex complex60 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex62 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double63 = complex62.getReal();
        org.apache.commons.math3.complex.Complex complex65 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double66 = complex65.getReal();
        boolean boolean67 = org.apache.commons.math3.complex.Complex.equals(complex62, complex65);
        boolean boolean69 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex60, complex62, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex71 = complex62.multiply(1);
        org.apache.commons.math3.complex.Complex complex72 = complex62.conjugate();
        org.apache.commons.math3.complex.Complex complex73 = complex57.pow(complex72);
        org.apache.commons.math3.complex.Complex complex74 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex76 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double77 = complex76.getReal();
        org.apache.commons.math3.complex.Complex complex79 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex80 = complex79.sqrt();
        org.apache.commons.math3.complex.Complex complex81 = complex79.tanh();
        boolean boolean83 = complex81.equals((java.lang.Object) true);
        double double84 = complex81.getImaginary();
        org.apache.commons.math3.complex.Complex complex85 = complex81.sinh();
        org.apache.commons.math3.complex.Complex complex87 = complex81.multiply(0.0d);
        boolean boolean88 = org.apache.commons.math3.complex.Complex.equals(complex76, complex81);
        org.apache.commons.math3.complex.Complex complex90 = complex76.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex91 = complex74.subtract(complex90);
        org.apache.commons.math3.complex.Complex complex92 = complex91.exp();
        double double93 = complex92.abs();
        org.apache.commons.math3.complex.Complex complex94 = complex57.add(complex92);
        boolean boolean95 = org.apache.commons.math3.complex.Complex.equals(complex36, complex94);
        org.apache.commons.math3.complex.Complex complex96 = complex94.cos();
        org.apache.commons.math3.complex.Complex complex98 = complex94.divide(97.51410154434075d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "(-1.0, 0.0)" + "'", str11.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "(-1.0, 0.0)" + "'", str24.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-1.0d) + "'", double39 == (-1.0d));
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + (-1.0d) + "'", double63 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + (-1.0d) + "'", double66 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + (-1.0d) + "'", double77 == (-1.0d));
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 1.0d + "'", double93 == 1.0d);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertNotNull(complex98);
    }

    @Test
    public void test485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test485");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex((double) (short) -1, 1.772453850905516d);
    }

    @Test
    public void test486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test486");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex9 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double15 = complex14.getReal();
        boolean boolean16 = org.apache.commons.math3.complex.Complex.equals(complex11, complex14);
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex9, complex11, (double) 0.0f);
        java.lang.String str19 = complex9.toString();
        org.apache.commons.math3.complex.Complex complex21 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double22 = complex21.getReal();
        org.apache.commons.math3.complex.Complex complex24 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double25 = complex24.getReal();
        boolean boolean26 = org.apache.commons.math3.complex.Complex.equals(complex21, complex24);
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean30 = org.apache.commons.math3.complex.Complex.equals(complex21, complex28, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex31 = complex9.add(complex28);
        org.apache.commons.math3.complex.Complex complex32 = complex7.multiply(complex31);
        org.apache.commons.math3.complex.Complex complex34 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex36 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double37 = complex36.getReal();
        org.apache.commons.math3.complex.Complex complex39 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double40 = complex39.getReal();
        boolean boolean41 = org.apache.commons.math3.complex.Complex.equals(complex36, complex39);
        boolean boolean43 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex34, complex36, (double) 0.0f);
        double double44 = complex36.getReal();
        org.apache.commons.math3.complex.Complex complex45 = complex36.exp();
        org.apache.commons.math3.complex.Complex complex46 = complex36.tan();
        boolean boolean48 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex7, complex46, (double) 1.0f);
        double double49 = complex7.getReal();
        boolean boolean50 = complex7.isInfinite();
        boolean boolean51 = complex7.isNaN();
        org.apache.commons.math3.complex.Complex complex53 = complex7.divide(1.2645189576252271d);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "(-1.0, 0.0)" + "'", str19.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + (-1.0d) + "'", double37 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-1.0d) + "'", double40 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1.0d) + "'", double44 == (-1.0d));
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(complex53);
    }

    @Test
    public void test487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test487");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(1.9643867237284715E-15d);
        boolean boolean2 = complex1.isInfinite();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test488");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex8 = complex3.cosh();
        org.apache.commons.math3.complex.ComplexField complexField9 = complex8.getField();
        double double10 = complex8.getImaginary();
        boolean boolean12 = complex8.equals((java.lang.Object) "");
        org.apache.commons.math3.complex.Complex complex13 = complex8.acos();
        org.apache.commons.math3.complex.Complex complex14 = complex13.cos();
        java.lang.Class<?> wildcardClass15 = complex13.getClass();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complexField9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test489");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex8 = complex3.sqrt1z();
        org.apache.commons.math3.complex.Complex complex9 = complex8.atan();
        org.apache.commons.math3.complex.Complex complex10 = complex8.atan();
        org.apache.commons.math3.complex.Complex complex12 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double15 = complex14.getReal();
        org.apache.commons.math3.complex.Complex complex17 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double18 = complex17.getReal();
        boolean boolean19 = org.apache.commons.math3.complex.Complex.equals(complex14, complex17);
        boolean boolean21 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex12, complex14, (double) 0.0f);
        java.lang.String str22 = complex12.toString();
        org.apache.commons.math3.complex.Complex complex24 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double25 = complex24.getReal();
        org.apache.commons.math3.complex.Complex complex27 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double28 = complex27.getReal();
        boolean boolean29 = org.apache.commons.math3.complex.Complex.equals(complex24, complex27);
        org.apache.commons.math3.complex.Complex complex31 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean33 = org.apache.commons.math3.complex.Complex.equals(complex24, complex31, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex34 = complex12.add(complex31);
        boolean boolean35 = org.apache.commons.math3.complex.Complex.equals(complex8, complex31);
        org.apache.commons.math3.complex.Complex complex36 = complex31.log();
        org.apache.commons.math3.complex.Complex complex38 = complex36.pow((-100.0d));
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.0d) + "'", double18 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "(-1.0, 0.0)" + "'", str22.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-1.0d) + "'", double28 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex38);
    }

    @Test
    public void test490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test490");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex11 = complex1.log();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, 10);
        org.apache.commons.math3.complex.Complex complex24 = complex20.pow((double) (byte) 1);
        boolean boolean25 = org.apache.commons.math3.complex.Complex.equals(complex1, complex24);
        org.apache.commons.math3.complex.Complex complex27 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double28 = complex27.getReal();
        double double29 = complex27.getReal();
        org.apache.commons.math3.complex.Complex complex30 = complex27.tan();
        org.apache.commons.math3.complex.Complex complex31 = complex27.exp();
        org.apache.commons.math3.complex.Complex complex33 = complex27.multiply((double) 10);
        boolean boolean34 = org.apache.commons.math3.complex.Complex.equals(complex1, complex33);
        org.apache.commons.math3.complex.Complex complex35 = complex33.cosh();
        org.apache.commons.math3.complex.Complex complex37 = complex35.add(0.36787944117144233d);
        org.apache.commons.math3.complex.Complex complex40 = new org.apache.commons.math3.complex.Complex((double) 100L, (double) (-1L));
        double double41 = complex40.abs();
        org.apache.commons.math3.complex.Complex complex43 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math3.complex.Complex complex45 = complex43.tanh();
        org.apache.commons.math3.complex.Complex complex46 = complex45.sin();
        org.apache.commons.math3.complex.Complex complex48 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex49 = complex48.sqrt();
        boolean boolean51 = org.apache.commons.math3.complex.Complex.equals(complex45, complex48, (int) (byte) -1);
        org.apache.commons.math3.complex.Complex complex52 = complex45.conjugate();
        org.apache.commons.math3.complex.Complex complex53 = complex52.asin();
        org.apache.commons.math3.complex.Complex complex55 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex56 = complex55.conjugate();
        org.apache.commons.math3.complex.Complex complex57 = complex56.sin();
        org.apache.commons.math3.complex.Complex complex58 = complex53.add(complex56);
        org.apache.commons.math3.complex.Complex complex59 = complex58.sqrt();
        org.apache.commons.math3.complex.Complex complex60 = complex40.add(complex58);
        org.apache.commons.math3.complex.Complex complex62 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double63 = complex62.getReal();
        org.apache.commons.math3.complex.Complex complex65 = complex62.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex66 = complex62.log();
        org.apache.commons.math3.complex.Complex complex68 = complex62.divide((double) 100L);
        boolean boolean69 = org.apache.commons.math3.complex.Complex.equals(complex60, complex68);
        boolean boolean71 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex37, complex68, (-0.05714285714285714d));
        org.apache.commons.math3.complex.Complex complex73 = complex37.divide(100.00499987500623d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-1.0d) + "'", double28 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1.0d) + "'", double29 == (-1.0d));
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 100.00499987500623d + "'", double41 == 100.00499987500623d);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + (-1.0d) + "'", double63 == (-1.0d));
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(complex73);
    }

    @Test
    public void test491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test491");
        org.apache.commons.math3.complex.Complex complex0 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex1 = complex0.asin();
        double double2 = complex1.getImaginary();
        org.apache.commons.math3.complex.Complex complex4 = complex1.add(3.1415926535897927d);
        java.util.List<org.apache.commons.math3.complex.Complex> complexList6 = complex1.nthRoot((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex8 = complex1.subtract((double) 10);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-0.0d) + "'", double2 == (-0.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complexList6);
        org.junit.Assert.assertNotNull(complex8);
    }

    @Test
    public void test492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test492");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf(100.0d, (double) (short) 0);
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        org.apache.commons.math3.complex.Complex complex7 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double8 = complex7.getReal();
        boolean boolean9 = org.apache.commons.math3.complex.Complex.equals(complex4, complex7);
        org.apache.commons.math3.complex.Complex complex10 = complex7.sqrt();
        org.apache.commons.math3.complex.Complex complex12 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math3.complex.Complex complex14 = complex12.tanh();
        boolean boolean16 = complex14.equals((java.lang.Object) true);
        double double17 = complex14.getImaginary();
        org.apache.commons.math3.complex.Complex complex18 = complex14.sinh();
        org.apache.commons.math3.complex.Complex complex19 = complex14.cosh();
        double double20 = complex14.getImaginary();
        org.apache.commons.math3.complex.Complex complex21 = complex7.add(complex14);
        org.apache.commons.math3.complex.Complex complex22 = complex2.add(complex14);
        org.apache.commons.math3.complex.Complex complex24 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex25 = complex24.sqrt();
        org.apache.commons.math3.complex.Complex complex26 = complex24.tanh();
        boolean boolean28 = complex26.equals((java.lang.Object) true);
        double double29 = complex26.getImaginary();
        org.apache.commons.math3.complex.Complex complex30 = complex26.sinh();
        org.apache.commons.math3.complex.Complex complex31 = complex22.multiply(complex30);
        org.apache.commons.math3.complex.Complex complex33 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double34 = complex33.getReal();
        org.apache.commons.math3.complex.Complex complex36 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double37 = complex36.getReal();
        boolean boolean38 = org.apache.commons.math3.complex.Complex.equals(complex33, complex36);
        org.apache.commons.math3.complex.Complex complex40 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean42 = org.apache.commons.math3.complex.Complex.equals(complex33, complex40, 10);
        org.apache.commons.math3.complex.Complex complex44 = complex40.pow((double) (byte) 1);
        org.apache.commons.math3.complex.Complex complex45 = complex30.divide(complex40);
        org.apache.commons.math3.complex.Complex complex48 = new org.apache.commons.math3.complex.Complex(100.0d, (double) (short) 100);
        org.apache.commons.math3.complex.Complex complex50 = complex48.multiply((double) 100);
        org.apache.commons.math3.complex.Complex complex53 = org.apache.commons.math3.complex.Complex.valueOf(100.0d, (double) (short) 0);
        org.apache.commons.math3.complex.Complex complex55 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double56 = complex55.getReal();
        org.apache.commons.math3.complex.Complex complex58 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double59 = complex58.getReal();
        boolean boolean60 = org.apache.commons.math3.complex.Complex.equals(complex55, complex58);
        org.apache.commons.math3.complex.Complex complex61 = complex58.sqrt();
        org.apache.commons.math3.complex.Complex complex63 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math3.complex.Complex complex65 = complex63.tanh();
        boolean boolean67 = complex65.equals((java.lang.Object) true);
        double double68 = complex65.getImaginary();
        org.apache.commons.math3.complex.Complex complex69 = complex65.sinh();
        org.apache.commons.math3.complex.Complex complex70 = complex65.cosh();
        double double71 = complex65.getImaginary();
        org.apache.commons.math3.complex.Complex complex72 = complex58.add(complex65);
        org.apache.commons.math3.complex.Complex complex73 = complex53.add(complex65);
        org.apache.commons.math3.complex.Complex complex75 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex76 = complex75.sqrt();
        org.apache.commons.math3.complex.Complex complex77 = complex75.tanh();
        boolean boolean79 = complex77.equals((java.lang.Object) true);
        double double80 = complex77.getImaginary();
        org.apache.commons.math3.complex.Complex complex81 = complex77.sinh();
        org.apache.commons.math3.complex.Complex complex82 = complex73.multiply(complex81);
        boolean boolean84 = org.apache.commons.math3.complex.Complex.equals(complex50, complex73, (int) '4');
        boolean boolean86 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex45, complex73, 1.0d);
        org.apache.commons.math3.complex.Complex complex87 = complex45.sqrt1z();
        org.apache.commons.math3.complex.Complex complex88 = complex87.reciprocal();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + (-1.0d) + "'", double37 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + (-1.0d) + "'", double56 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + (-1.0d) + "'", double59 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
    }

    @Test
    public void test493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test493");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        double double3 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = complex1.tan();
        boolean boolean5 = complex1.isInfinite();
        org.apache.commons.math3.complex.Complex complex6 = complex1.sinh();
        org.apache.commons.math3.complex.Complex complex7 = complex6.acos();
        org.apache.commons.math3.complex.Complex complex8 = complex7.cos();
        org.apache.commons.math3.complex.Complex complex9 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        org.apache.commons.math3.complex.Complex complex14 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math3.complex.Complex complex16 = complex14.tanh();
        boolean boolean18 = complex16.equals((java.lang.Object) true);
        double double19 = complex16.getImaginary();
        org.apache.commons.math3.complex.Complex complex20 = complex16.sinh();
        org.apache.commons.math3.complex.Complex complex22 = complex16.multiply(0.0d);
        boolean boolean23 = org.apache.commons.math3.complex.Complex.equals(complex11, complex16);
        org.apache.commons.math3.complex.Complex complex25 = complex11.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex26 = complex9.subtract(complex25);
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double29 = complex28.getReal();
        double double30 = complex28.getReal();
        org.apache.commons.math3.complex.Complex complex31 = complex28.tan();
        org.apache.commons.math3.complex.Complex complex32 = complex25.pow(complex31);
        org.apache.commons.math3.complex.Complex complex33 = complex32.asin();
        boolean boolean35 = org.apache.commons.math3.complex.Complex.equals(complex7, complex32, 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1.0d) + "'", double29 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1.0d) + "'", double30 == (-1.0d));
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test494");
        org.apache.commons.math3.complex.Complex complex0 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double3 = complex2.getReal();
        org.apache.commons.math3.complex.Complex complex5 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math3.complex.Complex complex7 = complex5.tanh();
        boolean boolean9 = complex7.equals((java.lang.Object) true);
        double double10 = complex7.getImaginary();
        org.apache.commons.math3.complex.Complex complex11 = complex7.sinh();
        org.apache.commons.math3.complex.Complex complex13 = complex7.multiply(0.0d);
        boolean boolean14 = org.apache.commons.math3.complex.Complex.equals(complex2, complex7);
        org.apache.commons.math3.complex.Complex complex16 = complex2.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex17 = complex0.subtract(complex16);
        org.apache.commons.math3.complex.Complex complex19 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math3.complex.Complex complex21 = complex0.add(complex19);
        org.apache.commons.math3.complex.Complex complex22 = complex21.negate();
        org.apache.commons.math3.complex.Complex complex24 = complex22.subtract((-0.00555535180776387d));
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex24);
    }

    @Test
    public void test495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test495");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        java.lang.String str11 = complex1.toString();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex23 = complex1.add(complex20);
        java.lang.String str24 = complex20.toString();
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex27 = complex20.divide(complex26);
        org.apache.commons.math3.complex.Complex complex29 = complex27.multiply((-1.0d));
        boolean boolean30 = complex27.isNaN();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "(-1.0, 0.0)" + "'", str11.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "(-1.0, 0.0)" + "'", str24.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test496");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math3.complex.Complex complex6 = complex4.tanh();
        boolean boolean8 = complex6.equals((java.lang.Object) true);
        double double9 = complex6.getImaginary();
        org.apache.commons.math3.complex.Complex complex10 = complex6.sinh();
        org.apache.commons.math3.complex.Complex complex12 = complex6.multiply(0.0d);
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex1, complex6);
        org.apache.commons.math3.complex.Complex complex14 = complex1.sqrt1z();
        java.util.List<org.apache.commons.math3.complex.Complex> complexList16 = complex14.nthRoot((int) '4');
        java.lang.String str17 = complex14.toString();
        org.apache.commons.math3.complex.Complex complex18 = complex14.sqrt();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complexList16);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "(0.0, 0.0)" + "'", str17.equals("(0.0, 0.0)"));
        org.junit.Assert.assertNotNull(complex18);
    }

    @Test
    public void test497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test497");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double9 = complex8.getReal();
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex8, complex11);
        org.apache.commons.math3.complex.Complex complex15 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean17 = org.apache.commons.math3.complex.Complex.equals(complex8, complex15, 10);
        org.apache.commons.math3.complex.Complex complex19 = complex15.pow((double) (byte) 1);
        boolean boolean21 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex3, complex15, (double) (-1));
        org.apache.commons.math3.complex.Complex complex22 = complex3.sqrt();
        org.apache.commons.math3.complex.Complex complex23 = complex3.cosh();
        org.apache.commons.math3.complex.Complex complex25 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double26 = complex25.getReal();
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double29 = complex28.getReal();
        boolean boolean30 = org.apache.commons.math3.complex.Complex.equals(complex25, complex28);
        org.apache.commons.math3.complex.Complex complex32 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double33 = complex32.getReal();
        org.apache.commons.math3.complex.Complex complex35 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double36 = complex35.getReal();
        boolean boolean37 = org.apache.commons.math3.complex.Complex.equals(complex32, complex35);
        org.apache.commons.math3.complex.Complex complex38 = complex35.sqrt();
        org.apache.commons.math3.complex.Complex complex40 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double41 = complex40.getReal();
        org.apache.commons.math3.complex.Complex complex43 = complex40.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex44 = complex38.pow(complex43);
        org.apache.commons.math3.complex.Complex complex45 = complex28.multiply(complex44);
        org.apache.commons.math3.complex.Complex complex46 = complex44.sqrt1z();
        org.apache.commons.math3.complex.Complex complex47 = complex44.log();
        org.apache.commons.math3.complex.Complex complex49 = complex44.divide((-1.9643867237284715E-15d));
        org.apache.commons.math3.complex.Complex complex50 = complex49.tanh();
        boolean boolean51 = complex49.isInfinite();
        org.apache.commons.math3.complex.Complex complex52 = complex23.subtract(complex49);
        org.apache.commons.math3.complex.ComplexField complexField53 = complex52.getField();
        org.apache.commons.math3.complex.Complex complex55 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math3.complex.Complex complex57 = complex55.tanh();
        org.apache.commons.math3.complex.Complex complex58 = complex55.asin();
        org.apache.commons.math3.complex.Complex complex60 = complex55.multiply((int) (byte) 1);
        org.apache.commons.math3.complex.Complex complex61 = complex55.tan();
        org.apache.commons.math3.complex.Complex complex62 = complex55.atan();
        org.apache.commons.math3.complex.Complex complex63 = complex62.asin();
        org.apache.commons.math3.complex.Complex complex64 = complex52.pow(complex62);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-1.0d) + "'", double26 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1.0d) + "'", double29 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-1.0d) + "'", double33 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-1.0d) + "'", double36 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-1.0d) + "'", double41 == (-1.0d));
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complexField53);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
    }

    @Test
    public void test498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test498");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equals(complex1, complex8, 10);
        org.apache.commons.math3.complex.Complex complex12 = complex1.multiply(10);
        org.apache.commons.math3.complex.Complex complex13 = complex1.reciprocal();
        org.apache.commons.math3.complex.Complex complex15 = complex1.divide((double) (-1.0f));
        org.apache.commons.math3.complex.Complex complex16 = complex15.negate();
        org.apache.commons.math3.complex.Complex complex17 = complex15.cosh();
        org.apache.commons.math3.complex.Complex complex18 = complex15.cos();
        org.apache.commons.math3.complex.Complex complex19 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex21 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double22 = complex21.getReal();
        org.apache.commons.math3.complex.Complex complex24 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex25 = complex24.sqrt();
        org.apache.commons.math3.complex.Complex complex26 = complex24.tanh();
        boolean boolean28 = complex26.equals((java.lang.Object) true);
        double double29 = complex26.getImaginary();
        org.apache.commons.math3.complex.Complex complex30 = complex26.sinh();
        org.apache.commons.math3.complex.Complex complex32 = complex26.multiply(0.0d);
        boolean boolean33 = org.apache.commons.math3.complex.Complex.equals(complex21, complex26);
        org.apache.commons.math3.complex.Complex complex35 = complex21.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex36 = complex19.subtract(complex35);
        org.apache.commons.math3.complex.Complex complex38 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math3.complex.Complex complex40 = complex19.add(complex38);
        org.apache.commons.math3.complex.Complex complex41 = complex38.cosh();
        org.apache.commons.math3.complex.Complex complex42 = complex41.sin();
        boolean boolean43 = complex42.isNaN();
        org.apache.commons.math3.complex.Complex complex44 = complex15.divide(complex42);
        org.apache.commons.math3.complex.Complex complex45 = complex15.sin();
        org.apache.commons.math3.complex.Complex complex48 = new org.apache.commons.math3.complex.Complex((-2.0d), (double) 1L);
        org.apache.commons.math3.complex.Complex complex50 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double51 = complex50.getReal();
        org.apache.commons.math3.complex.Complex complex53 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math3.complex.Complex complex55 = complex53.tanh();
        boolean boolean57 = complex55.equals((java.lang.Object) true);
        double double58 = complex55.getImaginary();
        org.apache.commons.math3.complex.Complex complex59 = complex55.sinh();
        org.apache.commons.math3.complex.Complex complex61 = complex55.multiply(0.0d);
        boolean boolean62 = org.apache.commons.math3.complex.Complex.equals(complex50, complex55);
        org.apache.commons.math3.complex.Complex complex64 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex65 = complex64.sqrt();
        org.apache.commons.math3.complex.Complex complex66 = complex64.sqrt1z();
        org.apache.commons.math3.complex.Complex complex67 = complex55.subtract(complex64);
        org.apache.commons.math3.complex.Complex complex68 = complex67.reciprocal();
        org.apache.commons.math3.complex.Complex complex69 = complex68.acos();
        double double70 = complex69.getArgument();
        boolean boolean71 = org.apache.commons.math3.complex.Complex.equals(complex48, complex69);
        org.apache.commons.math3.complex.Complex complex72 = complex45.multiply(complex69);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-1.0d) + "'", double51 == (-1.0d));
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertEquals((double) double70, Double.NaN, 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(complex72);
    }

    @Test
    public void test499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test499");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex(0.5857653509193675d, 0.0d);
        org.apache.commons.math3.complex.Complex complex3 = complex2.exp();
        org.junit.Assert.assertNotNull(complex3);
    }

    @Test
    public void test500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test500");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex8 = complex3.cosh();
        double double9 = complex3.getImaginary();
        double double10 = complex3.abs();
        org.apache.commons.math3.complex.Complex complex12 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double13 = complex12.getReal();
        org.apache.commons.math3.complex.Complex complex15 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double16 = complex15.getReal();
        boolean boolean17 = org.apache.commons.math3.complex.Complex.equals(complex12, complex15);
        org.apache.commons.math3.complex.Complex complex19 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean21 = org.apache.commons.math3.complex.Complex.equals(complex12, complex19, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex23 = new org.apache.commons.math3.complex.Complex((-1.557407724654902d));
        org.apache.commons.math3.complex.Complex complex24 = complex12.multiply(complex23);
        org.apache.commons.math3.complex.Complex complex25 = complex3.pow(complex12);
        org.apache.commons.math3.complex.Complex complex27 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex29 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double30 = complex29.getReal();
        org.apache.commons.math3.complex.Complex complex32 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double33 = complex32.getReal();
        boolean boolean34 = org.apache.commons.math3.complex.Complex.equals(complex29, complex32);
        boolean boolean36 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex27, complex29, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex38 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex40 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double41 = complex40.getReal();
        org.apache.commons.math3.complex.Complex complex43 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double44 = complex43.getReal();
        boolean boolean45 = org.apache.commons.math3.complex.Complex.equals(complex40, complex43);
        boolean boolean47 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex38, complex40, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex48 = complex38.log();
        org.apache.commons.math3.complex.Complex complex50 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double51 = complex50.getReal();
        org.apache.commons.math3.complex.Complex complex53 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double54 = complex53.getReal();
        boolean boolean55 = org.apache.commons.math3.complex.Complex.equals(complex50, complex53);
        org.apache.commons.math3.complex.Complex complex57 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean59 = org.apache.commons.math3.complex.Complex.equals(complex50, complex57, 10);
        org.apache.commons.math3.complex.Complex complex61 = complex57.pow((double) (byte) 1);
        boolean boolean62 = org.apache.commons.math3.complex.Complex.equals(complex38, complex61);
        boolean boolean63 = complex29.equals((java.lang.Object) complex38);
        org.apache.commons.math3.complex.Complex complex64 = complex29.reciprocal();
        org.apache.commons.math3.complex.Complex complex65 = complex25.multiply(complex64);
        java.util.List<org.apache.commons.math3.complex.Complex> complexList67 = complex65.nthRoot((int) (byte) 10);
        org.apache.commons.math3.complex.Complex complex68 = complex65.cos();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1.0d) + "'", double13 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1.0d) + "'", double16 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1.0d) + "'", double30 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-1.0d) + "'", double33 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-1.0d) + "'", double41 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1.0d) + "'", double44 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-1.0d) + "'", double51 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1.0d) + "'", double54 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complexList67);
        org.junit.Assert.assertNotNull(complex68);
    }
}
