package randooptests;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest5 {

    public static boolean debug = false;

    @Test
    public void test01() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test01");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex12 = complex3.multiply(1);
        org.apache.commons.math3.complex.Complex complex14 = complex3.multiply((int) 'a');
        org.apache.commons.math3.complex.Complex complex15 = complex3.exp();
        org.apache.commons.math3.complex.Complex complex16 = complex15.tanh();
        org.apache.commons.math3.complex.Complex complex17 = complex15.tan();
        org.apache.commons.math3.complex.Complex complex19 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex21 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double22 = complex21.getReal();
        org.apache.commons.math3.complex.Complex complex24 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double25 = complex24.getReal();
        boolean boolean26 = org.apache.commons.math3.complex.Complex.equals(complex21, complex24);
        boolean boolean28 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex19, complex21, (double) 0.0f);
        double double29 = complex21.getReal();
        org.apache.commons.math3.complex.Complex complex30 = complex21.exp();
        java.lang.Class<?> wildcardClass31 = complex21.getClass();
        org.apache.commons.math3.complex.Complex complex32 = complex21.sqrt1z();
        org.apache.commons.math3.complex.Complex complex33 = complex21.sin();
        org.apache.commons.math3.complex.Complex complex34 = complex21.tanh();
        boolean boolean36 = org.apache.commons.math3.complex.Complex.equals(complex17, complex21, (-100.0d));
        org.apache.commons.math3.complex.Complex complex39 = new org.apache.commons.math3.complex.Complex((double) (byte) -1, (double) '#');
        boolean boolean41 = org.apache.commons.math3.complex.Complex.equals(complex21, complex39, 3.296908309475615d);
        org.apache.commons.math3.complex.Complex complex42 = complex21.sqrt();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1.0d) + "'", double29 == (-1.0d));
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(complex42);
    }

    @Test
    public void test02() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math3.complex.Complex complex6 = complex4.tanh();
        boolean boolean8 = complex6.equals((java.lang.Object) true);
        double double9 = complex6.getImaginary();
        org.apache.commons.math3.complex.Complex complex10 = complex6.sinh();
        org.apache.commons.math3.complex.Complex complex12 = complex6.multiply(0.0d);
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex1, complex6);
        org.apache.commons.math3.complex.Complex complex15 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math3.complex.Complex complex17 = complex15.tanh();
        boolean boolean19 = complex17.equals((java.lang.Object) true);
        double double20 = complex17.getImaginary();
        org.apache.commons.math3.complex.Complex complex22 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double23 = complex22.getReal();
        org.apache.commons.math3.complex.Complex complex25 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double26 = complex25.getReal();
        boolean boolean27 = org.apache.commons.math3.complex.Complex.equals(complex22, complex25);
        org.apache.commons.math3.complex.Complex complex29 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean31 = org.apache.commons.math3.complex.Complex.equals(complex22, complex29, 10);
        org.apache.commons.math3.complex.Complex complex33 = complex29.pow((double) (byte) 1);
        boolean boolean35 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex17, complex29, (double) (-1));
        org.apache.commons.math3.complex.Complex complex36 = complex6.subtract(complex29);
        java.lang.String str37 = complex36.toString();
        org.apache.commons.math3.complex.Complex complex38 = complex36.cos();
        org.apache.commons.math3.complex.Complex complex39 = complex36.conjugate();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-1.0d) + "'", double23 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-1.0d) + "'", double26 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "(1.0, 0.0)" + "'", str37.equals("(1.0, 0.0)"));
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
    }

    @Test
    public void test03() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test03");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf((double) (short) 10, (double) 100);
        java.lang.Class<?> wildcardClass3 = complex2.getClass();
        double double4 = complex2.getImaginary();
        org.apache.commons.math3.complex.Complex complex5 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex6 = complex5.asin();
        org.apache.commons.math3.complex.Complex complex7 = complex5.tanh();
        boolean boolean8 = complex2.equals((java.lang.Object) complex7);
        org.apache.commons.math3.complex.Complex complex9 = complex2.cosh();
        org.apache.commons.math3.complex.Complex complex10 = complex2.reciprocal();
        java.lang.Class<?> wildcardClass11 = complex2.getClass();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test04() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test04");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex(0.7615941559557649d, (double) 1.0f);
    }

    @Test
    public void test05() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test05");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex9 = complex3.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double15 = complex14.getReal();
        boolean boolean16 = org.apache.commons.math3.complex.Complex.equals(complex11, complex14);
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean20 = org.apache.commons.math3.complex.Complex.equals(complex11, complex18, 10);
        org.apache.commons.math3.complex.Complex complex22 = complex18.pow((double) (byte) 1);
        boolean boolean24 = org.apache.commons.math3.complex.Complex.equals(complex3, complex22, (int) (short) -1);
        org.apache.commons.math3.complex.ComplexField complexField25 = complex3.getField();
        org.apache.commons.math3.complex.Complex complex26 = complex3.exp();
        org.apache.commons.math3.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math3.complex.Complex complex28 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex30 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double31 = complex30.getReal();
        org.apache.commons.math3.complex.Complex complex33 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math3.complex.Complex complex35 = complex33.tanh();
        boolean boolean37 = complex35.equals((java.lang.Object) true);
        double double38 = complex35.getImaginary();
        org.apache.commons.math3.complex.Complex complex39 = complex35.sinh();
        org.apache.commons.math3.complex.Complex complex41 = complex35.multiply(0.0d);
        boolean boolean42 = org.apache.commons.math3.complex.Complex.equals(complex30, complex35);
        org.apache.commons.math3.complex.Complex complex44 = complex30.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex45 = complex28.subtract(complex44);
        org.apache.commons.math3.complex.Complex complex47 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double48 = complex47.getReal();
        double double49 = complex47.getReal();
        org.apache.commons.math3.complex.Complex complex50 = complex47.tan();
        org.apache.commons.math3.complex.Complex complex51 = complex44.pow(complex50);
        org.apache.commons.math3.complex.Complex complex52 = complex51.sinh();
        org.apache.commons.math3.complex.Complex complex54 = complex51.multiply(0);
        org.apache.commons.math3.complex.Complex complex55 = complex27.multiply(complex51);
        org.apache.commons.math3.complex.Complex complex56 = complex55.cosh();
        org.apache.commons.math3.complex.Complex complex57 = complex56.conjugate();
        org.apache.commons.math3.complex.Complex complex58 = complex57.sqrt1z();
        org.apache.commons.math3.complex.Complex complex60 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double61 = complex60.getReal();
        double double62 = complex60.getReal();
        org.apache.commons.math3.complex.Complex complex63 = complex60.tan();
        org.apache.commons.math3.complex.Complex complex64 = complex60.sinh();
        double double65 = complex60.getImaginary();
        org.apache.commons.math3.complex.Complex complex66 = complex60.conjugate();
        org.apache.commons.math3.complex.Complex complex67 = complex60.acos();
        boolean boolean68 = complex58.equals((java.lang.Object) complex60);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(complexField25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-1.0d) + "'", double31 == (-1.0d));
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-1.0d) + "'", double48 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-1.0d) + "'", double49 == (-1.0d));
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-1.0d) + "'", double61 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-1.0d) + "'", double62 == (-1.0d));
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test06() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test06");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        org.apache.commons.math3.complex.Complex complex7 = new org.apache.commons.math3.complex.Complex((double) (short) 0);
        org.apache.commons.math3.complex.Complex complex8 = complex3.divide(complex7);
        org.apache.commons.math3.complex.Complex complex10 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex11 = complex10.cos();
        double double12 = complex11.getImaginary();
        org.apache.commons.math3.complex.Complex complex13 = complex11.sin();
        org.apache.commons.math3.complex.Complex complex14 = complex3.add(complex11);
        org.apache.commons.math3.complex.Complex complex16 = complex11.divide(6.123233995736766E-17d);
        org.apache.commons.math3.complex.Complex complex17 = complex11.sin();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-0.0d) + "'", double12 == (-0.0d));
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
    }

    @Test
    public void test07() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test07");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex9 = complex3.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double15 = complex14.getReal();
        boolean boolean16 = org.apache.commons.math3.complex.Complex.equals(complex11, complex14);
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean20 = org.apache.commons.math3.complex.Complex.equals(complex11, complex18, 10);
        org.apache.commons.math3.complex.Complex complex22 = complex18.pow((double) (byte) 1);
        boolean boolean24 = org.apache.commons.math3.complex.Complex.equals(complex3, complex22, (int) (short) -1);
        org.apache.commons.math3.complex.ComplexField complexField25 = complex3.getField();
        org.apache.commons.math3.complex.Complex complex26 = complex3.exp();
        org.apache.commons.math3.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math3.complex.Complex complex29 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math3.complex.Complex complex31 = complex29.tanh();
        boolean boolean33 = complex31.equals((java.lang.Object) true);
        double double34 = complex31.getImaginary();
        org.apache.commons.math3.complex.Complex complex35 = complex31.sinh();
        org.apache.commons.math3.complex.Complex complex36 = complex31.cosh();
        org.apache.commons.math3.complex.Complex complex38 = complex36.subtract((double) 0L);
        boolean boolean39 = complex26.equals((java.lang.Object) 0L);
        org.apache.commons.math3.complex.Complex complex40 = complex26.log();
        org.apache.commons.math3.complex.Complex complex41 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex43 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double44 = complex43.getReal();
        org.apache.commons.math3.complex.Complex complex46 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math3.complex.Complex complex48 = complex46.tanh();
        boolean boolean50 = complex48.equals((java.lang.Object) true);
        double double51 = complex48.getImaginary();
        org.apache.commons.math3.complex.Complex complex52 = complex48.sinh();
        org.apache.commons.math3.complex.Complex complex54 = complex48.multiply(0.0d);
        boolean boolean55 = org.apache.commons.math3.complex.Complex.equals(complex43, complex48);
        org.apache.commons.math3.complex.Complex complex57 = complex43.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex58 = complex41.subtract(complex57);
        org.apache.commons.math3.complex.Complex complex59 = complex41.tan();
        org.apache.commons.math3.complex.Complex complex60 = complex26.multiply(complex59);
        org.apache.commons.math3.complex.Complex complex63 = org.apache.commons.math3.complex.Complex.valueOf((double) (byte) 100, (double) 0L);
        double double64 = complex63.getImaginary();
        org.apache.commons.math3.complex.Complex complex67 = new org.apache.commons.math3.complex.Complex(100.0d, (double) (short) 100);
        double double68 = complex67.getReal();
        org.apache.commons.math3.complex.Complex complex69 = complex67.cosh();
        double double70 = complex67.getArgument();
        org.apache.commons.math3.complex.Complex complex71 = complex63.divide(complex67);
        org.apache.commons.math3.complex.Complex complex72 = complex26.divide(complex71);
        org.apache.commons.math3.complex.Complex complex73 = complex71.exp();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(complexField25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1.0d) + "'", double44 == (-1.0d));
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 100.0d + "'", double68 == 100.0d);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.7853981633974483d + "'", double70 == 0.7853981633974483d);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
    }

    @Test
    public void test08() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test08");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf((-2.0d), (double) 'a');
        org.apache.commons.math3.complex.Complex complex4 = complex2.multiply((int) (byte) 0);
        org.apache.commons.math3.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math3.complex.Complex complex7 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math3.complex.Complex complex9 = complex7.tanh();
        org.apache.commons.math3.complex.Complex complex10 = complex9.sin();
        org.apache.commons.math3.complex.Complex complex12 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex13 = complex12.sqrt();
        boolean boolean15 = org.apache.commons.math3.complex.Complex.equals(complex9, complex12, (int) (byte) -1);
        org.apache.commons.math3.complex.Complex complex16 = complex9.cosh();
        org.apache.commons.math3.complex.Complex complex18 = complex16.multiply(10);
        org.apache.commons.math3.complex.Complex complex19 = complex16.sin();
        boolean boolean21 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex4, complex19, (double) 100);
        org.apache.commons.math3.complex.Complex complex22 = complex19.conjugate();
        org.apache.commons.math3.complex.Complex complex23 = complex19.sin();
        org.apache.commons.math3.complex.Complex complex25 = complex19.subtract((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex27 = complex25.subtract(Double.NaN);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex27);
    }

    @Test
    public void test09() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test09");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex9 = complex3.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double15 = complex14.getReal();
        boolean boolean16 = org.apache.commons.math3.complex.Complex.equals(complex11, complex14);
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean20 = org.apache.commons.math3.complex.Complex.equals(complex11, complex18, 10);
        org.apache.commons.math3.complex.Complex complex22 = complex18.pow((double) (byte) 1);
        boolean boolean24 = org.apache.commons.math3.complex.Complex.equals(complex3, complex22, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex25 = complex3.exp();
        org.apache.commons.math3.complex.Complex complex27 = complex25.multiply(Double.NaN);
        org.apache.commons.math3.complex.Complex complex29 = complex25.pow(Double.NaN);
        org.apache.commons.math3.complex.Complex complex31 = complex25.divide(1.2645189576252271d);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex31);
    }

    @Test
    public void test10() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test10");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math3.complex.Complex complex6 = complex4.tanh();
        boolean boolean8 = complex6.equals((java.lang.Object) true);
        double double9 = complex6.getImaginary();
        org.apache.commons.math3.complex.Complex complex10 = complex6.sinh();
        org.apache.commons.math3.complex.Complex complex12 = complex6.multiply(0.0d);
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex1, complex6);
        org.apache.commons.math3.complex.Complex complex15 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math3.complex.Complex complex17 = complex15.sqrt1z();
        org.apache.commons.math3.complex.Complex complex18 = complex6.subtract(complex15);
        org.apache.commons.math3.complex.Complex complex19 = complex18.reciprocal();
        org.apache.commons.math3.complex.Complex complex20 = complex19.acos();
        double double21 = complex20.getArgument();
        org.apache.commons.math3.complex.Complex complex23 = complex20.multiply((double) (byte) 1);
        org.apache.commons.math3.complex.Complex complex24 = complex20.acos();
        org.apache.commons.math3.complex.Complex complex25 = complex24.conjugate();
        org.apache.commons.math3.complex.Complex complex26 = complex24.sqrt();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertEquals((double) double21, Double.NaN, 0);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
    }

    @Test
    public void test11() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test11");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math3.complex.Complex complex6 = complex4.tanh();
        boolean boolean8 = complex6.equals((java.lang.Object) true);
        double double9 = complex6.getImaginary();
        org.apache.commons.math3.complex.Complex complex10 = complex6.sinh();
        org.apache.commons.math3.complex.Complex complex12 = complex6.multiply(0.0d);
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex1, complex6);
        org.apache.commons.math3.complex.Complex complex14 = complex1.sqrt1z();
        java.util.List<org.apache.commons.math3.complex.Complex> complexList16 = complex14.nthRoot((int) '4');
        org.apache.commons.math3.complex.Complex complex17 = complex14.asin();
        double double18 = complex17.getReal();
        org.apache.commons.math3.complex.Complex complex20 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math3.complex.Complex complex22 = complex20.tanh();
        org.apache.commons.math3.complex.Complex complex23 = complex22.sin();
        org.apache.commons.math3.complex.Complex complex25 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex26 = complex25.sqrt();
        boolean boolean28 = org.apache.commons.math3.complex.Complex.equals(complex22, complex25, (int) (byte) -1);
        org.apache.commons.math3.complex.Complex complex29 = complex22.cosh();
        org.apache.commons.math3.complex.Complex complex31 = complex29.multiply(10);
        org.apache.commons.math3.complex.Complex complex33 = complex31.pow((double) (-1.0f));
        org.apache.commons.math3.complex.Complex complex34 = complex31.sinh();
        org.apache.commons.math3.complex.Complex complex35 = complex17.pow(complex31);
        org.apache.commons.math3.complex.Complex complex36 = complex17.sinh();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complexList16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
    }

    @Test
    public void test12() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test12");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex8 = complex3.cosh();
        double double9 = complex3.getImaginary();
        double double10 = complex3.abs();
        org.apache.commons.math3.complex.Complex complex12 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double13 = complex12.getReal();
        org.apache.commons.math3.complex.Complex complex15 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double16 = complex15.getReal();
        boolean boolean17 = org.apache.commons.math3.complex.Complex.equals(complex12, complex15);
        org.apache.commons.math3.complex.Complex complex19 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean21 = org.apache.commons.math3.complex.Complex.equals(complex12, complex19, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex23 = new org.apache.commons.math3.complex.Complex((-1.557407724654902d));
        org.apache.commons.math3.complex.Complex complex24 = complex12.multiply(complex23);
        org.apache.commons.math3.complex.Complex complex25 = complex3.pow(complex12);
        org.apache.commons.math3.complex.Complex complex27 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex29 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double30 = complex29.getReal();
        org.apache.commons.math3.complex.Complex complex32 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double33 = complex32.getReal();
        boolean boolean34 = org.apache.commons.math3.complex.Complex.equals(complex29, complex32);
        boolean boolean36 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex27, complex29, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex38 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex40 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double41 = complex40.getReal();
        org.apache.commons.math3.complex.Complex complex43 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double44 = complex43.getReal();
        boolean boolean45 = org.apache.commons.math3.complex.Complex.equals(complex40, complex43);
        boolean boolean47 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex38, complex40, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex48 = complex38.log();
        org.apache.commons.math3.complex.Complex complex50 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double51 = complex50.getReal();
        org.apache.commons.math3.complex.Complex complex53 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double54 = complex53.getReal();
        boolean boolean55 = org.apache.commons.math3.complex.Complex.equals(complex50, complex53);
        org.apache.commons.math3.complex.Complex complex57 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean59 = org.apache.commons.math3.complex.Complex.equals(complex50, complex57, 10);
        org.apache.commons.math3.complex.Complex complex61 = complex57.pow((double) (byte) 1);
        boolean boolean62 = org.apache.commons.math3.complex.Complex.equals(complex38, complex61);
        boolean boolean63 = complex29.equals((java.lang.Object) complex38);
        org.apache.commons.math3.complex.Complex complex64 = complex29.reciprocal();
        org.apache.commons.math3.complex.Complex complex65 = complex25.multiply(complex64);
        org.apache.commons.math3.complex.Complex complex66 = complex65.sinh();
        java.lang.Class<?> wildcardClass67 = complex66.getClass();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1.0d) + "'", double13 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1.0d) + "'", double16 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1.0d) + "'", double30 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-1.0d) + "'", double33 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-1.0d) + "'", double41 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1.0d) + "'", double44 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-1.0d) + "'", double51 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1.0d) + "'", double54 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test13() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test13");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.conjugate();
        double double3 = complex1.getImaginary();
        java.util.List<org.apache.commons.math3.complex.Complex> complexList5 = complex1.nthRoot(1);
        double double6 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex9 = org.apache.commons.math3.complex.Complex.valueOf((double) (short) 10, (double) 100);
        java.lang.Class<?> wildcardClass10 = complex9.getClass();
        double double11 = complex9.getImaginary();
        org.apache.commons.math3.complex.Complex complex13 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math3.complex.Complex complex15 = complex13.tanh();
        double double16 = complex15.abs();
        org.apache.commons.math3.complex.Complex complex17 = complex15.exp();
        org.apache.commons.math3.complex.Complex complex18 = complex17.negate();
        org.apache.commons.math3.complex.Complex complex20 = complex18.pow((-0.0d));
        org.apache.commons.math3.complex.Complex complex21 = complex20.tan();
        org.apache.commons.math3.complex.Complex complex22 = complex9.multiply(complex20);
        org.apache.commons.math3.complex.Complex complex23 = complex20.asin();
        boolean boolean24 = org.apache.commons.math3.complex.Complex.equals(complex1, complex23);
        org.apache.commons.math3.complex.Complex complex26 = complex1.subtract(0.0d);
        org.apache.commons.math3.complex.Complex complex27 = complex1.tanh();
        org.apache.commons.math3.complex.Complex complex30 = org.apache.commons.math3.complex.Complex.valueOf((-2.0d), (double) 'a');
        org.apache.commons.math3.complex.Complex complex32 = complex30.multiply((int) (byte) 0);
        org.apache.commons.math3.complex.Complex complex33 = complex30.conjugate();
        boolean boolean35 = org.apache.commons.math3.complex.Complex.equals(complex1, complex33, (int) 'a');
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(complexList5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test14() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test14");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(3.501929622595518d);
        org.junit.Assert.assertNotNull(complex1);
    }

    @Test
    public void test15() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test15");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = complex1.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        org.apache.commons.math3.complex.Complex complex8 = complex4.divide(complex6);
        org.apache.commons.math3.complex.Complex complex10 = complex8.multiply(10.0d);
        org.apache.commons.math3.complex.ComplexField complexField11 = complex10.getField();
        org.apache.commons.math3.complex.Complex complex12 = complex10.tanh();
        double double13 = complex10.getImaginary();
        org.apache.commons.math3.complex.Complex complex14 = complex10.conjugate();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexField11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-0.0d) + "'", double13 == (-0.0d));
        org.junit.Assert.assertNotNull(complex14);
    }

    @Test
    public void test16() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test16");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double9 = complex8.getReal();
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex8, complex11);
        org.apache.commons.math3.complex.Complex complex15 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean17 = org.apache.commons.math3.complex.Complex.equals(complex8, complex15, 10);
        org.apache.commons.math3.complex.Complex complex19 = complex15.pow((double) (byte) 1);
        boolean boolean21 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex3, complex15, (double) (-1));
        org.apache.commons.math3.complex.Complex complex22 = complex15.sin();
        org.apache.commons.math3.complex.Complex complex24 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double27 = complex26.getReal();
        org.apache.commons.math3.complex.Complex complex29 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double30 = complex29.getReal();
        boolean boolean31 = org.apache.commons.math3.complex.Complex.equals(complex26, complex29);
        boolean boolean33 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex24, complex26, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex34 = complex24.log();
        org.apache.commons.math3.complex.Complex complex35 = complex34.exp();
        boolean boolean36 = complex35.isInfinite();
        org.apache.commons.math3.complex.Complex complex37 = complex22.multiply(complex35);
        double double38 = complex37.getReal();
        org.apache.commons.math3.complex.Complex complex39 = complex37.reciprocal();
        org.apache.commons.math3.complex.Complex complex41 = complex37.pow(1.5707963267948966d);
        org.apache.commons.math3.complex.Complex complex43 = complex37.add((double) 0.0f);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1.0d) + "'", double27 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1.0d) + "'", double30 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.8414709848078965d + "'", double38 == 0.8414709848078965d);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex43);
    }

    @Test
    public void test17() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test17");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equals(complex1, complex8, 10);
        org.apache.commons.math3.complex.Complex complex11 = complex8.sin();
        org.apache.commons.math3.complex.Complex complex12 = complex8.sinh();
        org.apache.commons.math3.complex.Complex complex14 = complex8.add(1.0d);
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double19 = complex18.getReal();
        org.apache.commons.math3.complex.Complex complex21 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double22 = complex21.getReal();
        boolean boolean23 = org.apache.commons.math3.complex.Complex.equals(complex18, complex21);
        boolean boolean25 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex16, complex18, (double) 0.0f);
        java.lang.String str26 = complex16.toString();
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double29 = complex28.getReal();
        org.apache.commons.math3.complex.Complex complex31 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double32 = complex31.getReal();
        boolean boolean33 = org.apache.commons.math3.complex.Complex.equals(complex28, complex31);
        org.apache.commons.math3.complex.Complex complex35 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean37 = org.apache.commons.math3.complex.Complex.equals(complex28, complex35, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex38 = complex16.add(complex35);
        java.lang.String str39 = complex35.toString();
        org.apache.commons.math3.complex.Complex complex41 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex42 = complex35.divide(complex41);
        org.apache.commons.math3.complex.ComplexField complexField43 = complex41.getField();
        org.apache.commons.math3.complex.Complex complex44 = complex14.pow(complex41);
        org.apache.commons.math3.complex.Complex complex46 = complex44.multiply(10);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.0d) + "'", double19 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "(-1.0, 0.0)" + "'", str26.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1.0d) + "'", double29 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-1.0d) + "'", double32 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "(-1.0, 0.0)" + "'", str39.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complexField43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex46);
    }

    @Test
    public void test18() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test18");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex9 = complex3.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double15 = complex14.getReal();
        boolean boolean16 = org.apache.commons.math3.complex.Complex.equals(complex11, complex14);
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean20 = org.apache.commons.math3.complex.Complex.equals(complex11, complex18, 10);
        org.apache.commons.math3.complex.Complex complex22 = complex18.pow((double) (byte) 1);
        boolean boolean24 = org.apache.commons.math3.complex.Complex.equals(complex3, complex22, (int) (short) -1);
        org.apache.commons.math3.complex.ComplexField complexField25 = complex3.getField();
        org.apache.commons.math3.complex.Complex complex26 = complex3.negate();
        org.apache.commons.math3.complex.Complex complex28 = complex3.multiply((-1.9643867237284715E-15d));
        org.apache.commons.math3.complex.Complex complex29 = complex3.cosh();
        org.apache.commons.math3.complex.Complex complex30 = complex3.sqrt1z();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(complexField25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
    }

    @Test
    public void test19() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test19");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equals(complex1, complex8, 10);
        org.apache.commons.math3.complex.Complex complex11 = complex8.sin();
        org.apache.commons.math3.complex.Complex complex12 = complex8.sinh();
        org.apache.commons.math3.complex.Complex complex13 = complex12.sqrt();
        java.lang.Class<?> wildcardClass14 = complex13.getClass();
        org.apache.commons.math3.complex.Complex complex15 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex17 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double18 = complex17.getReal();
        org.apache.commons.math3.complex.Complex complex20 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math3.complex.Complex complex22 = complex20.tanh();
        boolean boolean24 = complex22.equals((java.lang.Object) true);
        double double25 = complex22.getImaginary();
        org.apache.commons.math3.complex.Complex complex26 = complex22.sinh();
        org.apache.commons.math3.complex.Complex complex28 = complex22.multiply(0.0d);
        boolean boolean29 = org.apache.commons.math3.complex.Complex.equals(complex17, complex22);
        org.apache.commons.math3.complex.Complex complex31 = complex17.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex32 = complex15.subtract(complex31);
        org.apache.commons.math3.complex.Complex complex34 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double35 = complex34.getReal();
        double double36 = complex34.getReal();
        org.apache.commons.math3.complex.Complex complex37 = complex34.tan();
        org.apache.commons.math3.complex.Complex complex38 = complex31.pow(complex37);
        org.apache.commons.math3.complex.Complex complex39 = complex38.asin();
        org.apache.commons.math3.complex.Complex complex40 = complex38.sin();
        org.apache.commons.math3.complex.Complex complex42 = complex40.divide(0.8414709848078965d);
        org.apache.commons.math3.complex.Complex complex44 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double45 = complex44.getReal();
        double double46 = complex44.getReal();
        org.apache.commons.math3.complex.Complex complex47 = complex44.tan();
        org.apache.commons.math3.complex.Complex complex48 = complex44.exp();
        org.apache.commons.math3.complex.Complex complex50 = complex44.multiply((double) 10);
        org.apache.commons.math3.complex.Complex complex52 = complex44.multiply((int) (short) 100);
        org.apache.commons.math3.complex.Complex complex54 = complex44.add(32.0d);
        boolean boolean55 = complex40.equals((java.lang.Object) 32.0d);
        org.apache.commons.math3.complex.Complex complex57 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex58 = complex57.acos();
        org.apache.commons.math3.complex.Complex complex59 = complex58.cos();
        org.apache.commons.math3.complex.Complex complex60 = complex40.pow(complex59);
        org.apache.commons.math3.complex.Complex complex61 = complex13.divide(complex59);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.0d) + "'", double18 == (-1.0d));
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-1.0d) + "'", double35 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-1.0d) + "'", double36 == (-1.0d));
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1.0d) + "'", double45 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1.0d) + "'", double46 == (-1.0d));
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
    }

    @Test
    public void test20() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test20");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        java.lang.String str11 = complex1.toString();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex23 = complex1.add(complex20);
        org.apache.commons.math3.complex.Complex complex24 = org.apache.commons.math3.complex.Complex.NaN;
        org.apache.commons.math3.complex.Complex complex25 = complex20.subtract(complex24);
        org.apache.commons.math3.complex.Complex complex27 = complex20.multiply((int) (byte) -1);
        org.apache.commons.math3.complex.Complex complex28 = complex20.tan();
        org.apache.commons.math3.complex.Complex complex30 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double31 = complex30.getReal();
        org.apache.commons.math3.complex.Complex complex33 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double34 = complex33.getReal();
        boolean boolean35 = org.apache.commons.math3.complex.Complex.equals(complex30, complex33);
        org.apache.commons.math3.complex.Complex complex37 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean39 = org.apache.commons.math3.complex.Complex.equals(complex30, complex37, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex41 = new org.apache.commons.math3.complex.Complex((double) (short) 10);
        double double42 = complex41.getReal();
        boolean boolean43 = complex30.equals((java.lang.Object) complex41);
        org.apache.commons.math3.complex.Complex complex44 = complex41.sin();
        org.apache.commons.math3.complex.Complex complex45 = complex41.exp();
        org.apache.commons.math3.complex.Complex complex47 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math3.complex.Complex complex49 = complex47.tanh();
        boolean boolean51 = complex49.equals((java.lang.Object) true);
        double double52 = complex49.getImaginary();
        org.apache.commons.math3.complex.Complex complex53 = complex49.sinh();
        org.apache.commons.math3.complex.Complex complex54 = complex49.sinh();
        double double55 = complex54.getReal();
        boolean boolean56 = org.apache.commons.math3.complex.Complex.equals(complex41, complex54);
        org.apache.commons.math3.complex.Complex complex57 = complex28.pow(complex41);
        org.apache.commons.math3.complex.Complex complex59 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex61 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double62 = complex61.getReal();
        org.apache.commons.math3.complex.Complex complex64 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double65 = complex64.getReal();
        boolean boolean66 = org.apache.commons.math3.complex.Complex.equals(complex61, complex64);
        boolean boolean68 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex59, complex61, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex69 = complex61.tan();
        org.apache.commons.math3.complex.Complex complex70 = complex69.sqrt();
        org.apache.commons.math3.complex.Complex complex71 = complex57.add(complex70);
        boolean boolean72 = complex70.isInfinite();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "(-1.0, 0.0)" + "'", str11.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-1.0d) + "'", double31 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 10.0d + "'", double42 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-1.0d) + "'", double62 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + (-1.0d) + "'", double65 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test21() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test21");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equals(complex1, complex8, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex12 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double15 = complex14.getReal();
        org.apache.commons.math3.complex.Complex complex17 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double18 = complex17.getReal();
        boolean boolean19 = org.apache.commons.math3.complex.Complex.equals(complex14, complex17);
        boolean boolean21 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex12, complex14, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex23 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex25 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double26 = complex25.getReal();
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double29 = complex28.getReal();
        boolean boolean30 = org.apache.commons.math3.complex.Complex.equals(complex25, complex28);
        boolean boolean32 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex23, complex25, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex33 = complex23.log();
        org.apache.commons.math3.complex.Complex complex35 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double36 = complex35.getReal();
        org.apache.commons.math3.complex.Complex complex38 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double39 = complex38.getReal();
        boolean boolean40 = org.apache.commons.math3.complex.Complex.equals(complex35, complex38);
        org.apache.commons.math3.complex.Complex complex42 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean44 = org.apache.commons.math3.complex.Complex.equals(complex35, complex42, 10);
        org.apache.commons.math3.complex.Complex complex46 = complex42.pow((double) (byte) 1);
        boolean boolean47 = org.apache.commons.math3.complex.Complex.equals(complex23, complex46);
        boolean boolean48 = complex14.equals((java.lang.Object) complex23);
        boolean boolean50 = org.apache.commons.math3.complex.Complex.equals(complex1, complex23, (int) (byte) 100);
        org.apache.commons.math3.complex.Complex complex51 = complex1.cos();
        org.apache.commons.math3.complex.Complex complex54 = org.apache.commons.math3.complex.Complex.valueOf((double) (byte) 100, (double) 0L);
        org.apache.commons.math3.complex.Complex complex56 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math3.complex.Complex complex58 = complex56.tanh();
        boolean boolean60 = complex58.equals((java.lang.Object) true);
        double double61 = complex58.getImaginary();
        org.apache.commons.math3.complex.Complex complex62 = complex58.sinh();
        org.apache.commons.math3.complex.Complex complex63 = complex58.cosh();
        double double64 = complex58.getImaginary();
        double double65 = complex58.abs();
        org.apache.commons.math3.complex.Complex complex66 = complex54.add(complex58);
        boolean boolean68 = org.apache.commons.math3.complex.Complex.equals(complex1, complex54, (-1.0d));
        org.apache.commons.math3.complex.Complex complex70 = complex1.multiply((-1));
        org.apache.commons.math3.complex.Complex complex71 = complex1.conjugate();
        org.apache.commons.math3.complex.Complex complex72 = complex71.tanh();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.0d) + "'", double18 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-1.0d) + "'", double26 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1.0d) + "'", double29 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-1.0d) + "'", double36 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-1.0d) + "'", double39 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
    }

    @Test
    public void test22() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test22");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        double double4 = complex3.abs();
        org.apache.commons.math3.complex.Complex complex5 = complex3.cosh();
        org.apache.commons.math3.complex.Complex complex6 = complex3.cos();
        org.apache.commons.math3.complex.Complex complex8 = complex6.add((double) 0L);
        double double9 = complex8.getArgument();
        org.apache.commons.math3.complex.Complex complex10 = complex8.cos();
        double double11 = complex10.getReal();
        org.apache.commons.math3.complex.Complex complex12 = complex10.sqrt();
        org.apache.commons.math3.complex.Complex complex13 = complex12.atan();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-0.0d) + "'", double9 == (-0.0d));
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.5403023058681398d + "'", double11 == 0.5403023058681398d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
    }

    @Test
    public void test23() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test23");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) ' ');
        org.apache.commons.math3.complex.Complex complex2 = complex1.cosh();
        org.apache.commons.math3.complex.Complex complex4 = complex1.multiply((double) (-1L));
        org.apache.commons.math3.complex.Complex complex5 = complex4.sqrt();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
    }

    @Test
    public void test24() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test24");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex9 = complex3.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex10 = org.apache.commons.math3.complex.Complex.ZERO;
        org.apache.commons.math3.complex.Complex complex11 = complex10.log();
        org.apache.commons.math3.complex.Complex complex12 = complex11.sqrt();
        boolean boolean13 = complex3.equals((java.lang.Object) complex12);
        org.apache.commons.math3.complex.Complex complex14 = complex12.atan();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(complex14);
    }

    @Test
    public void test25() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test25");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex(0.7853981633974483d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt1z();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        org.apache.commons.math3.complex.Complex complex9 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double10 = complex9.getReal();
        boolean boolean11 = org.apache.commons.math3.complex.Complex.equals(complex6, complex9);
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex4, complex6, (double) 0.0f);
        java.lang.String str14 = complex4.toString();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        org.apache.commons.math3.complex.Complex complex19 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double20 = complex19.getReal();
        boolean boolean21 = org.apache.commons.math3.complex.Complex.equals(complex16, complex19);
        org.apache.commons.math3.complex.Complex complex23 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean25 = org.apache.commons.math3.complex.Complex.equals(complex16, complex23, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex26 = complex4.add(complex23);
        org.apache.commons.math3.complex.Complex complex27 = org.apache.commons.math3.complex.Complex.NaN;
        org.apache.commons.math3.complex.Complex complex28 = complex23.subtract(complex27);
        boolean boolean29 = org.apache.commons.math3.complex.Complex.equals(complex2, complex23);
        org.apache.commons.math3.complex.Complex complex30 = complex2.cosh();
        org.apache.commons.math3.complex.Complex complex31 = complex2.atan();
        boolean boolean32 = complex2.isInfinite();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "(-1.0, 0.0)" + "'", str14.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1.0d) + "'", double20 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test26() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test26");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) 0L);
        org.apache.commons.math3.complex.Complex complex2 = complex1.exp();
        org.apache.commons.math3.complex.Complex complex3 = complex2.negate();
        org.apache.commons.math3.complex.Complex complex5 = complex3.divide(1.0d);
        org.apache.commons.math3.complex.Complex complex7 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex9 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double10 = complex9.getReal();
        org.apache.commons.math3.complex.Complex complex12 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double13 = complex12.getReal();
        boolean boolean14 = org.apache.commons.math3.complex.Complex.equals(complex9, complex12);
        boolean boolean16 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex7, complex9, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double19 = complex18.getReal();
        org.apache.commons.math3.complex.Complex complex21 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math3.complex.Complex complex23 = complex21.tanh();
        boolean boolean25 = complex23.equals((java.lang.Object) true);
        double double26 = complex23.getImaginary();
        org.apache.commons.math3.complex.Complex complex27 = complex23.sinh();
        org.apache.commons.math3.complex.Complex complex29 = complex23.multiply(0.0d);
        boolean boolean30 = org.apache.commons.math3.complex.Complex.equals(complex18, complex23);
        org.apache.commons.math3.complex.Complex complex32 = complex18.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex34 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math3.complex.Complex complex36 = complex34.tanh();
        boolean boolean38 = complex36.equals((java.lang.Object) true);
        double double39 = complex36.getImaginary();
        org.apache.commons.math3.complex.Complex complex40 = complex32.add(complex36);
        boolean boolean42 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex9, complex40, (double) 10);
        org.apache.commons.math3.complex.Complex complex44 = complex40.pow(0.0d);
        org.apache.commons.math3.complex.Complex complex46 = complex40.add(Double.NaN);
        org.apache.commons.math3.complex.Complex complex48 = complex46.multiply(1.9643867237284715E-15d);
        org.apache.commons.math3.complex.Complex complex50 = complex48.multiply((double) (-1L));
        org.apache.commons.math3.complex.Complex complex51 = complex50.cos();
        org.apache.commons.math3.complex.Complex complex52 = complex5.add(complex51);
        boolean boolean53 = complex51.isNaN();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1.0d) + "'", double13 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.0d) + "'", double19 == (-1.0d));
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test27() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test27");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        java.lang.String str11 = complex1.toString();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex23 = complex1.add(complex20);
        java.lang.String str24 = complex20.toString();
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex27 = complex20.divide(complex26);
        org.apache.commons.math3.complex.Complex complex28 = complex26.negate();
        org.apache.commons.math3.complex.Complex complex29 = complex26.log();
        org.apache.commons.math3.complex.Complex complex31 = complex29.divide((double) 100L);
        org.apache.commons.math3.complex.Complex complex32 = complex31.log();
        org.apache.commons.math3.complex.Complex complex34 = complex31.multiply(1.2645189576252271d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "(-1.0, 0.0)" + "'", str11.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "(-1.0, 0.0)" + "'", str24.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex34);
    }

    @Test
    public void test28() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test28");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.acos();
        org.apache.commons.math3.complex.Complex complex3 = complex2.cos();
        org.apache.commons.math3.complex.Complex complex4 = complex2.tan();
        try {
            java.util.List<org.apache.commons.math3.complex.Complex> complexList6 = complex4.nthRoot(0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotPositiveException; message: cannot compute nth root for null or negative n: 0");
        } catch (org.apache.commons.math3.exception.NotPositiveException e) {
        }
    }

    @Test
    public void test29() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test29");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        double double3 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = complex1.tan();
        org.apache.commons.math3.complex.Complex complex5 = complex1.exp();
        org.apache.commons.math3.complex.Complex complex7 = complex1.multiply((double) 10);
        org.apache.commons.math3.complex.Complex complex9 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math3.complex.Complex complex11 = complex9.tanh();
        boolean boolean13 = complex11.equals((java.lang.Object) true);
        double double14 = complex11.getImaginary();
        org.apache.commons.math3.complex.Complex complex15 = complex11.sinh();
        org.apache.commons.math3.complex.Complex complex17 = complex11.multiply(10);
        org.apache.commons.math3.complex.Complex complex18 = complex17.sqrt1z();
        boolean boolean20 = org.apache.commons.math3.complex.Complex.equals(complex1, complex17, 0.0d);
        org.apache.commons.math3.complex.Complex complex22 = complex1.add((double) 100.0f);
        org.apache.commons.math3.complex.Complex complex24 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double25 = complex24.getReal();
        org.apache.commons.math3.complex.Complex complex27 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex28 = complex27.sqrt();
        org.apache.commons.math3.complex.Complex complex29 = complex27.tanh();
        boolean boolean31 = complex29.equals((java.lang.Object) true);
        double double32 = complex29.getImaginary();
        org.apache.commons.math3.complex.Complex complex33 = complex29.sinh();
        org.apache.commons.math3.complex.Complex complex35 = complex29.multiply(0.0d);
        boolean boolean36 = org.apache.commons.math3.complex.Complex.equals(complex24, complex29);
        org.apache.commons.math3.complex.Complex complex38 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math3.complex.Complex complex40 = complex38.tanh();
        boolean boolean42 = complex40.equals((java.lang.Object) true);
        double double43 = complex40.getImaginary();
        org.apache.commons.math3.complex.Complex complex45 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double46 = complex45.getReal();
        org.apache.commons.math3.complex.Complex complex48 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double49 = complex48.getReal();
        boolean boolean50 = org.apache.commons.math3.complex.Complex.equals(complex45, complex48);
        org.apache.commons.math3.complex.Complex complex52 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean54 = org.apache.commons.math3.complex.Complex.equals(complex45, complex52, 10);
        org.apache.commons.math3.complex.Complex complex56 = complex52.pow((double) (byte) 1);
        boolean boolean58 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex40, complex52, (double) (-1));
        org.apache.commons.math3.complex.Complex complex59 = complex29.subtract(complex52);
        org.apache.commons.math3.complex.Complex complex60 = complex52.sqrt();
        org.apache.commons.math3.complex.Complex complex62 = complex52.multiply((int) (short) 100);
        org.apache.commons.math3.complex.Complex complex65 = new org.apache.commons.math3.complex.Complex((double) (short) 100, (double) (short) -1);
        org.apache.commons.math3.complex.Complex complex66 = complex65.sqrt();
        org.apache.commons.math3.complex.Complex complex67 = complex52.multiply(complex65);
        double double68 = complex65.abs();
        org.apache.commons.math3.complex.Complex complex69 = complex1.subtract(complex65);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1.0d) + "'", double46 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-1.0d) + "'", double49 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 100.00499987500623d + "'", double68 == 100.00499987500623d);
        org.junit.Assert.assertNotNull(complex69);
    }

    @Test
    public void test30() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test30");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double9 = complex8.getReal();
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex8, complex11);
        org.apache.commons.math3.complex.Complex complex15 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean17 = org.apache.commons.math3.complex.Complex.equals(complex8, complex15, 10);
        org.apache.commons.math3.complex.Complex complex19 = complex15.pow((double) (byte) 1);
        boolean boolean21 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex3, complex15, (double) (-1));
        org.apache.commons.math3.complex.Complex complex22 = complex15.sin();
        org.apache.commons.math3.complex.Complex complex24 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double27 = complex26.getReal();
        org.apache.commons.math3.complex.Complex complex29 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double30 = complex29.getReal();
        boolean boolean31 = org.apache.commons.math3.complex.Complex.equals(complex26, complex29);
        boolean boolean33 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex24, complex26, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex34 = complex24.log();
        org.apache.commons.math3.complex.Complex complex35 = complex34.exp();
        boolean boolean36 = complex35.isInfinite();
        org.apache.commons.math3.complex.Complex complex37 = complex22.multiply(complex35);
        org.apache.commons.math3.complex.Complex complex39 = new org.apache.commons.math3.complex.Complex((double) ' ');
        org.apache.commons.math3.complex.Complex complex41 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double42 = complex41.getReal();
        org.apache.commons.math3.complex.Complex complex44 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math3.complex.Complex complex46 = complex44.tanh();
        boolean boolean48 = complex46.equals((java.lang.Object) true);
        double double49 = complex46.getImaginary();
        org.apache.commons.math3.complex.Complex complex50 = complex46.sinh();
        org.apache.commons.math3.complex.Complex complex52 = complex46.multiply(0.0d);
        boolean boolean53 = org.apache.commons.math3.complex.Complex.equals(complex41, complex46);
        org.apache.commons.math3.complex.Complex complex54 = complex39.divide(complex46);
        org.apache.commons.math3.complex.Complex complex55 = complex46.cos();
        org.apache.commons.math3.complex.Complex complex56 = complex35.subtract(complex55);
        org.apache.commons.math3.complex.Complex complex57 = complex55.cos();
        java.lang.Class<?> wildcardClass58 = complex57.getClass();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1.0d) + "'", double27 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1.0d) + "'", double30 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + (-1.0d) + "'", double42 == (-1.0d));
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test31() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test31");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.cos();
        org.apache.commons.math3.complex.Complex complex3 = complex1.atan();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
    }

    @Test
    public void test32() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test32");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex11 = complex1.log();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, 10);
        org.apache.commons.math3.complex.Complex complex24 = complex20.pow((double) (byte) 1);
        boolean boolean25 = org.apache.commons.math3.complex.Complex.equals(complex1, complex24);
        org.apache.commons.math3.complex.Complex complex27 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double28 = complex27.getReal();
        double double29 = complex27.getReal();
        org.apache.commons.math3.complex.Complex complex30 = complex27.tan();
        org.apache.commons.math3.complex.Complex complex31 = complex27.exp();
        org.apache.commons.math3.complex.Complex complex33 = complex27.multiply((double) 10);
        boolean boolean34 = org.apache.commons.math3.complex.Complex.equals(complex1, complex33);
        org.apache.commons.math3.complex.Complex complex35 = complex33.cosh();
        org.apache.commons.math3.complex.Complex complex38 = new org.apache.commons.math3.complex.Complex(0.0d, (double) ' ');
        org.apache.commons.math3.complex.Complex complex39 = complex38.asin();
        org.apache.commons.math3.complex.Complex complex40 = complex38.exp();
        org.apache.commons.math3.complex.Complex complex42 = complex40.divide(3.1415926535897927d);
        boolean boolean43 = complex42.isInfinite();
        org.apache.commons.math3.complex.Complex complex44 = complex42.tan();
        org.apache.commons.math3.complex.Complex complex46 = complex44.multiply((int) ' ');
        org.apache.commons.math3.complex.Complex complex47 = complex35.divide(complex44);
        org.apache.commons.math3.complex.Complex complex48 = complex35.log();
        org.apache.commons.math3.complex.Complex complex49 = complex35.reciprocal();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-1.0d) + "'", double28 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1.0d) + "'", double29 == (-1.0d));
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
    }

    @Test
    public void test33() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test33");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.conjugate();
        double double3 = complex1.getImaginary();
        java.util.List<org.apache.commons.math3.complex.Complex> complexList5 = complex1.nthRoot(1);
        double double6 = complex1.getReal();
        boolean boolean7 = complex1.isNaN();
        org.apache.commons.math3.complex.Complex complex8 = complex1.atan();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(complexList5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
    }

    @Test
    public void test34() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test34");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math3.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math3.complex.Complex complex6 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex7 = complex6.sqrt();
        boolean boolean9 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6, (int) (byte) -1);
        org.apache.commons.math3.complex.Complex complex10 = complex3.cosh();
        org.apache.commons.math3.complex.Complex complex12 = complex10.multiply(10);
        org.apache.commons.math3.complex.Complex complex14 = complex12.pow((double) (-1.0f));
        org.apache.commons.math3.complex.Complex complex16 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex17 = complex16.sqrt();
        org.apache.commons.math3.complex.Complex complex18 = complex16.tanh();
        boolean boolean20 = complex18.equals((java.lang.Object) true);
        double double21 = complex18.getImaginary();
        org.apache.commons.math3.complex.Complex complex22 = complex18.sinh();
        org.apache.commons.math3.complex.Complex complex24 = complex18.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double27 = complex26.getReal();
        org.apache.commons.math3.complex.Complex complex29 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double30 = complex29.getReal();
        boolean boolean31 = org.apache.commons.math3.complex.Complex.equals(complex26, complex29);
        org.apache.commons.math3.complex.Complex complex33 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean35 = org.apache.commons.math3.complex.Complex.equals(complex26, complex33, 10);
        org.apache.commons.math3.complex.Complex complex37 = complex33.pow((double) (byte) 1);
        boolean boolean39 = org.apache.commons.math3.complex.Complex.equals(complex18, complex37, (int) (short) -1);
        org.apache.commons.math3.complex.ComplexField complexField40 = complex18.getField();
        org.apache.commons.math3.complex.Complex complex41 = complex18.sinh();
        org.apache.commons.math3.complex.Complex complex43 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex45 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double46 = complex45.getReal();
        org.apache.commons.math3.complex.Complex complex48 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double49 = complex48.getReal();
        boolean boolean50 = org.apache.commons.math3.complex.Complex.equals(complex45, complex48);
        boolean boolean52 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex43, complex45, (double) 0.0f);
        java.lang.String str53 = complex43.toString();
        org.apache.commons.math3.complex.Complex complex55 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double56 = complex55.getReal();
        org.apache.commons.math3.complex.Complex complex58 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double59 = complex58.getReal();
        boolean boolean60 = org.apache.commons.math3.complex.Complex.equals(complex55, complex58);
        org.apache.commons.math3.complex.Complex complex62 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean64 = org.apache.commons.math3.complex.Complex.equals(complex55, complex62, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex65 = complex43.add(complex62);
        org.apache.commons.math3.complex.Complex complex66 = org.apache.commons.math3.complex.Complex.NaN;
        org.apache.commons.math3.complex.Complex complex67 = complex62.subtract(complex66);
        org.apache.commons.math3.complex.Complex complex69 = complex62.subtract((double) 100.0f);
        org.apache.commons.math3.complex.Complex complex71 = complex69.multiply((int) (byte) -1);
        boolean boolean72 = org.apache.commons.math3.complex.Complex.equals(complex18, complex71);
        org.apache.commons.math3.complex.Complex complex73 = complex14.divide(complex71);
        org.apache.commons.math3.complex.Complex complex74 = complex73.tanh();
        boolean boolean75 = complex73.isInfinite();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1.0d) + "'", double27 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1.0d) + "'", double30 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(complexField40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1.0d) + "'", double46 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-1.0d) + "'", double49 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + str53 + "' != '" + "(-1.0, 0.0)" + "'", str53.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + (-1.0d) + "'", double56 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + (-1.0d) + "'", double59 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test35() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test35");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math3.complex.Complex complex4 = complex1.asin();
        org.apache.commons.math3.complex.Complex complex5 = complex4.tan();
        org.apache.commons.math3.complex.Complex complex7 = complex5.divide((double) 10);
        org.apache.commons.math3.complex.Complex complex10 = org.apache.commons.math3.complex.Complex.valueOf((double) 10.0f, (double) (-1));
        org.apache.commons.math3.complex.Complex complex12 = complex10.add((double) 'a');
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex7, complex10);
        org.apache.commons.math3.complex.Complex complex14 = complex7.acos();
        org.apache.commons.math3.complex.Complex complex15 = complex7.acos();
        org.apache.commons.math3.complex.Complex complex16 = complex7.log();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
    }

    @Test
    public void test36() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test36");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf(100.0d, (double) (short) 0);
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        org.apache.commons.math3.complex.Complex complex7 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double8 = complex7.getReal();
        boolean boolean9 = org.apache.commons.math3.complex.Complex.equals(complex4, complex7);
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double15 = complex14.getReal();
        boolean boolean16 = org.apache.commons.math3.complex.Complex.equals(complex11, complex14);
        org.apache.commons.math3.complex.Complex complex17 = complex14.sqrt();
        org.apache.commons.math3.complex.Complex complex19 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double20 = complex19.getReal();
        org.apache.commons.math3.complex.Complex complex22 = complex19.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex23 = complex17.pow(complex22);
        org.apache.commons.math3.complex.Complex complex24 = complex7.multiply(complex23);
        org.apache.commons.math3.complex.Complex complex25 = complex23.sqrt1z();
        org.apache.commons.math3.complex.Complex complex26 = complex2.divide(complex23);
        org.apache.commons.math3.complex.Complex complex27 = complex26.log();
        org.apache.commons.math3.complex.Complex complex29 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math3.complex.Complex complex31 = complex29.tanh();
        boolean boolean33 = complex31.equals((java.lang.Object) true);
        double double34 = complex31.getImaginary();
        org.apache.commons.math3.complex.Complex complex35 = complex31.sinh();
        org.apache.commons.math3.complex.Complex complex37 = complex31.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex39 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex41 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double42 = complex41.getReal();
        org.apache.commons.math3.complex.Complex complex44 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double45 = complex44.getReal();
        boolean boolean46 = org.apache.commons.math3.complex.Complex.equals(complex41, complex44);
        boolean boolean48 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex39, complex41, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex50 = complex41.multiply(1);
        org.apache.commons.math3.complex.Complex complex51 = complex41.conjugate();
        boolean boolean53 = org.apache.commons.math3.complex.Complex.equals(complex37, complex41, (int) (short) 100);
        org.apache.commons.math3.complex.Complex complex55 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math3.complex.Complex complex57 = complex55.tanh();
        double double58 = complex57.abs();
        org.apache.commons.math3.complex.Complex complex59 = complex57.exp();
        org.apache.commons.math3.complex.Complex complex60 = complex59.negate();
        org.apache.commons.math3.complex.Complex complex61 = complex59.sin();
        org.apache.commons.math3.complex.Complex complex62 = complex37.subtract(complex61);
        org.apache.commons.math3.complex.Complex complex63 = complex27.divide(complex37);
        org.apache.commons.math3.complex.Complex complex64 = complex63.conjugate();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1.0d) + "'", double20 == (-1.0d));
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + (-1.0d) + "'", double42 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1.0d) + "'", double45 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
    }

    @Test
    public void test37() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test37");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf(1.9643867237284715E-15d, (double) (byte) 1);
        org.apache.commons.math3.complex.Complex complex3 = complex2.conjugate();
        org.apache.commons.math3.complex.Complex complex5 = org.apache.commons.math3.complex.Complex.valueOf((double) 1.0f);
        org.apache.commons.math3.complex.Complex complex7 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex9 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double10 = complex9.getReal();
        org.apache.commons.math3.complex.Complex complex12 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double13 = complex12.getReal();
        boolean boolean14 = org.apache.commons.math3.complex.Complex.equals(complex9, complex12);
        boolean boolean16 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex7, complex9, (double) 0.0f);
        java.lang.String str17 = complex7.toString();
        org.apache.commons.math3.complex.Complex complex19 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double20 = complex19.getReal();
        org.apache.commons.math3.complex.Complex complex22 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double23 = complex22.getReal();
        boolean boolean24 = org.apache.commons.math3.complex.Complex.equals(complex19, complex22);
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean28 = org.apache.commons.math3.complex.Complex.equals(complex19, complex26, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex29 = complex7.add(complex26);
        java.lang.String str30 = complex26.toString();
        org.apache.commons.math3.complex.Complex complex32 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex33 = complex26.divide(complex32);
        org.apache.commons.math3.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math3.complex.Complex complex35 = complex5.multiply(complex34);
        boolean boolean36 = complex34.isNaN();
        org.apache.commons.math3.complex.Complex complex37 = complex34.sinh();
        org.apache.commons.math3.complex.Complex complex38 = complex2.multiply(complex34);
        org.apache.commons.math3.complex.Complex complex40 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex42 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double43 = complex42.getReal();
        org.apache.commons.math3.complex.Complex complex45 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double46 = complex45.getReal();
        boolean boolean47 = org.apache.commons.math3.complex.Complex.equals(complex42, complex45);
        boolean boolean49 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex40, complex42, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex50 = complex40.log();
        org.apache.commons.math3.complex.Complex complex51 = complex40.log();
        org.apache.commons.math3.complex.Complex complex52 = complex40.cos();
        org.apache.commons.math3.complex.Complex complex53 = complex34.multiply(complex40);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1.0d) + "'", double13 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "(-1.0, 0.0)" + "'", str17.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1.0d) + "'", double20 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-1.0d) + "'", double23 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "(-1.0, 0.0)" + "'", str30.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-1.0d) + "'", double43 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1.0d) + "'", double46 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
    }

    @Test
    public void test38() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test38");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex11 = complex1.exp();
        org.apache.commons.math3.complex.Complex complex13 = complex1.add((double) (byte) 0);
        org.apache.commons.math3.complex.Complex complex14 = complex13.sqrt1z();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
    }

    @Test
    public void test39() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test39");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex9 = complex8.sqrt();
        org.apache.commons.math3.complex.Complex complex10 = complex8.tanh();
        boolean boolean12 = complex10.equals((java.lang.Object) true);
        double double13 = complex10.getImaginary();
        org.apache.commons.math3.complex.Complex complex14 = complex10.sinh();
        org.apache.commons.math3.complex.Complex complex15 = complex10.cosh();
        double double16 = complex10.getImaginary();
        boolean boolean17 = complex4.equals((java.lang.Object) complex10);
        org.apache.commons.math3.complex.Complex complex18 = complex4.acos();
        org.apache.commons.math3.complex.Complex complex19 = complex18.log();
        org.apache.commons.math3.complex.Complex complex21 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double22 = complex21.getReal();
        org.apache.commons.math3.complex.Complex complex24 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex25 = complex24.sqrt();
        org.apache.commons.math3.complex.Complex complex26 = complex24.tanh();
        boolean boolean28 = complex26.equals((java.lang.Object) true);
        double double29 = complex26.getImaginary();
        org.apache.commons.math3.complex.Complex complex30 = complex26.sinh();
        org.apache.commons.math3.complex.Complex complex32 = complex26.multiply(0.0d);
        boolean boolean33 = org.apache.commons.math3.complex.Complex.equals(complex21, complex26);
        org.apache.commons.math3.complex.Complex complex34 = complex21.sqrt1z();
        java.util.List<org.apache.commons.math3.complex.Complex> complexList36 = complex34.nthRoot((int) '4');
        org.apache.commons.math3.complex.Complex complex37 = complex34.asin();
        org.apache.commons.math3.complex.Complex complex38 = complex37.sin();
        boolean boolean39 = org.apache.commons.math3.complex.Complex.equals(complex19, complex37);
        org.apache.commons.math3.complex.Complex complex40 = complex37.cos();
        org.apache.commons.math3.complex.Complex complex42 = new org.apache.commons.math3.complex.Complex((double) 1L);
        boolean boolean44 = org.apache.commons.math3.complex.Complex.equals(complex37, complex42, (int) '4');
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complexList36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test40() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test40");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex(0.0d, (double) ' ');
        org.apache.commons.math3.complex.Complex complex3 = complex2.cos();
        org.apache.commons.math3.complex.Complex complex5 = complex2.multiply((int) (byte) 0);
        org.apache.commons.math3.complex.ComplexField complexField6 = complex2.getField();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complexField6);
    }

    @Test
    public void test41() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test41");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math3.complex.Complex complex4 = complex3.acos();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double9 = complex8.getReal();
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex8, complex11);
        boolean boolean15 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex6, complex8, (double) 0.0f);
        java.lang.String str16 = complex6.toString();
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double19 = complex18.getReal();
        org.apache.commons.math3.complex.Complex complex21 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double22 = complex21.getReal();
        boolean boolean23 = org.apache.commons.math3.complex.Complex.equals(complex18, complex21);
        org.apache.commons.math3.complex.Complex complex25 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean27 = org.apache.commons.math3.complex.Complex.equals(complex18, complex25, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex28 = complex6.add(complex25);
        org.apache.commons.math3.complex.Complex complex29 = org.apache.commons.math3.complex.Complex.NaN;
        org.apache.commons.math3.complex.Complex complex30 = complex25.subtract(complex29);
        double double31 = complex29.getArgument();
        boolean boolean33 = org.apache.commons.math3.complex.Complex.equals(complex4, complex29, (int) (short) 100);
        org.apache.commons.math3.complex.Complex complex34 = complex4.atan();
        org.apache.commons.math3.complex.Complex complex36 = complex4.add((double) 0);
        org.apache.commons.math3.complex.Complex complex37 = complex4.acos();
        org.apache.commons.math3.complex.Complex complex38 = complex4.cos();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "(-1.0, 0.0)" + "'", str16.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.0d) + "'", double19 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertEquals((double) double31, Double.NaN, 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
    }

    @Test
    public void test42() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test42");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex9 = complex3.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double15 = complex14.getReal();
        boolean boolean16 = org.apache.commons.math3.complex.Complex.equals(complex11, complex14);
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean20 = org.apache.commons.math3.complex.Complex.equals(complex11, complex18, 10);
        org.apache.commons.math3.complex.Complex complex22 = complex18.pow((double) (byte) 1);
        boolean boolean24 = org.apache.commons.math3.complex.Complex.equals(complex3, complex22, (int) (short) -1);
        org.apache.commons.math3.complex.ComplexField complexField25 = complex3.getField();
        org.apache.commons.math3.complex.Complex complex26 = complex3.exp();
        org.apache.commons.math3.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math3.complex.Complex complex29 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math3.complex.Complex complex31 = complex29.tanh();
        boolean boolean33 = complex31.equals((java.lang.Object) true);
        double double34 = complex31.getImaginary();
        org.apache.commons.math3.complex.Complex complex35 = complex31.sinh();
        org.apache.commons.math3.complex.Complex complex36 = complex31.cosh();
        org.apache.commons.math3.complex.Complex complex38 = complex36.subtract((double) 0L);
        boolean boolean39 = complex26.equals((java.lang.Object) 0L);
        org.apache.commons.math3.complex.Complex complex40 = complex26.log();
        org.apache.commons.math3.complex.Complex complex41 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex43 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double44 = complex43.getReal();
        org.apache.commons.math3.complex.Complex complex46 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex47 = complex46.sqrt();
        org.apache.commons.math3.complex.Complex complex48 = complex46.tanh();
        boolean boolean50 = complex48.equals((java.lang.Object) true);
        double double51 = complex48.getImaginary();
        org.apache.commons.math3.complex.Complex complex52 = complex48.sinh();
        org.apache.commons.math3.complex.Complex complex54 = complex48.multiply(0.0d);
        boolean boolean55 = org.apache.commons.math3.complex.Complex.equals(complex43, complex48);
        org.apache.commons.math3.complex.Complex complex57 = complex43.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex58 = complex41.subtract(complex57);
        org.apache.commons.math3.complex.Complex complex59 = complex41.tan();
        org.apache.commons.math3.complex.Complex complex60 = complex26.multiply(complex59);
        org.apache.commons.math3.complex.Complex complex63 = org.apache.commons.math3.complex.Complex.valueOf((double) (byte) 100, (double) 0L);
        double double64 = complex63.getImaginary();
        org.apache.commons.math3.complex.Complex complex67 = new org.apache.commons.math3.complex.Complex(100.0d, (double) (short) 100);
        double double68 = complex67.getReal();
        org.apache.commons.math3.complex.Complex complex69 = complex67.cosh();
        double double70 = complex67.getArgument();
        org.apache.commons.math3.complex.Complex complex71 = complex63.divide(complex67);
        org.apache.commons.math3.complex.Complex complex72 = complex26.divide(complex71);
        java.util.List<org.apache.commons.math3.complex.Complex> complexList74 = complex26.nthRoot((int) (byte) 10);
        java.util.List<org.apache.commons.math3.complex.Complex> complexList76 = complex26.nthRoot((int) '4');
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(complexField25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1.0d) + "'", double44 == (-1.0d));
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 100.0d + "'", double68 == 100.0d);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.7853981633974483d + "'", double70 == 0.7853981633974483d);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complexList74);
        org.junit.Assert.assertNotNull(complexList76);
    }

    @Test
    public void test43() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test43");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        org.apache.commons.math3.complex.Complex complex7 = new org.apache.commons.math3.complex.Complex((double) (short) 0);
        org.apache.commons.math3.complex.Complex complex8 = complex3.divide(complex7);
        org.apache.commons.math3.complex.Complex complex11 = org.apache.commons.math3.complex.Complex.valueOf(100.0d, (double) (short) 0);
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex19 = complex16.sqrt();
        org.apache.commons.math3.complex.Complex complex21 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math3.complex.Complex complex23 = complex21.tanh();
        boolean boolean25 = complex23.equals((java.lang.Object) true);
        double double26 = complex23.getImaginary();
        org.apache.commons.math3.complex.Complex complex27 = complex23.sinh();
        org.apache.commons.math3.complex.Complex complex28 = complex23.cosh();
        double double29 = complex23.getImaginary();
        org.apache.commons.math3.complex.Complex complex30 = complex16.add(complex23);
        org.apache.commons.math3.complex.Complex complex31 = complex11.add(complex23);
        org.apache.commons.math3.complex.Complex complex33 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math3.complex.Complex complex35 = complex33.tanh();
        boolean boolean37 = complex35.equals((java.lang.Object) true);
        double double38 = complex35.getImaginary();
        org.apache.commons.math3.complex.Complex complex39 = complex35.sinh();
        org.apache.commons.math3.complex.Complex complex40 = complex31.multiply(complex39);
        org.apache.commons.math3.complex.Complex complex41 = complex3.add(complex31);
        org.apache.commons.math3.complex.Complex complex43 = complex41.multiply((int) '#');
        org.apache.commons.math3.complex.Complex complex44 = complex43.sin();
        org.apache.commons.math3.complex.Complex complex45 = complex43.cos();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
    }

    @Test
    public void test44() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test44");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = complex1.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex5 = complex1.log();
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) 10, (-2.0d));
        org.apache.commons.math3.complex.Complex complex9 = complex5.subtract(complex8);
        org.apache.commons.math3.complex.Complex complex10 = complex5.sqrt1z();
        org.apache.commons.math3.complex.Complex complex11 = complex5.sqrt();
        org.apache.commons.math3.complex.Complex complex12 = complex5.sinh();
        org.apache.commons.math3.complex.Complex complex13 = complex12.asin();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
    }

    @Test
    public void test45() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test45");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex9 = complex3.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex10 = complex3.acos();
        double double11 = complex3.getArgument();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, 10);
        org.apache.commons.math3.complex.Complex complex23 = complex20.sqrt1z();
        org.apache.commons.math3.complex.Complex complex24 = org.apache.commons.math3.complex.Complex.NaN;
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double27 = complex26.getReal();
        org.apache.commons.math3.complex.Complex complex29 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math3.complex.Complex complex31 = complex29.tanh();
        boolean boolean33 = complex31.equals((java.lang.Object) true);
        double double34 = complex31.getImaginary();
        org.apache.commons.math3.complex.Complex complex35 = complex31.sinh();
        org.apache.commons.math3.complex.Complex complex37 = complex31.multiply(0.0d);
        boolean boolean38 = org.apache.commons.math3.complex.Complex.equals(complex26, complex31);
        org.apache.commons.math3.complex.Complex complex40 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex41 = complex40.sqrt();
        org.apache.commons.math3.complex.Complex complex42 = complex40.sqrt1z();
        org.apache.commons.math3.complex.Complex complex43 = complex31.subtract(complex40);
        org.apache.commons.math3.complex.Complex complex44 = complex43.acos();
        boolean boolean45 = org.apache.commons.math3.complex.Complex.equals(complex24, complex43);
        org.apache.commons.math3.complex.Complex complex46 = complex23.divide(complex43);
        boolean boolean48 = org.apache.commons.math3.complex.Complex.equals(complex3, complex46, (double) (byte) 10);
        org.apache.commons.math3.complex.Complex complex49 = complex46.acos();
        org.apache.commons.math3.complex.Complex complex50 = complex49.asin();
        org.apache.commons.math3.complex.ComplexField complexField51 = complex50.getField();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1.0d) + "'", double27 == (-1.0d));
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complexField51);
    }

    @Test
    public void test46() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test46");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex(3.296908309475615d, (double) (short) 0);
        org.apache.commons.math3.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math3.complex.Complex complex5 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math3.complex.Complex complex7 = complex5.tanh();
        boolean boolean9 = complex7.equals((java.lang.Object) true);
        double double10 = complex7.getImaginary();
        org.apache.commons.math3.complex.Complex complex12 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math3.complex.Complex complex14 = complex12.tanh();
        boolean boolean16 = complex14.equals((java.lang.Object) true);
        double double17 = complex14.getImaginary();
        org.apache.commons.math3.complex.Complex complex18 = complex14.sinh();
        org.apache.commons.math3.complex.Complex complex19 = complex14.cosh();
        double double20 = complex14.getImaginary();
        org.apache.commons.math3.complex.Complex complex21 = complex7.pow(complex14);
        org.apache.commons.math3.complex.Complex complex22 = complex2.subtract(complex21);
        boolean boolean23 = complex22.isNaN();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test47() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test47");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf((-0.009804872918991509d));
        org.junit.Assert.assertNotNull(complex1);
    }

    @Test
    public void test48() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test48");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.cos();
        double double3 = complex2.getImaginary();
        org.apache.commons.math3.complex.Complex complex4 = complex2.sin();
        org.apache.commons.math3.complex.Complex complex5 = complex4.sqrt();
        double double6 = complex4.getReal();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-0.0d) + "'", double3 == (-0.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.8414709848078965d + "'", double6 == 0.8414709848078965d);
    }

    @Test
    public void test49() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test49");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equals(complex1, complex8, 10);
        org.apache.commons.math3.complex.Complex complex12 = complex1.multiply(10);
        org.apache.commons.math3.complex.Complex complex13 = complex1.reciprocal();
        org.apache.commons.math3.complex.Complex complex15 = complex1.divide((double) (-1.0f));
        org.apache.commons.math3.complex.Complex complex16 = complex15.sin();
        org.apache.commons.math3.complex.Complex complex18 = complex15.multiply((int) '4');
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double21 = complex20.getReal();
        org.apache.commons.math3.complex.Complex complex23 = complex20.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex24 = complex20.log();
        org.apache.commons.math3.complex.Complex complex26 = complex20.divide((double) 100L);
        org.apache.commons.math3.complex.Complex complex27 = complex20.atan();
        org.apache.commons.math3.complex.Complex complex28 = complex18.pow(complex27);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1.0d) + "'", double21 == (-1.0d));
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
    }

    @Test
    public void test50() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test50");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex9 = complex3.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double15 = complex14.getReal();
        boolean boolean16 = org.apache.commons.math3.complex.Complex.equals(complex11, complex14);
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean20 = org.apache.commons.math3.complex.Complex.equals(complex11, complex18, 10);
        org.apache.commons.math3.complex.Complex complex22 = complex18.pow((double) (byte) 1);
        boolean boolean24 = org.apache.commons.math3.complex.Complex.equals(complex3, complex22, (int) (short) -1);
        org.apache.commons.math3.complex.ComplexField complexField25 = complex3.getField();
        org.apache.commons.math3.complex.Complex complex26 = complex3.exp();
        org.apache.commons.math3.complex.Complex complex27 = complex26.exp();
        org.apache.commons.math3.complex.Complex complex28 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex30 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double31 = complex30.getReal();
        org.apache.commons.math3.complex.Complex complex33 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math3.complex.Complex complex35 = complex33.tanh();
        boolean boolean37 = complex35.equals((java.lang.Object) true);
        double double38 = complex35.getImaginary();
        org.apache.commons.math3.complex.Complex complex39 = complex35.sinh();
        org.apache.commons.math3.complex.Complex complex41 = complex35.multiply(0.0d);
        boolean boolean42 = org.apache.commons.math3.complex.Complex.equals(complex30, complex35);
        org.apache.commons.math3.complex.Complex complex44 = complex30.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex45 = complex28.subtract(complex44);
        org.apache.commons.math3.complex.Complex complex47 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double48 = complex47.getReal();
        double double49 = complex47.getReal();
        org.apache.commons.math3.complex.Complex complex50 = complex47.tan();
        org.apache.commons.math3.complex.Complex complex51 = complex44.pow(complex50);
        org.apache.commons.math3.complex.Complex complex52 = complex51.sinh();
        org.apache.commons.math3.complex.Complex complex54 = complex51.multiply(0);
        org.apache.commons.math3.complex.Complex complex55 = complex27.multiply(complex51);
        org.apache.commons.math3.complex.Complex complex56 = complex55.cosh();
        org.apache.commons.math3.complex.Complex complex57 = complex55.sin();
        org.apache.commons.math3.complex.Complex complex58 = complex55.sqrt();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(complexField25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-1.0d) + "'", double31 == (-1.0d));
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-1.0d) + "'", double48 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-1.0d) + "'", double49 == (-1.0d));
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
    }

    @Test
    public void test51() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test51");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = complex1.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        org.apache.commons.math3.complex.Complex complex8 = complex4.divide(complex6);
        org.apache.commons.math3.complex.Complex complex10 = complex8.multiply(10.0d);
        org.apache.commons.math3.complex.ComplexField complexField11 = complex10.getField();
        org.apache.commons.math3.complex.Complex complex12 = complex10.tanh();
        org.apache.commons.math3.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math3.complex.Complex complex14 = complex13.acos();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complexField11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
    }

    @Test
    public void test52() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test52");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        double double11 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex12 = complex3.exp();
        double double13 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex16 = org.apache.commons.math3.complex.Complex.valueOf(100.0d, (double) (short) 0);
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double19 = complex18.getReal();
        org.apache.commons.math3.complex.Complex complex21 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double22 = complex21.getReal();
        boolean boolean23 = org.apache.commons.math3.complex.Complex.equals(complex18, complex21);
        org.apache.commons.math3.complex.Complex complex24 = complex21.sqrt();
        org.apache.commons.math3.complex.Complex complex26 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math3.complex.Complex complex28 = complex26.tanh();
        boolean boolean30 = complex28.equals((java.lang.Object) true);
        double double31 = complex28.getImaginary();
        org.apache.commons.math3.complex.Complex complex32 = complex28.sinh();
        org.apache.commons.math3.complex.Complex complex33 = complex28.cosh();
        double double34 = complex28.getImaginary();
        org.apache.commons.math3.complex.Complex complex35 = complex21.add(complex28);
        org.apache.commons.math3.complex.Complex complex36 = complex16.add(complex28);
        org.apache.commons.math3.complex.Complex complex38 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math3.complex.Complex complex40 = complex38.tanh();
        boolean boolean42 = complex40.equals((java.lang.Object) true);
        double double43 = complex40.getImaginary();
        org.apache.commons.math3.complex.Complex complex44 = complex40.sinh();
        org.apache.commons.math3.complex.Complex complex45 = complex36.multiply(complex44);
        boolean boolean46 = org.apache.commons.math3.complex.Complex.equals(complex3, complex45);
        org.apache.commons.math3.complex.Complex complex48 = complex3.multiply((double) '#');
        org.apache.commons.math3.complex.Complex complex49 = complex48.cosh();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-1.0d) + "'", double11 == (-1.0d));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.0d) + "'", double19 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
    }

    @Test
    public void test53() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test53");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        double double11 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex12 = complex3.exp();
        double double13 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex16 = org.apache.commons.math3.complex.Complex.valueOf(100.0d, (double) (short) 0);
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double19 = complex18.getReal();
        org.apache.commons.math3.complex.Complex complex21 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double22 = complex21.getReal();
        boolean boolean23 = org.apache.commons.math3.complex.Complex.equals(complex18, complex21);
        org.apache.commons.math3.complex.Complex complex24 = complex21.sqrt();
        org.apache.commons.math3.complex.Complex complex26 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math3.complex.Complex complex28 = complex26.tanh();
        boolean boolean30 = complex28.equals((java.lang.Object) true);
        double double31 = complex28.getImaginary();
        org.apache.commons.math3.complex.Complex complex32 = complex28.sinh();
        org.apache.commons.math3.complex.Complex complex33 = complex28.cosh();
        double double34 = complex28.getImaginary();
        org.apache.commons.math3.complex.Complex complex35 = complex21.add(complex28);
        org.apache.commons.math3.complex.Complex complex36 = complex16.add(complex28);
        org.apache.commons.math3.complex.Complex complex38 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math3.complex.Complex complex40 = complex38.tanh();
        boolean boolean42 = complex40.equals((java.lang.Object) true);
        double double43 = complex40.getImaginary();
        org.apache.commons.math3.complex.Complex complex44 = complex40.sinh();
        org.apache.commons.math3.complex.Complex complex45 = complex36.multiply(complex44);
        boolean boolean46 = org.apache.commons.math3.complex.Complex.equals(complex3, complex45);
        org.apache.commons.math3.complex.Complex complex48 = complex3.multiply((double) '#');
        org.apache.commons.math3.complex.Complex complex49 = complex3.conjugate();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-1.0d) + "'", double11 == (-1.0d));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.0d) + "'", double19 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
    }

    @Test
    public void test54() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test54");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex11 = complex1.log();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, 10);
        org.apache.commons.math3.complex.Complex complex24 = complex20.pow((double) (byte) 1);
        boolean boolean25 = org.apache.commons.math3.complex.Complex.equals(complex1, complex24);
        org.apache.commons.math3.complex.Complex complex26 = complex1.reciprocal();
        org.apache.commons.math3.complex.Complex complex27 = complex1.cosh();
        org.apache.commons.math3.complex.Complex complex28 = complex1.acos();
        org.apache.commons.math3.complex.Complex complex29 = complex1.sinh();
        double double30 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex31 = complex1.asin();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1.0d) + "'", double30 == (-1.0d));
        org.junit.Assert.assertNotNull(complex31);
    }

    @Test
    public void test55() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test55");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf((double) (byte) 100, (double) 0L);
        double double3 = complex2.getImaginary();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex(100.0d, (double) (short) 100);
        double double7 = complex6.getReal();
        org.apache.commons.math3.complex.Complex complex8 = complex6.cosh();
        double double9 = complex6.getArgument();
        org.apache.commons.math3.complex.Complex complex10 = complex2.divide(complex6);
        org.apache.commons.math3.complex.Complex complex11 = complex10.tan();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.7853981633974483d + "'", double9 == 0.7853981633974483d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
    }

    @Test
    public void test56() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test56");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex((double) (short) 100, (double) (short) -1);
        org.apache.commons.math3.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math3.complex.Complex complex5 = complex3.multiply((int) (short) -1);
        org.apache.commons.math3.complex.Complex complex7 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math3.complex.Complex complex9 = complex7.tanh();
        org.apache.commons.math3.complex.Complex complex10 = complex7.asin();
        org.apache.commons.math3.complex.Complex complex11 = complex10.tan();
        org.apache.commons.math3.complex.Complex complex13 = complex11.divide((double) 10);
        org.apache.commons.math3.complex.Complex complex16 = org.apache.commons.math3.complex.Complex.valueOf((double) 10.0f, (double) (-1));
        org.apache.commons.math3.complex.Complex complex18 = complex16.add((double) 'a');
        boolean boolean19 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        boolean boolean21 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex3, complex16, 3.141592653589793d);
        org.apache.commons.math3.complex.Complex complex22 = complex3.tanh();
        double double23 = complex3.getArgument();
        org.apache.commons.math3.complex.Complex complex24 = complex3.exp();
        org.apache.commons.math3.complex.Complex complex25 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex27 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double28 = complex27.getReal();
        org.apache.commons.math3.complex.Complex complex30 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex31 = complex30.sqrt();
        org.apache.commons.math3.complex.Complex complex32 = complex30.tanh();
        boolean boolean34 = complex32.equals((java.lang.Object) true);
        double double35 = complex32.getImaginary();
        org.apache.commons.math3.complex.Complex complex36 = complex32.sinh();
        org.apache.commons.math3.complex.Complex complex38 = complex32.multiply(0.0d);
        boolean boolean39 = org.apache.commons.math3.complex.Complex.equals(complex27, complex32);
        org.apache.commons.math3.complex.Complex complex41 = complex27.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex42 = complex25.subtract(complex41);
        org.apache.commons.math3.complex.Complex complex44 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double45 = complex44.getReal();
        double double46 = complex44.getReal();
        org.apache.commons.math3.complex.Complex complex47 = complex44.tan();
        org.apache.commons.math3.complex.Complex complex48 = complex41.pow(complex47);
        org.apache.commons.math3.complex.Complex complex49 = complex41.sinh();
        boolean boolean51 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex24, complex49, (-5.436563656918094d));
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-0.004999833343332619d) + "'", double23 == (-0.004999833343332619d));
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-1.0d) + "'", double28 == (-1.0d));
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1.0d) + "'", double45 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1.0d) + "'", double46 == (-1.0d));
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test57() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test57");
        org.apache.commons.math3.complex.Complex complex0 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double3 = complex2.getReal();
        org.apache.commons.math3.complex.Complex complex5 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math3.complex.Complex complex7 = complex5.tanh();
        boolean boolean9 = complex7.equals((java.lang.Object) true);
        double double10 = complex7.getImaginary();
        org.apache.commons.math3.complex.Complex complex11 = complex7.sinh();
        org.apache.commons.math3.complex.Complex complex13 = complex7.multiply(0.0d);
        boolean boolean14 = org.apache.commons.math3.complex.Complex.equals(complex2, complex7);
        org.apache.commons.math3.complex.Complex complex16 = complex2.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex17 = complex0.subtract(complex16);
        org.apache.commons.math3.complex.Complex complex19 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double20 = complex19.getReal();
        double double21 = complex19.getReal();
        org.apache.commons.math3.complex.Complex complex22 = complex19.tan();
        org.apache.commons.math3.complex.Complex complex23 = complex16.pow(complex22);
        org.apache.commons.math3.complex.Complex complex24 = complex23.asin();
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double29 = complex28.getReal();
        org.apache.commons.math3.complex.Complex complex31 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double32 = complex31.getReal();
        boolean boolean33 = org.apache.commons.math3.complex.Complex.equals(complex28, complex31);
        boolean boolean35 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex26, complex28, (double) 0.0f);
        java.lang.String str36 = complex26.toString();
        org.apache.commons.math3.complex.Complex complex38 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double39 = complex38.getReal();
        org.apache.commons.math3.complex.Complex complex41 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double42 = complex41.getReal();
        boolean boolean43 = org.apache.commons.math3.complex.Complex.equals(complex38, complex41);
        org.apache.commons.math3.complex.Complex complex45 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean47 = org.apache.commons.math3.complex.Complex.equals(complex38, complex45, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex48 = complex26.add(complex45);
        java.lang.String str49 = complex45.toString();
        org.apache.commons.math3.complex.Complex complex50 = complex24.divide(complex45);
        org.apache.commons.math3.complex.Complex complex51 = complex24.sinh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1.0d) + "'", double20 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1.0d) + "'", double21 == (-1.0d));
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1.0d) + "'", double29 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-1.0d) + "'", double32 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "(-1.0, 0.0)" + "'", str36.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-1.0d) + "'", double39 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + (-1.0d) + "'", double42 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + str49 + "' != '" + "(-1.0, 0.0)" + "'", str49.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
    }

    @Test
    public void test58() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test58");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math3.complex.Complex complex6 = complex4.tanh();
        boolean boolean8 = complex6.equals((java.lang.Object) true);
        double double9 = complex6.getImaginary();
        org.apache.commons.math3.complex.Complex complex10 = complex6.sinh();
        org.apache.commons.math3.complex.Complex complex12 = complex6.multiply(0.0d);
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex1, complex6);
        org.apache.commons.math3.complex.Complex complex15 = complex1.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex16 = complex15.log();
        org.apache.commons.math3.complex.Complex complex18 = complex16.add(3.1415926535897927d);
        org.apache.commons.math3.complex.Complex complex20 = complex16.divide((double) (short) 0);
        org.apache.commons.math3.complex.Complex complex21 = complex16.negate();
        org.apache.commons.math3.complex.Complex complex22 = complex16.conjugate();
        org.apache.commons.math3.complex.Complex complex23 = complex16.negate();
        org.apache.commons.math3.complex.Complex complex24 = complex16.conjugate();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
    }

    @Test
    public void test59() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test59");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math3.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math3.complex.Complex complex6 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex7 = complex6.sqrt();
        boolean boolean9 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6, (int) (byte) -1);
        org.apache.commons.math3.complex.Complex complex10 = complex3.cosh();
        org.apache.commons.math3.complex.Complex complex12 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math3.complex.Complex complex14 = complex12.tanh();
        boolean boolean16 = complex14.equals((java.lang.Object) true);
        double double17 = complex14.getImaginary();
        boolean boolean19 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex10, complex14, (double) (short) 0);
        org.apache.commons.math3.complex.Complex complex21 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double22 = complex21.getReal();
        org.apache.commons.math3.complex.Complex complex24 = complex21.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex25 = complex21.log();
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (byte) 10, (-2.0d));
        org.apache.commons.math3.complex.Complex complex29 = complex25.subtract(complex28);
        org.apache.commons.math3.complex.Complex complex30 = complex25.sqrt1z();
        double double31 = complex30.getReal();
        org.apache.commons.math3.complex.ComplexField complexField32 = complex30.getField();
        boolean boolean33 = complex14.equals((java.lang.Object) complex30);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 3.296908309475615d + "'", double31 == 3.296908309475615d);
        org.junit.Assert.assertNotNull(complexField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test60() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test60");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf((double) (byte) 10);
        org.apache.commons.math3.complex.Complex complex3 = complex1.multiply((int) (byte) -1);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex3);
    }

    @Test
    public void test61() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test61");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex7 = complex4.sqrt();
        org.apache.commons.math3.complex.Complex complex8 = complex7.tan();
        org.apache.commons.math3.complex.Complex complex9 = complex8.sinh();
        org.apache.commons.math3.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math3.complex.Complex complex11 = complex10.atan();
        org.apache.commons.math3.complex.Complex complex12 = complex11.acos();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
    }

    @Test
    public void test62() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test62");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf((-0.0d));
        org.apache.commons.math3.complex.Complex complex2 = complex1.acos();
        boolean boolean3 = complex2.isInfinite();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test63() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test63");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf((double) (short) 0, 14142.842748188923d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test64() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test64");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex((double) (-1.0f), (-0.7620216974073766d));
        org.apache.commons.math3.complex.Complex complex4 = complex2.pow(0.0d);
        org.junit.Assert.assertNotNull(complex4);
    }

    @Test
    public void test65() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test65");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf(100.0d, (double) (short) 0);
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        org.apache.commons.math3.complex.Complex complex7 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double8 = complex7.getReal();
        boolean boolean9 = org.apache.commons.math3.complex.Complex.equals(complex4, complex7);
        org.apache.commons.math3.complex.Complex complex10 = complex7.sqrt();
        org.apache.commons.math3.complex.Complex complex12 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math3.complex.Complex complex14 = complex12.tanh();
        boolean boolean16 = complex14.equals((java.lang.Object) true);
        double double17 = complex14.getImaginary();
        org.apache.commons.math3.complex.Complex complex18 = complex14.sinh();
        org.apache.commons.math3.complex.Complex complex19 = complex14.cosh();
        double double20 = complex14.getImaginary();
        org.apache.commons.math3.complex.Complex complex21 = complex7.add(complex14);
        org.apache.commons.math3.complex.Complex complex22 = complex2.add(complex14);
        org.apache.commons.math3.complex.Complex complex24 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex25 = complex24.sqrt();
        org.apache.commons.math3.complex.Complex complex26 = complex24.tanh();
        boolean boolean28 = complex26.equals((java.lang.Object) true);
        double double29 = complex26.getImaginary();
        org.apache.commons.math3.complex.Complex complex30 = complex26.sinh();
        org.apache.commons.math3.complex.Complex complex31 = complex22.multiply(complex30);
        org.apache.commons.math3.complex.Complex complex33 = complex30.pow((double) (short) -1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex33);
    }

    @Test
    public void test66() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test66");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math3.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math3.complex.Complex complex5 = complex3.log();
        org.apache.commons.math3.complex.Complex complex7 = complex3.pow((-1.9643867237284715E-15d));
        org.apache.commons.math3.complex.Complex complex8 = complex3.sqrt();
        org.apache.commons.math3.complex.Complex complex10 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex11 = complex10.sqrt();
        org.apache.commons.math3.complex.Complex complex12 = complex10.tanh();
        org.apache.commons.math3.complex.Complex complex13 = complex10.asin();
        org.apache.commons.math3.complex.Complex complex14 = complex13.tan();
        org.apache.commons.math3.complex.Complex complex16 = complex14.divide((double) 10);
        org.apache.commons.math3.complex.Complex complex17 = complex16.tanh();
        boolean boolean18 = complex8.equals((java.lang.Object) complex16);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test67() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test67");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.cos();
        org.apache.commons.math3.complex.Complex complex4 = complex2.subtract(1.0d);
        org.apache.commons.math3.complex.Complex complex6 = complex4.add((double) (-1.0f));
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex6);
    }

    @Test
    public void test68() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test68");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        java.lang.String str11 = complex1.toString();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex23 = complex1.add(complex20);
        org.apache.commons.math3.complex.Complex complex24 = org.apache.commons.math3.complex.Complex.NaN;
        org.apache.commons.math3.complex.Complex complex25 = complex20.subtract(complex24);
        double double26 = complex24.getArgument();
        org.apache.commons.math3.complex.Complex complex27 = complex24.sin();
        org.apache.commons.math3.complex.Complex complex28 = complex27.sqrt();
        org.apache.commons.math3.complex.Complex complex30 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double31 = complex30.getReal();
        org.apache.commons.math3.complex.Complex complex33 = complex30.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex35 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double36 = complex35.getReal();
        org.apache.commons.math3.complex.Complex complex37 = complex33.divide(complex35);
        boolean boolean39 = org.apache.commons.math3.complex.Complex.equals(complex27, complex37, (int) (byte) -1);
        org.apache.commons.math3.complex.Complex complex40 = complex27.sinh();
        org.apache.commons.math3.complex.Complex complex42 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex44 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double45 = complex44.getReal();
        org.apache.commons.math3.complex.Complex complex47 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double48 = complex47.getReal();
        boolean boolean49 = org.apache.commons.math3.complex.Complex.equals(complex44, complex47);
        boolean boolean51 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex42, complex44, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex52 = complex42.conjugate();
        org.apache.commons.math3.complex.Complex complex54 = complex42.multiply(0);
        boolean boolean55 = org.apache.commons.math3.complex.Complex.equals(complex40, complex42);
        org.apache.commons.math3.complex.Complex complex56 = complex40.sqrt();
        org.apache.commons.math3.complex.Complex complex58 = complex40.pow(97.51410154434075d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "(-1.0, 0.0)" + "'", str11.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals((double) double26, Double.NaN, 0);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-1.0d) + "'", double31 == (-1.0d));
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-1.0d) + "'", double36 == (-1.0d));
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1.0d) + "'", double45 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-1.0d) + "'", double48 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex58);
    }

    @Test
    public void test69() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test69");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math3.complex.Complex complex4 = complex3.acos();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double9 = complex8.getReal();
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex8, complex11);
        boolean boolean15 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex6, complex8, (double) 0.0f);
        java.lang.String str16 = complex6.toString();
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double19 = complex18.getReal();
        org.apache.commons.math3.complex.Complex complex21 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double22 = complex21.getReal();
        boolean boolean23 = org.apache.commons.math3.complex.Complex.equals(complex18, complex21);
        org.apache.commons.math3.complex.Complex complex25 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean27 = org.apache.commons.math3.complex.Complex.equals(complex18, complex25, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex28 = complex6.add(complex25);
        org.apache.commons.math3.complex.Complex complex29 = org.apache.commons.math3.complex.Complex.NaN;
        org.apache.commons.math3.complex.Complex complex30 = complex25.subtract(complex29);
        double double31 = complex29.getArgument();
        boolean boolean33 = org.apache.commons.math3.complex.Complex.equals(complex4, complex29, (int) (short) 100);
        org.apache.commons.math3.complex.Complex complex34 = complex4.atan();
        org.apache.commons.math3.complex.Complex complex36 = complex4.add((double) 0);
        org.apache.commons.math3.complex.Complex complex37 = complex4.acos();
        org.apache.commons.math3.complex.Complex complex38 = complex4.sin();
        org.apache.commons.math3.complex.Complex complex39 = complex4.sin();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "(-1.0, 0.0)" + "'", str16.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.0d) + "'", double19 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertEquals((double) double31, Double.NaN, 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
    }

    @Test
    public void test70() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test70");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        double double11 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex12 = complex3.exp();
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double15 = complex14.getReal();
        org.apache.commons.math3.complex.Complex complex17 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math3.complex.Complex complex19 = complex17.tanh();
        boolean boolean21 = complex19.equals((java.lang.Object) true);
        double double22 = complex19.getImaginary();
        org.apache.commons.math3.complex.Complex complex23 = complex19.sinh();
        org.apache.commons.math3.complex.Complex complex25 = complex19.multiply(0.0d);
        boolean boolean26 = org.apache.commons.math3.complex.Complex.equals(complex14, complex19);
        org.apache.commons.math3.complex.Complex complex28 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math3.complex.Complex complex30 = complex28.sqrt1z();
        org.apache.commons.math3.complex.Complex complex31 = complex19.subtract(complex28);
        org.apache.commons.math3.complex.Complex complex32 = complex31.acos();
        org.apache.commons.math3.complex.Complex complex33 = complex12.divide(complex31);
        org.apache.commons.math3.complex.Complex complex34 = complex31.sin();
        org.apache.commons.math3.complex.Complex complex37 = new org.apache.commons.math3.complex.Complex(3.296908309475615d, (double) (short) 0);
        org.apache.commons.math3.complex.Complex complex38 = complex37.sqrt();
        org.apache.commons.math3.complex.Complex complex39 = complex37.tanh();
        org.apache.commons.math3.complex.Complex complex41 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double42 = complex41.getReal();
        org.apache.commons.math3.complex.Complex complex44 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double45 = complex44.getReal();
        boolean boolean46 = org.apache.commons.math3.complex.Complex.equals(complex41, complex44);
        org.apache.commons.math3.complex.Complex complex48 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex49 = complex48.sqrt();
        org.apache.commons.math3.complex.Complex complex50 = complex48.tanh();
        boolean boolean52 = complex50.equals((java.lang.Object) true);
        double double53 = complex50.getImaginary();
        org.apache.commons.math3.complex.Complex complex54 = complex50.sinh();
        org.apache.commons.math3.complex.Complex complex55 = complex50.cosh();
        double double56 = complex50.getImaginary();
        boolean boolean57 = complex44.equals((java.lang.Object) complex50);
        org.apache.commons.math3.complex.Complex complex58 = complex50.log();
        org.apache.commons.math3.complex.Complex complex59 = complex58.conjugate();
        org.apache.commons.math3.complex.Complex complex60 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex61 = complex60.asin();
        org.apache.commons.math3.complex.Complex complex62 = complex60.tanh();
        org.apache.commons.math3.complex.Complex complex63 = complex62.sin();
        org.apache.commons.math3.complex.Complex complex65 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double66 = complex65.getReal();
        double double67 = complex65.getReal();
        org.apache.commons.math3.complex.Complex complex68 = complex65.tan();
        org.apache.commons.math3.complex.Complex complex69 = complex65.exp();
        org.apache.commons.math3.complex.Complex complex71 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double72 = complex71.getReal();
        org.apache.commons.math3.complex.Complex complex74 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex75 = complex74.sqrt();
        org.apache.commons.math3.complex.Complex complex76 = complex74.tanh();
        boolean boolean78 = complex76.equals((java.lang.Object) true);
        double double79 = complex76.getImaginary();
        org.apache.commons.math3.complex.Complex complex80 = complex76.sinh();
        org.apache.commons.math3.complex.Complex complex82 = complex76.multiply(0.0d);
        boolean boolean83 = org.apache.commons.math3.complex.Complex.equals(complex71, complex76);
        org.apache.commons.math3.complex.Complex complex85 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex86 = complex85.sqrt();
        org.apache.commons.math3.complex.Complex complex87 = complex85.sqrt1z();
        org.apache.commons.math3.complex.Complex complex88 = complex76.subtract(complex85);
        org.apache.commons.math3.complex.Complex complex89 = complex69.divide(complex76);
        org.apache.commons.math3.complex.Complex complex90 = complex62.pow(complex69);
        boolean boolean92 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex59, complex62, (double) 0L);
        org.apache.commons.math3.complex.Complex complex93 = complex37.subtract(complex59);
        org.apache.commons.math3.complex.Complex complex95 = complex59.pow((double) (-1));
        org.apache.commons.math3.complex.Complex complex96 = complex59.atan();
        boolean boolean97 = complex96.isNaN();
        java.lang.String str98 = complex96.toString();
        org.apache.commons.math3.complex.Complex complex99 = complex31.add(complex96);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-1.0d) + "'", double11 == (-1.0d));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + (-1.0d) + "'", double42 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1.0d) + "'", double45 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + (-1.0d) + "'", double66 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + (-1.0d) + "'", double67 == (-1.0d));
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + (-1.0d) + "'", double72 == (-1.0d));
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + str98 + "' != '" + "(NaN, NaN)" + "'", str98.equals("(NaN, NaN)"));
        org.junit.Assert.assertNotNull(complex99);
    }

    @Test
    public void test71() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test71");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex(10.841470984807897d, (-0.7853981633974483d));
    }

    @Test
    public void test72() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test72");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex(0.0d, (double) ' ');
        org.apache.commons.math3.complex.Complex complex3 = complex2.asin();
        org.apache.commons.math3.complex.Complex complex4 = complex2.exp();
        org.apache.commons.math3.complex.Complex complex6 = complex4.divide(3.1415926535897927d);
        boolean boolean7 = complex6.isInfinite();
        org.apache.commons.math3.complex.Complex complex8 = complex6.tan();
        org.apache.commons.math3.complex.Complex complex9 = complex6.acos();
        org.apache.commons.math3.complex.Complex complex11 = complex6.pow(0.31171224697113936d);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex11);
    }

    @Test
    public void test73() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test73");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf((double) '4', (double) (-1.0f));
        org.apache.commons.math3.complex.Complex complex3 = complex2.tan();
        org.apache.commons.math3.complex.Complex complex5 = complex3.multiply(0.0d);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex5);
    }

    @Test
    public void test74() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test74");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf((double) (short) -1, 2.718281828459045d);
        org.apache.commons.math3.complex.Complex complex4 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math3.complex.Complex complex6 = complex4.tanh();
        org.apache.commons.math3.complex.Complex complex7 = complex6.sin();
        org.apache.commons.math3.complex.ComplexField complexField8 = complex6.getField();
        org.apache.commons.math3.complex.Complex complex9 = complex2.divide(complex6);
        org.apache.commons.math3.complex.Complex complex11 = complex6.multiply((int) (short) -1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complexField8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex11);
    }

    @Test
    public void test75() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test75");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        double double4 = complex3.abs();
        org.apache.commons.math3.complex.Complex complex5 = complex3.exp();
        org.apache.commons.math3.complex.Complex complex6 = complex5.negate();
        org.apache.commons.math3.complex.Complex complex8 = complex6.pow((-0.0d));
        double double9 = complex8.getReal();
        org.apache.commons.math3.complex.Complex complex12 = new org.apache.commons.math3.complex.Complex(3.296908309475615d, (double) (short) 0);
        org.apache.commons.math3.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math3.complex.Complex complex14 = complex12.tanh();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        org.apache.commons.math3.complex.Complex complex19 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double20 = complex19.getReal();
        boolean boolean21 = org.apache.commons.math3.complex.Complex.equals(complex16, complex19);
        org.apache.commons.math3.complex.Complex complex23 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math3.complex.Complex complex25 = complex23.tanh();
        boolean boolean27 = complex25.equals((java.lang.Object) true);
        double double28 = complex25.getImaginary();
        org.apache.commons.math3.complex.Complex complex29 = complex25.sinh();
        org.apache.commons.math3.complex.Complex complex30 = complex25.cosh();
        double double31 = complex25.getImaginary();
        boolean boolean32 = complex19.equals((java.lang.Object) complex25);
        org.apache.commons.math3.complex.Complex complex33 = complex25.log();
        org.apache.commons.math3.complex.Complex complex34 = complex33.conjugate();
        org.apache.commons.math3.complex.Complex complex35 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex36 = complex35.asin();
        org.apache.commons.math3.complex.Complex complex37 = complex35.tanh();
        org.apache.commons.math3.complex.Complex complex38 = complex37.sin();
        org.apache.commons.math3.complex.Complex complex40 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double41 = complex40.getReal();
        double double42 = complex40.getReal();
        org.apache.commons.math3.complex.Complex complex43 = complex40.tan();
        org.apache.commons.math3.complex.Complex complex44 = complex40.exp();
        org.apache.commons.math3.complex.Complex complex46 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double47 = complex46.getReal();
        org.apache.commons.math3.complex.Complex complex49 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex50 = complex49.sqrt();
        org.apache.commons.math3.complex.Complex complex51 = complex49.tanh();
        boolean boolean53 = complex51.equals((java.lang.Object) true);
        double double54 = complex51.getImaginary();
        org.apache.commons.math3.complex.Complex complex55 = complex51.sinh();
        org.apache.commons.math3.complex.Complex complex57 = complex51.multiply(0.0d);
        boolean boolean58 = org.apache.commons.math3.complex.Complex.equals(complex46, complex51);
        org.apache.commons.math3.complex.Complex complex60 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex61 = complex60.sqrt();
        org.apache.commons.math3.complex.Complex complex62 = complex60.sqrt1z();
        org.apache.commons.math3.complex.Complex complex63 = complex51.subtract(complex60);
        org.apache.commons.math3.complex.Complex complex64 = complex44.divide(complex51);
        org.apache.commons.math3.complex.Complex complex65 = complex37.pow(complex44);
        boolean boolean67 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex34, complex37, (double) 0L);
        org.apache.commons.math3.complex.Complex complex68 = complex12.subtract(complex34);
        org.apache.commons.math3.complex.Complex complex70 = complex34.pow((double) (-1));
        org.apache.commons.math3.complex.Complex complex71 = complex8.subtract(complex34);
        double double72 = complex8.getReal();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1.0d) + "'", double20 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-1.0d) + "'", double41 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + (-1.0d) + "'", double42 == (-1.0d));
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-1.0d) + "'", double47 == (-1.0d));
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
    }

    @Test
    public void test76() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test76");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex9 = complex3.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        boolean boolean20 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex11, complex13, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex21 = complex11.log();
        org.apache.commons.math3.complex.Complex complex23 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double24 = complex23.getReal();
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double27 = complex26.getReal();
        boolean boolean28 = org.apache.commons.math3.complex.Complex.equals(complex23, complex26);
        org.apache.commons.math3.complex.Complex complex30 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean32 = org.apache.commons.math3.complex.Complex.equals(complex23, complex30, 10);
        org.apache.commons.math3.complex.Complex complex34 = complex30.pow((double) (byte) 1);
        boolean boolean35 = org.apache.commons.math3.complex.Complex.equals(complex11, complex34);
        org.apache.commons.math3.complex.Complex complex36 = complex11.reciprocal();
        boolean boolean38 = org.apache.commons.math3.complex.Complex.equals(complex9, complex11, (double) (byte) 1);
        org.apache.commons.math3.complex.Complex complex39 = complex9.conjugate();
        org.apache.commons.math3.complex.Complex complex40 = complex39.cos();
        org.apache.commons.math3.complex.Complex complex42 = complex40.pow((double) (short) 1);
        org.apache.commons.math3.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math3.complex.Complex complex45 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math3.complex.Complex complex47 = complex45.tanh();
        boolean boolean49 = complex47.equals((java.lang.Object) true);
        double double50 = complex47.getImaginary();
        org.apache.commons.math3.complex.Complex complex51 = complex47.sinh();
        org.apache.commons.math3.complex.Complex complex53 = complex47.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex55 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double56 = complex55.getReal();
        org.apache.commons.math3.complex.Complex complex58 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double59 = complex58.getReal();
        boolean boolean60 = org.apache.commons.math3.complex.Complex.equals(complex55, complex58);
        org.apache.commons.math3.complex.Complex complex62 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean64 = org.apache.commons.math3.complex.Complex.equals(complex55, complex62, 10);
        org.apache.commons.math3.complex.Complex complex66 = complex62.pow((double) (byte) 1);
        boolean boolean68 = org.apache.commons.math3.complex.Complex.equals(complex47, complex66, (int) (short) -1);
        org.apache.commons.math3.complex.ComplexField complexField69 = complex47.getField();
        org.apache.commons.math3.complex.Complex complex70 = complex47.negate();
        org.apache.commons.math3.complex.Complex complex72 = complex47.multiply((-1.9643867237284715E-15d));
        org.apache.commons.math3.complex.Complex complex73 = complex47.cosh();
        org.apache.commons.math3.complex.Complex complex74 = complex73.tanh();
        boolean boolean75 = org.apache.commons.math3.complex.Complex.equals(complex43, complex74);
        org.apache.commons.math3.complex.Complex complex77 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex78 = complex77.conjugate();
        org.apache.commons.math3.complex.Complex complex79 = complex78.sin();
        org.apache.commons.math3.complex.Complex complex80 = complex79.sinh();
        org.apache.commons.math3.complex.Complex complex81 = complex79.acos();
        org.apache.commons.math3.complex.Complex complex82 = complex74.multiply(complex81);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1.0d) + "'", double24 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1.0d) + "'", double27 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + (-1.0d) + "'", double56 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + (-1.0d) + "'", double59 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(complexField69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
    }

    @Test
    public void test77() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test77");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        java.lang.String str11 = complex1.toString();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex23 = complex1.add(complex20);
        org.apache.commons.math3.complex.Complex complex24 = org.apache.commons.math3.complex.Complex.NaN;
        org.apache.commons.math3.complex.Complex complex25 = complex20.subtract(complex24);
        double double26 = complex24.getArgument();
        org.apache.commons.math3.complex.Complex complex27 = complex24.sin();
        org.apache.commons.math3.complex.Complex complex28 = complex27.sqrt();
        org.apache.commons.math3.complex.Complex complex30 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double31 = complex30.getReal();
        org.apache.commons.math3.complex.Complex complex33 = complex30.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex35 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double36 = complex35.getReal();
        org.apache.commons.math3.complex.Complex complex37 = complex33.divide(complex35);
        boolean boolean39 = org.apache.commons.math3.complex.Complex.equals(complex27, complex37, (int) (byte) -1);
        org.apache.commons.math3.complex.Complex complex40 = complex37.tanh();
        org.apache.commons.math3.complex.Complex complex42 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math3.complex.Complex complex44 = complex42.tanh();
        org.apache.commons.math3.complex.Complex complex45 = complex42.asin();
        org.apache.commons.math3.complex.Complex complex46 = complex42.cos();
        org.apache.commons.math3.complex.Complex complex47 = complex42.tanh();
        org.apache.commons.math3.complex.Complex complex48 = complex42.log();
        boolean boolean50 = org.apache.commons.math3.complex.Complex.equals(complex40, complex42, 0.0d);
        double double51 = complex40.getReal();
        org.apache.commons.math3.complex.Complex complex53 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double54 = complex53.getReal();
        org.apache.commons.math3.complex.Complex complex56 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math3.complex.Complex complex58 = complex56.tanh();
        boolean boolean60 = complex58.equals((java.lang.Object) true);
        double double61 = complex58.getImaginary();
        org.apache.commons.math3.complex.Complex complex62 = complex58.sinh();
        org.apache.commons.math3.complex.Complex complex64 = complex58.multiply(0.0d);
        boolean boolean65 = org.apache.commons.math3.complex.Complex.equals(complex53, complex58);
        org.apache.commons.math3.complex.Complex complex67 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex68 = complex67.sqrt();
        org.apache.commons.math3.complex.Complex complex69 = complex67.sqrt1z();
        org.apache.commons.math3.complex.Complex complex70 = complex58.subtract(complex67);
        org.apache.commons.math3.complex.Complex complex71 = complex70.reciprocal();
        org.apache.commons.math3.complex.Complex complex72 = complex71.acos();
        org.apache.commons.math3.complex.Complex complex73 = complex40.multiply(complex71);
        org.apache.commons.math3.complex.Complex complex74 = complex73.conjugate();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "(-1.0, 0.0)" + "'", str11.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertEquals((double) double26, Double.NaN, 0);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-1.0d) + "'", double31 == (-1.0d));
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-1.0d) + "'", double36 == (-1.0d));
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.9999999958776927d + "'", double51 == 0.9999999958776927d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1.0d) + "'", double54 == (-1.0d));
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
    }

    @Test
    public void test78() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test78");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        org.apache.commons.math3.complex.Complex complex7 = new org.apache.commons.math3.complex.Complex((double) (short) 0);
        org.apache.commons.math3.complex.Complex complex8 = complex3.divide(complex7);
        org.apache.commons.math3.complex.ComplexField complexField9 = complex3.getField();
        double double10 = complex3.abs();
        org.apache.commons.math3.complex.Complex complex12 = complex3.subtract(1.5707963267948966d);
        org.apache.commons.math3.complex.Complex complex13 = complex3.sqrt();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complexField9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
    }

    @Test
    public void test79() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test79");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equals(complex1, complex8, 10);
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (short) 100, (double) (short) -1);
        boolean boolean14 = complex1.equals((java.lang.Object) complex13);
        boolean boolean16 = complex1.equals((java.lang.Object) (-1L));
        org.apache.commons.math3.complex.Complex complex18 = complex1.multiply(10.0d);
        org.apache.commons.math3.complex.Complex complex19 = complex1.sinh();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
    }

    @Test
    public void test80() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test80");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        java.lang.String str11 = complex1.toString();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex23 = complex1.add(complex20);
        org.apache.commons.math3.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math3.complex.Complex complex25 = complex24.asin();
        org.apache.commons.math3.complex.Complex complex27 = complex24.multiply((-0.8414709848078965d));
        double double28 = complex27.getReal();
        org.apache.commons.math3.complex.Complex complex29 = complex27.reciprocal();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "(-1.0, 0.0)" + "'", str11.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-0.0d) + "'", double28 == (-0.0d));
        org.junit.Assert.assertNotNull(complex29);
    }

    @Test
    public void test81() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test81");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf((double) (short) 10, (double) 100);
        java.lang.Class<?> wildcardClass3 = complex2.getClass();
        double double4 = complex2.getImaginary();
        org.apache.commons.math3.complex.Complex complex5 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex6 = complex5.asin();
        org.apache.commons.math3.complex.Complex complex7 = complex5.tanh();
        boolean boolean8 = complex2.equals((java.lang.Object) complex7);
        org.apache.commons.math3.complex.Complex complex9 = complex2.cosh();
        org.apache.commons.math3.complex.Complex complex10 = complex2.sqrt();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
    }

    @Test
    public void test82() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test82");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex9 = complex3.multiply(0.0d);
        org.apache.commons.math3.complex.Complex complex10 = complex3.acos();
        java.lang.Class<?> wildcardClass11 = complex10.getClass();
        org.apache.commons.math3.complex.Complex complex12 = complex10.negate();
        org.apache.commons.math3.complex.Complex complex13 = complex10.cos();
        org.apache.commons.math3.complex.Complex complex15 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double16 = complex15.getReal();
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double19 = complex18.getReal();
        boolean boolean20 = org.apache.commons.math3.complex.Complex.equals(complex15, complex18);
        org.apache.commons.math3.complex.Complex complex22 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean24 = org.apache.commons.math3.complex.Complex.equals(complex15, complex22, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex26 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double29 = complex28.getReal();
        org.apache.commons.math3.complex.Complex complex31 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double32 = complex31.getReal();
        boolean boolean33 = org.apache.commons.math3.complex.Complex.equals(complex28, complex31);
        boolean boolean35 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex26, complex28, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex37 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex39 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double40 = complex39.getReal();
        org.apache.commons.math3.complex.Complex complex42 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double43 = complex42.getReal();
        boolean boolean44 = org.apache.commons.math3.complex.Complex.equals(complex39, complex42);
        boolean boolean46 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex37, complex39, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex47 = complex37.log();
        org.apache.commons.math3.complex.Complex complex49 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double50 = complex49.getReal();
        org.apache.commons.math3.complex.Complex complex52 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double53 = complex52.getReal();
        boolean boolean54 = org.apache.commons.math3.complex.Complex.equals(complex49, complex52);
        org.apache.commons.math3.complex.Complex complex56 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean58 = org.apache.commons.math3.complex.Complex.equals(complex49, complex56, 10);
        org.apache.commons.math3.complex.Complex complex60 = complex56.pow((double) (byte) 1);
        boolean boolean61 = org.apache.commons.math3.complex.Complex.equals(complex37, complex60);
        boolean boolean62 = complex28.equals((java.lang.Object) complex37);
        boolean boolean64 = org.apache.commons.math3.complex.Complex.equals(complex15, complex37, (int) (byte) 100);
        org.apache.commons.math3.complex.Complex complex65 = complex10.subtract(complex15);
        org.apache.commons.math3.complex.Complex complex66 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex68 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double69 = complex68.getReal();
        org.apache.commons.math3.complex.Complex complex71 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math3.complex.Complex complex73 = complex71.tanh();
        boolean boolean75 = complex73.equals((java.lang.Object) true);
        double double76 = complex73.getImaginary();
        org.apache.commons.math3.complex.Complex complex77 = complex73.sinh();
        org.apache.commons.math3.complex.Complex complex79 = complex73.multiply(0.0d);
        boolean boolean80 = org.apache.commons.math3.complex.Complex.equals(complex68, complex73);
        org.apache.commons.math3.complex.Complex complex82 = complex68.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex83 = complex66.subtract(complex82);
        org.apache.commons.math3.complex.Complex complex84 = complex83.exp();
        double double85 = complex84.abs();
        boolean boolean87 = org.apache.commons.math3.complex.Complex.equals(complex15, complex84, (int) ' ');
        org.apache.commons.math3.complex.Complex complex88 = complex84.atan();
        org.apache.commons.math3.complex.Complex complex90 = complex84.divide((-5.090647314608025E14d));
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1.0d) + "'", double16 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.0d) + "'", double19 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1.0d) + "'", double29 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-1.0d) + "'", double32 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-1.0d) + "'", double40 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-1.0d) + "'", double43 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-1.0d) + "'", double50 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-1.0d) + "'", double53 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + (-1.0d) + "'", double69 == (-1.0d));
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex90);
    }

    @Test
    public void test83() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test83");
        org.apache.commons.math3.complex.Complex complex0 = org.apache.commons.math3.complex.Complex.ZERO;
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex2 = complex1.asin();
        org.apache.commons.math3.complex.Complex complex3 = complex0.divide(complex2);
        org.apache.commons.math3.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math3.complex.Complex complex5 = complex3.log();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
    }

    @Test
    public void test84() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test84");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex12 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double13 = complex12.getReal();
        org.apache.commons.math3.complex.Complex complex15 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math3.complex.Complex complex17 = complex15.tanh();
        boolean boolean19 = complex17.equals((java.lang.Object) true);
        double double20 = complex17.getImaginary();
        org.apache.commons.math3.complex.Complex complex21 = complex17.sinh();
        org.apache.commons.math3.complex.Complex complex23 = complex17.multiply(0.0d);
        boolean boolean24 = org.apache.commons.math3.complex.Complex.equals(complex12, complex17);
        org.apache.commons.math3.complex.Complex complex26 = complex12.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex28 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex29 = complex28.sqrt();
        org.apache.commons.math3.complex.Complex complex30 = complex28.tanh();
        boolean boolean32 = complex30.equals((java.lang.Object) true);
        double double33 = complex30.getImaginary();
        org.apache.commons.math3.complex.Complex complex34 = complex26.add(complex30);
        boolean boolean36 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex3, complex34, (double) 10);
        org.apache.commons.math3.complex.Complex complex38 = complex34.pow(0.0d);
        org.apache.commons.math3.complex.Complex complex40 = complex34.add(Double.NaN);
        org.apache.commons.math3.complex.Complex complex42 = complex40.multiply(1.9643867237284715E-15d);
        org.apache.commons.math3.complex.Complex complex44 = complex42.multiply((double) (-1L));
        org.apache.commons.math3.complex.Complex complex45 = complex44.cosh();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1.0d) + "'", double13 == (-1.0d));
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
    }

    @Test
    public void test85() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test85");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math3.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math3.complex.Complex complex6 = complex4.subtract((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex7 = complex4.log();
        org.apache.commons.math3.complex.Complex complex9 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        org.apache.commons.math3.complex.Complex complex14 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double15 = complex14.getReal();
        boolean boolean16 = org.apache.commons.math3.complex.Complex.equals(complex11, complex14);
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex9, complex11, (double) 0.0f);
        java.lang.String str19 = complex9.toString();
        org.apache.commons.math3.complex.Complex complex21 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double22 = complex21.getReal();
        org.apache.commons.math3.complex.Complex complex24 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double25 = complex24.getReal();
        boolean boolean26 = org.apache.commons.math3.complex.Complex.equals(complex21, complex24);
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean30 = org.apache.commons.math3.complex.Complex.equals(complex21, complex28, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex31 = complex9.add(complex28);
        org.apache.commons.math3.complex.Complex complex32 = org.apache.commons.math3.complex.Complex.NaN;
        org.apache.commons.math3.complex.Complex complex33 = complex28.subtract(complex32);
        double double34 = complex32.getArgument();
        org.apache.commons.math3.complex.Complex complex35 = complex32.sin();
        org.apache.commons.math3.complex.Complex complex36 = complex35.sqrt();
        org.apache.commons.math3.complex.Complex complex38 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double39 = complex38.getReal();
        org.apache.commons.math3.complex.Complex complex41 = complex38.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex43 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double44 = complex43.getReal();
        org.apache.commons.math3.complex.Complex complex45 = complex41.divide(complex43);
        boolean boolean47 = org.apache.commons.math3.complex.Complex.equals(complex35, complex45, (int) (byte) -1);
        org.apache.commons.math3.complex.Complex complex48 = complex45.tanh();
        org.apache.commons.math3.complex.Complex complex50 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex51 = complex50.sqrt();
        org.apache.commons.math3.complex.Complex complex52 = complex50.tanh();
        org.apache.commons.math3.complex.Complex complex53 = complex50.asin();
        org.apache.commons.math3.complex.Complex complex54 = complex50.cos();
        org.apache.commons.math3.complex.Complex complex55 = complex50.tanh();
        org.apache.commons.math3.complex.Complex complex56 = complex50.log();
        boolean boolean58 = org.apache.commons.math3.complex.Complex.equals(complex48, complex50, 0.0d);
        double double59 = complex48.getReal();
        org.apache.commons.math3.complex.Complex complex61 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double62 = complex61.getReal();
        org.apache.commons.math3.complex.Complex complex64 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex65 = complex64.sqrt();
        org.apache.commons.math3.complex.Complex complex66 = complex64.tanh();
        boolean boolean68 = complex66.equals((java.lang.Object) true);
        double double69 = complex66.getImaginary();
        org.apache.commons.math3.complex.Complex complex70 = complex66.sinh();
        org.apache.commons.math3.complex.Complex complex72 = complex66.multiply(0.0d);
        boolean boolean73 = org.apache.commons.math3.complex.Complex.equals(complex61, complex66);
        org.apache.commons.math3.complex.Complex complex75 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex76 = complex75.sqrt();
        org.apache.commons.math3.complex.Complex complex77 = complex75.sqrt1z();
        org.apache.commons.math3.complex.Complex complex78 = complex66.subtract(complex75);
        org.apache.commons.math3.complex.Complex complex79 = complex78.reciprocal();
        org.apache.commons.math3.complex.Complex complex80 = complex79.acos();
        org.apache.commons.math3.complex.Complex complex81 = complex48.multiply(complex79);
        org.apache.commons.math3.complex.Complex complex83 = complex81.divide(3.136592820246461d);
        boolean boolean85 = org.apache.commons.math3.complex.Complex.equals(complex4, complex81, 2.718281828459045d);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "(-1.0, 0.0)" + "'", str19.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertEquals((double) double34, Double.NaN, 0);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-1.0d) + "'", double39 == (-1.0d));
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1.0d) + "'", double44 == (-1.0d));
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.9999999958776927d + "'", double59 == 0.9999999958776927d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-1.0d) + "'", double62 == (-1.0d));
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test86() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test86");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex(100.0d, (double) (short) 100);
        org.apache.commons.math3.complex.Complex complex4 = complex2.multiply((double) 100);
        org.apache.commons.math3.complex.Complex complex7 = org.apache.commons.math3.complex.Complex.valueOf(100.0d, (double) (short) 0);
        org.apache.commons.math3.complex.Complex complex9 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double10 = complex9.getReal();
        org.apache.commons.math3.complex.Complex complex12 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double13 = complex12.getReal();
        boolean boolean14 = org.apache.commons.math3.complex.Complex.equals(complex9, complex12);
        org.apache.commons.math3.complex.Complex complex15 = complex12.sqrt();
        org.apache.commons.math3.complex.Complex complex17 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math3.complex.Complex complex19 = complex17.tanh();
        boolean boolean21 = complex19.equals((java.lang.Object) true);
        double double22 = complex19.getImaginary();
        org.apache.commons.math3.complex.Complex complex23 = complex19.sinh();
        org.apache.commons.math3.complex.Complex complex24 = complex19.cosh();
        double double25 = complex19.getImaginary();
        org.apache.commons.math3.complex.Complex complex26 = complex12.add(complex19);
        org.apache.commons.math3.complex.Complex complex27 = complex7.add(complex19);
        org.apache.commons.math3.complex.Complex complex29 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math3.complex.Complex complex31 = complex29.tanh();
        boolean boolean33 = complex31.equals((java.lang.Object) true);
        double double34 = complex31.getImaginary();
        org.apache.commons.math3.complex.Complex complex35 = complex31.sinh();
        org.apache.commons.math3.complex.Complex complex36 = complex27.multiply(complex35);
        boolean boolean38 = org.apache.commons.math3.complex.Complex.equals(complex4, complex27, (int) '4');
        double double39 = complex27.abs();
        org.apache.commons.math3.complex.Complex complex42 = org.apache.commons.math3.complex.Complex.valueOf((double) 10.0f, (double) (-1));
        org.apache.commons.math3.complex.Complex complex43 = complex27.subtract(complex42);
        org.apache.commons.math3.complex.Complex complex44 = complex42.reciprocal();
        org.apache.commons.math3.complex.Complex complex46 = new org.apache.commons.math3.complex.Complex((double) (short) 10);
        double double47 = complex46.getReal();
        org.apache.commons.math3.complex.Complex complex49 = complex46.pow((double) (short) 1);
        org.apache.commons.math3.complex.Complex complex51 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex53 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double54 = complex53.getReal();
        org.apache.commons.math3.complex.Complex complex56 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double57 = complex56.getReal();
        boolean boolean58 = org.apache.commons.math3.complex.Complex.equals(complex53, complex56);
        boolean boolean60 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex51, complex53, (double) 0.0f);
        java.lang.String str61 = complex51.toString();
        org.apache.commons.math3.complex.Complex complex63 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double64 = complex63.getReal();
        org.apache.commons.math3.complex.Complex complex66 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double67 = complex66.getReal();
        boolean boolean68 = org.apache.commons.math3.complex.Complex.equals(complex63, complex66);
        org.apache.commons.math3.complex.Complex complex70 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean72 = org.apache.commons.math3.complex.Complex.equals(complex63, complex70, 10);
        boolean boolean73 = org.apache.commons.math3.complex.Complex.equals(complex51, complex70);
        org.apache.commons.math3.complex.Complex complex74 = complex46.pow(complex70);
        org.apache.commons.math3.complex.Complex complex75 = complex44.divide(complex70);
        org.apache.commons.math3.complex.Complex complex78 = org.apache.commons.math3.complex.Complex.valueOf((double) 1L, (double) 0L);
        org.apache.commons.math3.complex.Complex complex79 = complex78.tanh();
        org.apache.commons.math3.complex.Complex complex80 = complex75.divide(complex79);
        org.apache.commons.math3.complex.Complex complex81 = complex79.sqrt1z();
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1.0d) + "'", double13 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10.0d + "'", double47 == 10.0d);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1.0d) + "'", double54 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-1.0d) + "'", double57 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + str61 + "' != '" + "(-1.0, 0.0)" + "'", str61.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + (-1.0d) + "'", double64 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + (-1.0d) + "'", double67 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
    }

    @Test
    public void test87() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test87");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.cos();
        org.apache.commons.math3.complex.Complex complex4 = complex2.subtract(1.0d);
        org.apache.commons.math3.complex.Complex complex6 = complex2.subtract((double) 0);
        org.apache.commons.math3.complex.Complex complex7 = complex2.cosh();
        org.apache.commons.math3.complex.Complex complex8 = complex7.sqrt1z();
        org.apache.commons.math3.complex.Complex complex9 = complex8.tan();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
    }

    @Test
    public void test88() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test88");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf((double) (short) 10, (double) 100);
        java.lang.Class<?> wildcardClass3 = complex2.getClass();
        double double4 = complex2.getImaginary();
        org.apache.commons.math3.complex.Complex complex6 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math3.complex.Complex complex8 = complex6.tanh();
        double double9 = complex8.abs();
        org.apache.commons.math3.complex.Complex complex10 = complex8.exp();
        org.apache.commons.math3.complex.Complex complex11 = complex10.negate();
        org.apache.commons.math3.complex.Complex complex13 = complex11.pow((-0.0d));
        org.apache.commons.math3.complex.Complex complex14 = complex13.tan();
        org.apache.commons.math3.complex.Complex complex15 = complex2.multiply(complex13);
        boolean boolean16 = complex2.isInfinite();
        java.util.List<org.apache.commons.math3.complex.Complex> complexList18 = complex2.nthRoot((int) 'a');
        org.apache.commons.math3.complex.Complex complex20 = complex2.divide(0.6366197723675814d);
        org.apache.commons.math3.complex.Complex complex21 = complex2.conjugate();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(complexList18);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
    }

    @Test
    public void test89() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test89");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf((double) 1L, (double) 0L);
        org.apache.commons.math3.complex.Complex complex3 = complex2.tanh();
        org.apache.commons.math3.complex.Complex complex4 = complex3.cos();
        org.apache.commons.math3.complex.Complex complex5 = complex3.cos();
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
    }

    @Test
    public void test90() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test90");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        boolean boolean5 = complex3.equals((java.lang.Object) true);
        double double6 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex7 = complex3.sinh();
        org.apache.commons.math3.complex.Complex complex8 = complex3.cosh();
        double double9 = complex3.getImaginary();
        double double10 = complex3.abs();
        org.apache.commons.math3.complex.Complex complex12 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double13 = complex12.getReal();
        org.apache.commons.math3.complex.Complex complex15 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double16 = complex15.getReal();
        boolean boolean17 = org.apache.commons.math3.complex.Complex.equals(complex12, complex15);
        org.apache.commons.math3.complex.Complex complex19 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean21 = org.apache.commons.math3.complex.Complex.equals(complex12, complex19, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex23 = new org.apache.commons.math3.complex.Complex((-1.557407724654902d));
        org.apache.commons.math3.complex.Complex complex24 = complex12.multiply(complex23);
        org.apache.commons.math3.complex.Complex complex25 = complex3.pow(complex12);
        double double26 = complex12.getReal();
        org.apache.commons.math3.complex.Complex complex28 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double29 = complex28.getReal();
        org.apache.commons.math3.complex.Complex complex31 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double32 = complex31.getReal();
        boolean boolean33 = org.apache.commons.math3.complex.Complex.equals(complex28, complex31);
        org.apache.commons.math3.complex.Complex complex35 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean37 = org.apache.commons.math3.complex.Complex.equals(complex28, complex35, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex38 = complex35.sin();
        boolean boolean40 = org.apache.commons.math3.complex.Complex.equals(complex12, complex38, (int) 'a');
        org.apache.commons.math3.complex.Complex complex41 = complex38.negate();
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1.0d) + "'", double13 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1.0d) + "'", double16 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-1.0d) + "'", double26 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1.0d) + "'", double29 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-1.0d) + "'", double32 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(complex41);
    }

    @Test
    public void test91() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test91");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex((double) (byte) 10, (-2.0d));
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        org.apache.commons.math3.complex.Complex complex9 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double10 = complex9.getReal();
        boolean boolean11 = org.apache.commons.math3.complex.Complex.equals(complex6, complex9);
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex4, complex6, (double) 0.0f);
        double double14 = complex6.getReal();
        org.apache.commons.math3.complex.Complex complex15 = complex6.exp();
        org.apache.commons.math3.complex.ComplexField complexField16 = complex15.getField();
        boolean boolean17 = complex15.isNaN();
        org.apache.commons.math3.complex.Complex complex18 = complex15.acos();
        org.apache.commons.math3.complex.Complex complex19 = complex2.subtract(complex15);
        boolean boolean20 = complex2.isNaN();
        org.apache.commons.math3.complex.Complex complex21 = complex2.conjugate();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complexField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(complex21);
    }

    @Test
    public void test92() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test92");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex11 = complex1.log();
        org.apache.commons.math3.complex.Complex complex13 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double14 = complex13.getReal();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        boolean boolean18 = org.apache.commons.math3.complex.Complex.equals(complex13, complex16);
        org.apache.commons.math3.complex.Complex complex20 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean22 = org.apache.commons.math3.complex.Complex.equals(complex13, complex20, 10);
        org.apache.commons.math3.complex.Complex complex24 = complex20.pow((double) (byte) 1);
        boolean boolean25 = org.apache.commons.math3.complex.Complex.equals(complex1, complex24);
        org.apache.commons.math3.complex.Complex complex26 = complex1.cosh();
        double double27 = complex1.getArgument();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 3.141592653589793d + "'", double27 == 3.141592653589793d);
    }

    @Test
    public void test93() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test93");
        org.apache.commons.math3.complex.Complex complex2 = org.apache.commons.math3.complex.Complex.valueOf((double) (-1), 0.03125d);
        org.junit.Assert.assertNotNull(complex2);
    }

    @Test
    public void test94() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test94");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double2 = complex1.getReal();
        org.apache.commons.math3.complex.Complex complex4 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double5 = complex4.getReal();
        boolean boolean6 = org.apache.commons.math3.complex.Complex.equals(complex1, complex4);
        org.apache.commons.math3.complex.Complex complex8 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double9 = complex8.getReal();
        org.apache.commons.math3.complex.Complex complex11 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double12 = complex11.getReal();
        boolean boolean13 = org.apache.commons.math3.complex.Complex.equals(complex8, complex11);
        org.apache.commons.math3.complex.Complex complex14 = complex11.sqrt();
        org.apache.commons.math3.complex.Complex complex16 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double17 = complex16.getReal();
        org.apache.commons.math3.complex.Complex complex19 = complex16.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex20 = complex14.pow(complex19);
        org.apache.commons.math3.complex.Complex complex21 = complex4.multiply(complex20);
        org.apache.commons.math3.complex.Complex complex22 = complex20.sqrt1z();
        org.apache.commons.math3.complex.Complex complex24 = complex20.multiply((double) 0L);
        org.apache.commons.math3.complex.Complex complex27 = new org.apache.commons.math3.complex.Complex((double) (short) 100, (double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex28 = complex24.multiply(complex27);
        org.apache.commons.math3.complex.Complex complex30 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex31 = complex30.sqrt();
        org.apache.commons.math3.complex.Complex complex32 = complex30.tanh();
        boolean boolean34 = complex32.equals((java.lang.Object) true);
        double double35 = complex32.getImaginary();
        org.apache.commons.math3.complex.Complex complex36 = complex32.sinh();
        org.apache.commons.math3.complex.Complex complex37 = complex32.cosh();
        org.apache.commons.math3.complex.ComplexField complexField38 = complex37.getField();
        double double39 = complex37.getImaginary();
        org.apache.commons.math3.complex.Complex complex40 = complex37.asin();
        org.apache.commons.math3.complex.Complex complex41 = complex40.sin();
        org.apache.commons.math3.complex.Complex complex42 = complex41.cos();
        org.apache.commons.math3.complex.Complex complex43 = complex42.asin();
        org.apache.commons.math3.complex.Complex complex44 = complex43.atan();
        boolean boolean45 = org.apache.commons.math3.complex.Complex.equals(complex28, complex44);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complexField38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test95() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test95");
        org.apache.commons.math3.complex.Complex complex1 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math3.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math3.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math3.complex.Complex complex6 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex7 = complex6.sqrt();
        boolean boolean9 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6, (int) (byte) -1);
        org.apache.commons.math3.complex.Complex complex10 = complex3.cosh();
        org.apache.commons.math3.complex.Complex complex12 = complex10.multiply(10);
        org.apache.commons.math3.complex.Complex complex14 = complex12.pow((double) (-1.0f));
        org.apache.commons.math3.complex.Complex complex15 = complex12.sinh();
        org.apache.commons.math3.complex.Complex complex17 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex19 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double20 = complex19.getReal();
        org.apache.commons.math3.complex.Complex complex22 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double23 = complex22.getReal();
        boolean boolean24 = org.apache.commons.math3.complex.Complex.equals(complex19, complex22);
        boolean boolean26 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex17, complex19, (double) 0.0f);
        java.lang.String str27 = complex17.toString();
        org.apache.commons.math3.complex.Complex complex29 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double30 = complex29.getReal();
        org.apache.commons.math3.complex.Complex complex32 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double33 = complex32.getReal();
        boolean boolean34 = org.apache.commons.math3.complex.Complex.equals(complex29, complex32);
        org.apache.commons.math3.complex.Complex complex36 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean38 = org.apache.commons.math3.complex.Complex.equals(complex29, complex36, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex39 = complex17.add(complex36);
        org.apache.commons.math3.complex.Complex complex40 = org.apache.commons.math3.complex.Complex.NaN;
        org.apache.commons.math3.complex.Complex complex41 = complex36.subtract(complex40);
        org.apache.commons.math3.complex.Complex complex43 = complex36.subtract((double) 100.0f);
        org.apache.commons.math3.complex.Complex complex45 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math3.complex.Complex complex47 = complex45.tanh();
        boolean boolean49 = complex47.equals((java.lang.Object) true);
        double double50 = complex47.getImaginary();
        org.apache.commons.math3.complex.Complex complex51 = complex47.sinh();
        org.apache.commons.math3.complex.Complex complex52 = complex43.pow(complex47);
        org.apache.commons.math3.complex.Complex complex54 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double55 = complex54.getReal();
        org.apache.commons.math3.complex.Complex complex57 = complex54.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex59 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double60 = complex59.getReal();
        org.apache.commons.math3.complex.Complex complex61 = complex57.divide(complex59);
        org.apache.commons.math3.complex.Complex complex63 = complex61.multiply(10.0d);
        org.apache.commons.math3.complex.ComplexField complexField64 = complex63.getField();
        org.apache.commons.math3.complex.Complex complex65 = complex63.tan();
        org.apache.commons.math3.complex.Complex complex66 = complex52.subtract(complex65);
        double double67 = complex65.abs();
        org.apache.commons.math3.complex.Complex complex68 = complex12.subtract(complex65);
        org.apache.commons.math3.complex.Complex complex69 = org.apache.commons.math3.complex.Complex.I;
        org.apache.commons.math3.complex.Complex complex70 = complex68.divide(complex69);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1.0d) + "'", double20 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-1.0d) + "'", double23 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "(-1.0, 0.0)" + "'", str27.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1.0d) + "'", double30 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-1.0d) + "'", double33 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-1.0d) + "'", double55 == (-1.0d));
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + (-1.0d) + "'", double60 == (-1.0d));
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complexField64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.5872139151569291d + "'", double67 == 0.5872139151569291d);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
    }

    @Test
    public void test96() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test96");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double7 = complex6.getReal();
        boolean boolean8 = org.apache.commons.math3.complex.Complex.equals(complex3, complex6);
        boolean boolean10 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex1, complex3, (double) 0.0f);
        double double11 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex12 = complex3.exp();
        double double13 = complex3.getImaginary();
        double double14 = complex3.getImaginary();
        org.apache.commons.math3.complex.Complex complex15 = complex3.cosh();
        org.apache.commons.math3.complex.Complex complex16 = org.apache.commons.math3.complex.Complex.ONE;
        org.apache.commons.math3.complex.Complex complex18 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double19 = complex18.getReal();
        org.apache.commons.math3.complex.Complex complex21 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math3.complex.Complex complex23 = complex21.tanh();
        boolean boolean25 = complex23.equals((java.lang.Object) true);
        double double26 = complex23.getImaginary();
        org.apache.commons.math3.complex.Complex complex27 = complex23.sinh();
        org.apache.commons.math3.complex.Complex complex29 = complex23.multiply(0.0d);
        boolean boolean30 = org.apache.commons.math3.complex.Complex.equals(complex18, complex23);
        org.apache.commons.math3.complex.Complex complex32 = complex18.pow((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex33 = complex16.subtract(complex32);
        org.apache.commons.math3.complex.Complex complex35 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex36 = complex35.sqrt();
        org.apache.commons.math3.complex.Complex complex37 = complex16.add(complex35);
        org.apache.commons.math3.complex.Complex complex38 = complex37.negate();
        org.apache.commons.math3.complex.Complex complex40 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex42 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double43 = complex42.getReal();
        org.apache.commons.math3.complex.Complex complex45 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double46 = complex45.getReal();
        boolean boolean47 = org.apache.commons.math3.complex.Complex.equals(complex42, complex45);
        boolean boolean49 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex40, complex42, (double) 0.0f);
        org.apache.commons.math3.complex.Complex complex50 = complex40.log();
        boolean boolean52 = org.apache.commons.math3.complex.Complex.equals(complex37, complex50, (int) (byte) 100);
        boolean boolean53 = org.apache.commons.math3.complex.Complex.equals(complex15, complex50);
        org.apache.commons.math3.complex.Complex complex56 = org.apache.commons.math3.complex.Complex.valueOf(10.000124996093955d, (double) (byte) 1);
        boolean boolean57 = org.apache.commons.math3.complex.Complex.equals(complex15, complex56);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-1.0d) + "'", double11 == (-1.0d));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.0d) + "'", double19 == (-1.0d));
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-1.0d) + "'", double43 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1.0d) + "'", double46 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test97() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test97");
        org.apache.commons.math3.complex.Complex complex2 = new org.apache.commons.math3.complex.Complex((double) (short) 100, (double) (short) -1);
        org.apache.commons.math3.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math3.complex.Complex complex5 = complex3.multiply((int) (short) -1);
        org.apache.commons.math3.complex.Complex complex6 = complex5.acos();
        org.apache.commons.math3.complex.Complex complex8 = complex5.add(0.0d);
        org.apache.commons.math3.complex.Complex complex9 = complex8.log();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
    }

    @Test
    public void test98() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test98");
        org.apache.commons.math3.complex.Complex complex1 = new org.apache.commons.math3.complex.Complex((double) (byte) 100);
        org.apache.commons.math3.complex.Complex complex3 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double4 = complex3.getReal();
        org.apache.commons.math3.complex.Complex complex6 = complex3.multiply((int) (short) 10);
        org.apache.commons.math3.complex.Complex complex7 = complex3.log();
        org.apache.commons.math3.complex.Complex complex10 = new org.apache.commons.math3.complex.Complex((double) (byte) 10, (-2.0d));
        org.apache.commons.math3.complex.Complex complex11 = complex7.subtract(complex10);
        org.apache.commons.math3.complex.Complex complex12 = complex7.sqrt1z();
        org.apache.commons.math3.complex.Complex complex13 = complex7.sqrt();
        org.apache.commons.math3.complex.Complex complex15 = org.apache.commons.math3.complex.Complex.valueOf(0.0d);
        org.apache.commons.math3.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math3.complex.Complex complex17 = complex15.sqrt1z();
        org.apache.commons.math3.complex.Complex complex18 = complex17.reciprocal();
        org.apache.commons.math3.complex.Complex complex19 = complex13.multiply(complex18);
        org.apache.commons.math3.complex.Complex complex20 = complex19.exp();
        org.apache.commons.math3.complex.Complex complex22 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex24 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double25 = complex24.getReal();
        org.apache.commons.math3.complex.Complex complex27 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double28 = complex27.getReal();
        boolean boolean29 = org.apache.commons.math3.complex.Complex.equals(complex24, complex27);
        boolean boolean31 = org.apache.commons.math3.complex.Complex.equalsWithRelativeTolerance(complex22, complex24, (double) 0.0f);
        java.lang.String str32 = complex22.toString();
        org.apache.commons.math3.complex.Complex complex34 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double35 = complex34.getReal();
        org.apache.commons.math3.complex.Complex complex37 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        double double38 = complex37.getReal();
        boolean boolean39 = org.apache.commons.math3.complex.Complex.equals(complex34, complex37);
        org.apache.commons.math3.complex.Complex complex41 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        boolean boolean43 = org.apache.commons.math3.complex.Complex.equals(complex34, complex41, (int) (short) -1);
        org.apache.commons.math3.complex.Complex complex44 = complex22.add(complex41);
        java.lang.String str45 = complex41.toString();
        org.apache.commons.math3.complex.Complex complex47 = new org.apache.commons.math3.complex.Complex((double) (byte) -1);
        org.apache.commons.math3.complex.Complex complex48 = complex41.divide(complex47);
        org.apache.commons.math3.complex.Complex complex49 = complex47.negate();
        double double50 = complex47.getImaginary();
        org.apache.commons.math3.complex.Complex complex51 = complex20.divide(complex47);
        org.apache.commons.math3.complex.Complex complex52 = complex1.subtract(complex47);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-1.0d) + "'", double4 == (-1.0d));
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-1.0d) + "'", double28 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "(-1.0, 0.0)" + "'", str32.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-1.0d) + "'", double35 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-1.0d) + "'", double38 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + str45 + "' != '" + "(-1.0, 0.0)" + "'", str45.equals("(-1.0, 0.0)"));
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
    }
}
